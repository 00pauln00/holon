- name: "failed_to_upload_dbi_set_dbifile_with_s3"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "failed_to_upload_dbi_set_dbifile_with_s3"
     parent: None

  tasks:
  - block:
    - name: "{{ recipe_name }}: Start minio server"
      vars:
        s3_dir: "/local/minio_data"
      debug:
         msg:
          - "{{ lookup('obj_storage', 'minio', 'start', s3_dir) }}"
      when: s3Support == "true"

    - name: "{{ recipe_name }}: Generate overlapping seq range and unique DBIs."
      include_role:
        name: common
        tasks_from: generate_overlapping_dbi_set
      vars:
        Type: "0"
        VblkNum: "1000"
        VblkPer: "8"
        DBIPerSet: "5"
        ChunkNum: "-1"
      register: chunk

    - name: "{{ recipe_name }}: copy dbi set files into a dbisetfiles directory"
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('helper', 'clone_dbi_set', Chunk) }}"
      register: clone_dir

    - name: "{{ recipe_name }}: delete any dbi set file from s3."
      vars:
        input_param:
          chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('obj_storage', 'delete_set_file', input_param) }}"
      register: deleted_file

    - name: "{{ recipe_name }}: Perform GC."
      vars:
        input_param:
          debug_mode: "false"
          chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('garbage_collection', 'single_exec', 'start', input_param) }}"

    - name: "{{ recipe_name }}: Marker file present or not."
      vars:
        formal_params: {
                "chunk" : "{{ chunk['msg'][0] }}",
                }
      debug:
        msg: "{{ lookup('obj_storage', 'get_markers', formal_params) }}"
      register: marker_check

    - name: "{{ recipe_name }}: Validate GC and Nisd Marker "
      vars:
        gc_marker: "{{ marker_check.msg[0] }}"
        nisd_marker: "{{ marker_check.msg[1] }}"
      debug:
        msg: "GC Marker : {{ gc_marker }} | NISD Marker : {{ nisd_marker }}"
      failed_when: (gc_marker | int != nisd_marker | int) or (gc_marker is none)

    - name: "{{ recipe_name }}: Get dbi file names."
      vars:
        formal_params:
          chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('obj_storage', 'get_list', formal_params) }}"
      register: list_op
      no_log: true

    - debug:
        var: deleted_file

    - name: "{{ recipe_name }}: get dbi set files list"
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('helper', 'get_set_file_list', Chunk, deleted_file.msg[0]) }}"
      register: files_list

    - debug:
        var: files_list

    - name: "{{ recipe_name }}: check if failed to upload files are still present or not"
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('helper', 'check_files', files_list.msg, list_op.msg) }}"

    - name: "{{ recipe_name }}: delete gc download folder"
      vars:
        gc_dir: "gc-download"
      debug:
         msg: "{{ lookup('helper', 'delete_dir', gc_dir) }}"

    - name: Copy file to deleted_file directory and remove the base name
      vars:
        deleted_basename: "{{ deleted_file.msg[0] | basename }}"
        target_directory: "{{ deleted_file.msg[0] | dirname }}"  # Get the directory part of deleted_file
        source_file_path: "{{ clone_dir.msg[0] }}/{{ deleted_basename }}"  # Full source file path
      copy:
        src: "{{ source_file_path }}"  # Source file path
        dest: "{{ target_directory }}/"  # Destination directory
        remote_src: yes  # Indicate that the source file is already on the remote machine
        force: yes  # Overwrite the file if it already exists
      register: copy_result

    - name: "{{ recipe_name }}: upload corrupted file"
      vars:
        deleted_basename: "{{ deleted_file['msg'] | basename }}"
        formal_params: {
                "chunk" : "{{ chunk.msg[0] }}",
                "path": "{{ deleted_file.msg[0] }}",
                }
      debug:
         msg: "{{ lookup('obj_storage', 'operation', 'upload', formal_params) }}"

    - name: "{{ recipe_name }}: Perform GC."
      vars:
        input_param:
          debug_mode: "false"
          chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('garbage_collection', 'single_exec', 'start', input_param) }}"

    - name: "{{ recipe_name }}: Marker file present or not."
      vars:
        formal_params: {
                "chunk" : "{{ chunk['msg'][0] }}",
                }
      debug:
        msg: "{{ lookup('obj_storage', 'get_markers', formal_params) }}"
      register: marker_check

    - name: "{{ recipe_name }}: Validate GC and Nisd Marker "
      vars:
        gc_marker: "{{ marker_check.msg[0] }}"
        nisd_marker: "{{ marker_check.msg[1] }}"
      debug:
        msg: "GC Marker : {{ gc_marker }} | NISD Marker : {{ nisd_marker }}"
      failed_when: (gc_marker | int != nisd_marker | int) or (gc_marker is none)
    
    - name: "{{ recipe_name }}: Start data validation"
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('data_gen', 'validator', Chunk) }}"