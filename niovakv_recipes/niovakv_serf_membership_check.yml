- import_playbook: niovakv_leader_election.yml
- name: "niovakv_serf_membership_check"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "niovakv_serf_membership_check"
    parent: "niovakv_leader_election"

  tasks:
  - block:
     - name: "Check if parent recipe failed"
       debug: msg="Check if parent recipe {{ parent }} failed"
       failed_when: terminate_recipe == true

      # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'niovakv'."
       vars:
         app_type: "{{ app_type}}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "niovakv")

     - name: "{{ recipe_name }}: Get unused client-uuid."
       include_role:
         name: common
         tasks_from: get_new_client_uuid
       register: client_uuid

     - debug:
        msg: "Client UUID: {{ client_uuid }}"

      #Start niovakv_server
     - name: "{{ recipe_name }}: Start new niovakv server which starts pmdb client."
       include_role:
         name: common
         tasks_from: start_client_golang
       vars:
         ClientUUID: "{{ client_uuid.stdout }}"

      # Write key-value before killing niovakv-server.
     - name: "{{ recipe_name }}: Write the key-value before killing the niovakv-server."
       vars:
         input_param: {
              "Operation": "write",
              "Key": "China",
              "Value": "population",
              "OutfileName": "wrkey",
              "NumRequest": 1,
              "MultiKey": False,
              "Sequential" : False
              }
         nkvclires: "{{ lookup('niovakv_client_handler', 'niovakv', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ nkvclires }}"
       register: writeres

     # check if write is successful
     - name: "{{ recipe_name }}: Check if write is successful"
       debug:
         msg: "Check if write is successful"
       failed_when: >
             writeres['results'][0]['item']['write'][0]['Response']['Status'] != 0

       # Kill the niovakv-server.
     - name: "{{ recipe_name }}: Kill the niovakv-server."
       debug:
        msg: "killing the niovakv-server: {{ lookup('niova_raftprocess', 'kill', client_uuid.stdout, wantlist=True) }}"

     # Read key-value after killing node.
     - name: "{{ recipe_name }}: Read the value of requested key."
       vars:
         input_param: {
             "Operation": "read",
             "Key": "China",
             "Value": "",
             "OutfileName": "rdval",
             "NumRequest": 1,
             "MultiKey": False,
             "Sequential" : False
              }
         nkvclires: "{{ lookup('niovakv_client_handler', 'niovakv', input_param, wantlist=True) }}"
       debug:
         msg: "Read value from niovakv_client."
       with_items:
          - "{{ nkvclires }}"
       register: readres

     - name: "{{ recipe_name }}: compare values after successful read operation."
       vars:
         wrval: "{{ writeres['results'][0]['item']['write'][0]['Request'] }}"
         rdval: "{{ readres['results'][0]['item']['read'][0]['Response'] }}"
       debug:
         msg:
          - "Verifying parameter after read operation"
       failed_when: >
        (rdval['Status'] != 0) or
        (rdval['Response'] != wrval['Value'])

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
