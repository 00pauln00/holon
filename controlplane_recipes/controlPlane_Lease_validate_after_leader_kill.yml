- import_playbook: controlPlane_Lease_recipe.yml

- name: "controlPlane_lease_validate_after_leader_kill"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "controlPlane_lease_validate_after_leader_kill"
    parent: "controlPlane_operation_all"
    no_of_leases: 4
  vars_files:
    - ../leaseStateValue.yml

  tasks:
    - block:
        - name: "Check if parent recipe failed"
          debug: msg="Check if parent recipe {{ parent }} failed"
          failed_when: terminate_recipe == true

        # check for the app_type
        - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
          vars:
            app_type: "{{ app_type }}"
          debug:
            msg: "app_type is: {{ app_type }}"
          failed_when: (app_type != "controlplane")

        - name: "{{ recipe_name }}: Get cluster information"
          include_role:
            name: common
            tasks_from: get_follower_stats

        - name: "Get multiple client uuids."
          include_role:
            name: common
            tasks_from: get_multiple_client_uuids
          loop: "{{ range(0, no_of_leases) | list }}"

        - name: "Get multiple resource uuids."
          include_role:
            name: common
            tasks_from: get_multiple_resource_uuids
          loop: "{{ range(0, no_of_leases) | list }}"

        - name: "{{ recipe_name }}: Starting controlplane_client to getLease and verify it."
          vars:
            input_param:
              {
                "Key": "{{ resourceUUIDS[item] }}",
                "Value": "{{ ClientUUIDS[item] }}",
                "Operation": "GetLease",
                "Port": "3000",
                "OutfileName": "ncpc_getLease_{{ resourceUUIDS[item] }}",
                "wait_for_outfile": True,
              }
          set_fact:
            ncpc_getLease: "{{ ncpc_getLease|default([]) + [lookup('controlplane', 'lease', input_param)] }}"
          failed_when: >
            (ncpc_getLease[item]['output_data']['LeaseRes']['Status'] != 0) or
            (ncpc_getLease[item]['output_data']['LeaseRes']['Client'] != ClientUUIDS[item]) or
            (ncpc_getLease[item]['output_data']['LeaseRes']['Resource'] != resourceUUIDS[item]) or
            (ncpc_getLease[item]['output_data']['LeaseRes']['LeaseState'] != GRANTED)
          loop: "{{ range(0, no_of_leases) | list }}"

        - name: "{{ recipe_name }}: Starting controlplane_client to lookupLease."
          vars:
            input_param:
              {
                "Key": "{{ resourceUUIDS[item] }}",
                "Value": "{{ ClientUUIDS[item] }}",
                "Operation": "LookupLease",
                "Port": "3000",
                "OutfileName": "ncpc_lookupLease_{{ resourceUUIDS[item] }}",
                "wait_for_outfile": True,
              }
          set_fact:
            ncpc_lookupLease: "{{ ncpc_lookupLease|default([]) + [lookup('controlplane', 'lease', input_param)] }}"
          failed_when: >
            (ncpc_lookupLease[item]['output_data']['LeaseRes']['Status'] != 0) or
            (ncpc_lookupLease[item]['output_data']['LeaseRes']['Client'] != ncpc_getLease[item]['output_data']['LeaseRes']['Client']) or
            (ncpc_lookupLease[item]['output_data']['LeaseRes']['Resource'] != ncpc_getLease[item]['output_data']['LeaseRes']['Resource']) or
            (ncpc_lookupLease[item]['output_data']['LeaseRes']['LeaseState'] != GRANTED)
          loop: "{{ range(0, no_of_leases) | list }}"

        - name: "{{ recipe_name }}: Kill the Leader."
          debug:
            msg: "{{ lookup('niova_raftprocess', 'kill', LeaderUUID['/0/leader-uuid']) }}"

        - name: "{{ recipe_name }}: Get the running peers list."
          include_role:
            name: common
            tasks_from: get_server_uuid_info
        
        - name: "{{ recipe_name }}: Again wait until new leader election happens."
          vars:
            stage: "wait_for_new_leader_election"
          debug:
            msg: "Waiting for leader election"
          until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid')| dict2items | map(attribute='value') | list | first != LeaderUUID['/0/leader-uuid']
          retries: 10
          delay: 1
          loop: "{{ range(0, NRunningPeers | length) | list }}"

        - name: "{{ recipe_name }}: Verify already taken leases gets updated with new leader."
          vars:
            input_param:
              {
                "Key": "{{ resourceUUIDS[item] }}",
                "Value": "{{ ClientUUIDS[item] }}",
                "Operation": "LookupLease",
                "Port": "3000",
                "OutfileName": "ncpc_lookupLease_aftr_new_leader_{{ resourceUUIDS[item] }}",
                "wait_for_outfile": True,
              }
          set_fact:
            lookup_aftr_new_leader: "{{ lookup_aftr_new_leader|default([]) + [lookup('controlplane', 'lease', input_param)] }}"
          failed_when: >
            (lookup_aftr_new_leader[item]['outfile_status'] != 0) or
            (lookup_aftr_new_leader[item]['output_data']['LeaseRes']['Status'] != 0) or
            (lookup_aftr_new_leader[item]['output_data']['LeaseRes']['TimeStamp']['LeaderTerm'] <= ncpc_lookupLease[item]['output_data']['LeaseRes']['TimeStamp']['LeaderTerm']) or
            (lookup_aftr_new_leader[item]['output_data']['LeaseRes']['LeaseState'] != GRANTED)
          loop: "{{ range(0, no_of_leases) | list }}"

      rescue:
        - name: "Recipe: {{ recipe_name }} failed"
          set_fact:
            terminate_recipe: true
