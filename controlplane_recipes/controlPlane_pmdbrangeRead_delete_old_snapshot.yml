- name: "controlplane_pmdbrangeRead_delete_old_snapshot.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "RangeQuery_delete_old_snapshot"
    parent: None

  tasks:
    - block:
        - name: "Check if parent recipe failed"
          debug: msg="Check if parent recipe {{ parent }} failed"
          failed_when: terminate_recipe == true

        # check for the app_type
        - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
          vars:
            app_type: "{{ app_type }}"
          debug:
            msg: "app_type is: {{ app_type }}"
          failed_when: (app_type != "controlplane")

        - name: "{{ recipe_name }}: Start pmdb and proxy servers."
          include_role:
            name: common
            tasks_from: pmdb_cluster_init.yml
          vars:
            number_of_clients: 2
            number_of_PMDBServers: 5

        - name: "{{ recipe_name }}: Get the leader and follower uuids."
          include_role:
            name: common
            tasks_from: get_follower_stats

        - name: "{{ recipe_name }}: Starting controlplane_client to do rangeWrite with n as 5."
          vars:
            input_param:
              {
                "Operation": "write",
                "OutfileName": "DeleteSnapshot_Rangewrite_output",
                "NoofWrites": "5",
                "wait_for_outfile": True,
              }
            ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "Write key-value from ncpc."
          with_items:
            - "{{ ncpcliwr }}"
          register: writeres5keys
          no_log: true

        - name: "{{ recipe_name }}: Verify outfile status"
          debug:
            msg:
              - "Check write outfile status: {{ writeres5keys['results'][0]['item']['outfile_status'] }}"
          no_log: true
          failed_when: >
            (writeres5keys['results'][0]['item']['outfile_status'] != 0)

        - name: "{{ recipe_name }}: Verify write status"
          debug:
            msg: "Check write response status"
          no_log: true
          failed_when: >
            (item['Response']['Status'] != 0)
          loop: "{{ writeres5keys['results'][0]['item']['output_data'] }}"

        - name: "{{ recipe_name }}: Apply fault injection on leader and verify."
          include_role:
            name: common
            tasks_from: set_fault_injection_and_verify
          vars:
            ServerUUID: "{{ LeaderUUID['/0/leader-uuid'] }}"
            fault_injection_name: "pmdb_range_read_keep_snapshot"

        - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with existing keys."
          vars:
            input_param:
              {
                "Key": "*",
                "Operation": "read",
                "OutfileName": "DeleteSnapshot_RangeRead_output",
                "NoofWrites": "5",
                "seqNo": "",
                "wait_for_outfile": True,
              }
            ncpclird: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "Read key-value from ncpc."
          with_items:
            - "{{ ncpclird }}"
          register: readres5keys
          no_log: true

        - name: "{{ recipe_name }}: Verify outfile status and read status"
          debug:
            msg:
              - "Check read outfile status: {{ readres5keys['results'][0]['item']['outfile_status'] }}"
              - "Check read response status: {{ readres5keys['results'][0]['item']['output_data'][0]['Response']['Status'] }}"
          no_log: true
          failed_when:
            (readres5keys['results'][0]['item']['outfile_status'] != 0) or
            (readres5keys['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

        - name: "{{ recipe_name }}: Get the sequence no from the read result of the existing keys."
          vars:
            seq_no: "{{ readres5keys['results'][0]['item']['output_data'][0]['Response']['SeqNum'] }}"
          debug:
            msg: "Get the seq no"
          with_items:
            - "{{ seq_no }}"
          register: seqNo
          no_log: true

        - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
          vars:
            input_param:
              {
                "Key": "Key1",
                "Value": "Value1",
                "Operation": "write",
                "IP_addr": "",
                "Port": "",
                "OutfileName": "Rangewrite_output_afterRangeRead",
                "NoofWrites": "",
                "wait_for_outfile": True,
              }
            ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "Write key-value from ncpc."
          with_items:
            - "{{ ncpcliwr }}"
          register: writeres_overwrite
          no_log: true

        - name: "{{ recipe_name }}: Verify outfile status"
          debug:
            msg:
              - "Check write outfile status: {{ writeres_overwrite['results'][0]['item']['outfile_status'] }}"
          no_log: true
          failed_when: >
            (writeres_overwrite['results'][0]['item']['outfile_status'] != 0)

        - name: "{{ recipe_name }}: Check if write is successful."
          vars:
            wrstatus: "{{ writeres_overwrite['results'][0]['item']['output_data'][0]['Response']['Status'] }}"
          debug:
            msg: "Check if write is successful."
          failed_when: >
            (wrstatus|int != 0)

        - name: "{{ recipe_name }}: Pause for 60 so that shapshot gets deleted."
          pause:
            seconds: 60

        - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with seq no passed."
          vars:
            input_param:
              {
                "Key": "*",
                "Operation": "read",
                "OutfileName": "Deletesnapshot_RangeRead_specificSeqno_output",
                "NoofWrites": "5",
                "seqNo": '{{ seqNo["results"][0]["item"] }}',
                "wait_for_outfile": True,
              }
            ncpclird: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "Read key-value from ncpc."
          with_items:
            - "{{ ncpclird }}"
          register: specificSeqno_rangereadres
          no_log: true

        - name: "{{ recipe_name }}: Verify outfile status and read status"
          debug:
            msg:
              - "Check read outfile status: {{ specificSeqno_rangereadres['results'][0]['item']['outfile_status'] }}"
              - "Check read response status: {{ specificSeqno_rangereadres['results'][0]['item']['output_data'][0]['Response']['Status'] }}"
          no_log: true
          failed_when:
            (specificSeqno_rangereadres['results'][0]['item']['outfile_status'] != 0) or
            (specificSeqno_rangereadres['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

        - name: "{{ recipe_name }}: Validate that we should see updated seq no as snapshot is deleted."
          vars:
            seqNo_earlier: "{{ seqNo['results'][0]['item'] }}"
            seqNo_new: "{{ specificSeqno_rangereadres['results'][0]['item']['output_data'][0]['Response']['SeqNum'] }}"
          debug:
            msg: "compare earlier seqno with old seq no."
          failed_when: seqNo_earlier == seqNo_new

        - name: "{{ recipe_name }}: Remove previously applied fault injection."
          include_role:
            name: common
            tasks_from: remove_fault_injection_and_verify
          vars:
            ServerUUID: "{{ LeaderUUID['/0/leader-uuid'] }}"
            fault_injection_name: "pmdb_range_read_keep_snapshot"

      rescue:
        - name: "Recipe: {{ recipe_name }} failed"
          set_fact:
            terminate_recipe: true
