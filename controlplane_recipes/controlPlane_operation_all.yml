- name: "controlPlane_operation_all.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "controlPlane_operation_all"
    parent: None

  tasks:
    - block:
        # check for the app_type
        - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
          vars:
            app_type: "{{ app_type }}"
          debug:
            msg: "app_type is: {{ app_type }}"
          failed_when: (app_type != "controlplane")

        - name: "{{ recipe_name }}: Start pmdb and proxy servers."
          include_role:
            name: common
            tasks_from: pmdb_cluster_init.yml
          vars:
            number_of_clients: 2
            number_of_PMDBServers: 4

        - name: "{{ recipe_name }}: Starting controlplane_client to get membership details."
          vars:
            input_param:
              { "Operation": "membership", "OutfileName": "membership_output" }
            ncpclires: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "get membership details of running servers."
          with_items:
            - "{{ ncpclires }}"
          register: membership
          no_log: true

        - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
          vars:
            input_param:
              {
                "Key": "Country",
                "Value": "India",
                "Operation": "write",
                "IP_addr": "",
                "Port": "",
                "OutfileName": "write_output",
                "NoofWrites": "",
                "wait_for_outfile": True,
              }
            ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "Write key-value from ncpc."
          with_items:
            - "{{ ncpcliwr }}"
          register: writeres
          no_log: true

        - name: "{{ recipe_name }}: Verify outfile status"
          debug:
            msg:
              - "Check write outfile status: {{ writeres['results'][0]['item']['outfile_status'] }}"
          no_log: true
          failed_when: >
            (writeres['results'][0]['item']['outfile_status'] != 0)

        - name: "{{ recipe_name }}: Check if write is successful."
          vars:
            wrstatus: "{{ writeres['results'][0]['item']['output_data']['Response']['Status'] }}"
          debug:
            msg: "Check if write is successful."
          failed_when: >
            (wrstatus|int != 0)

        - name: "{{ recipe_name }}: Starting controlplane_client to read the value."
          vars:
            input_param:
              {
                "Key": "Country",
                "Operation": "read",
                "OutfileName": "read_output",
                "NoofWrites": "",
                "seqNo": "",
                "wait_for_outfile": True,
              }
            ncpclird: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "read key-value from ncpc."
          with_items:
            - "{{ ncpclird }}"
          register: readres
          no_log: true

        - name: "{{ recipe_name }}: Verify outfile status and read status"
          debug:
            msg:
              - "Check read outfile status: {{ readres['results'][0]['item']['outfile_status'] }}"
              - "Check read response status: {{readres['results'][0]['item']['output_data']['Response']['Status'] }}"
          no_log: true
          failed_when: (readres['results'][0]['item']['outfile_status'] != 0) or
            (readres['results'][0]['item']['output_data']['Response']['Status'] != 0)

        - name: "{{ recipe_name }}: compare values after sucessful write/read operation."
          vars:
            rdval: "{{ readres['results'][0]['item']['output_data']['Response'] }}"
          debug:
            msg: "Verifying parameter after read operation: {{rdval}}"
          failed_when: >
            (rdval['Status'] != 0) or
            ((rdval['ResultMap'][writeres['results'][0]['item']['output_data']['Request']['Key']] | b64decode) != (writeres['results'][0]['item']['output_data']['Request']['Value'] | b64decode))

        - name: "{{ recipe_name }}: Starting controlplane_client to get the config values."
          vars:
            input_param:
              { "Operation": "config", "OutfileName": "config_output" }
          debug:
            msg: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          no_log: true

        - name: "{{ recipe_name }}: Starting controlplane_client to get membership details."
          vars:
            input_param:
              {
                "Operation": "membership",
                "OutfileName": "pmdbServer_membership",
              }
            pmdbGossip: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "get membership details of running servers."
          with_items:
            - "{{ pmdbGossip }}"
          register: pmdbMembership
          no_log: true

        - name: "{{ recipe_name }}: get the list of non-running servers."
          include_role:
            name: common
            tasks_from: get_server_uuid_info

        - name: "{{ recipe_name }}: Verify gosssip details of 4 pmdb server."
          vars:
            verifyStatus: "{{ pmdbMembership['results'][0]['item']['membership']['output_data'][NRunningPeers[item]]['Status'] }}"
          debug:
            msg: "Verifying status of the pmdbs servers."
          failed_when: verifyStatus != "alive"
          loop: "{{ range(0, NRunningPeers | length) | list }}"

        - name: "{{ recipe_name }}: Get the serf nodes from recipe JSON."
          vars:
            node_item: "{{ 'Node_' ~ item }}"
          set_fact:
            nodeList: "{{ nodeList|default([]) + [node_item] }}"
          loop: "{{ ClientUUIDS }}"

        - debug:
            msg: "Node name list: {{ nodeList }}"

        - name: "{{ recipe_name }}: Get proxy server's status."
          vars:
            input_param:
              { "Operation": "membership", "OutfileName": "get_nodestatus" }
            getNodeData: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "Get node name"
          with_items:
            - "{{ getNodeData }}"
          register: nodeName
          no_log: true

        - name: "{{ recipe_name }}: Check if proxy node status is 'alive'."
          vars:
            verifyNodeStatus: "{{ nodeName['results'][0]['item']['membership']['output_data']['Response']['Status'] }}"
          debug:
            msg: "Verify proxy server's Status"
          failed_when: verifyNodeStatus != "alive"
          loop: "{{ range(0, nodeList | length) | list }}"

      rescue:
        - name: "Recipe: {{ recipe_name }} failed"
          set_fact:
            terminate_recipe: true
