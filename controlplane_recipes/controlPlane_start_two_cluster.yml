- name: "controlPlane_start_two_cluster.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "controlPlane_start_cluster"
    parent: None

  tasks:
    - block:
        # check for the app_type
        - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
          vars:
            app_type: "{{ app_type }}"
          debug:
            msg: "app_type is: {{ app_type }}"
          failed_when: (app_type != "controlplane")

        - set_fact:
            orig_cluster_param: "{{ ClusterParams }}"

        - name: "{{ recipe_name }}: Start pmdb and proxy servers."
          include_role:
            name: common
            tasks_from: pmdb_cluster_init.yml
          vars:
            number_of_clients: 2
            number_of_PMDBServers: 5

        - name: "{{ recipe_name }}: Starting controlplane_client to get membership details."
          vars:
            input_param:
              {
                "Operation": "membership",
                "OutfileName": "membership_output_firstCluster",
              }
            ncpclires: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "get membership details of running servers."
          with_items:
            - "{{ ncpclires }}"
          register: membership_firstCluster

        - name: "{{ recipe_name }}: get the list of running servers."
          include_role:
            name: common
            tasks_from: get_server_uuid_info

        - name: "{{ recipe_name }}: Get the raft uuid of the first cluster."
          vars:
            raft_uuid_first_cluster: "{{ membership_firstCluster['results'][0]['item']['membership']['output_data'][NRunningPeers[0]]['Tags']['RU'] }}"
          debug:
            msg: "raft uuid of the first cluster"
          with_items:
            - "{{ raft_uuid_first_cluster }}"
          register: raft_uuid_first

        - name: "{{ recipe_name }}: Check if raft_uuid is same for all the nodes in first cluster."
          vars:
            raft_uuid: "{{raft_uuid_first['results'][0]['item']}}"
            raftuuid_val_firstCluster: "{{ membership_firstCluster['results'][0]['item']['membership']['output_data'][NRunningPeers[item]]['Tags']['RU'] }}"
          debug:
            msg: "check that raft uuid is same for all the nodes running in first cluster"
          failed_when: raftuuid_val_firstCluster !=  raft_uuid
          loop: "{{ range(0, NRunningPeers | length) | list }}"

        - name: "{{ recipe_name }}: Get the raft values for all running peers"
          vars:
            stage: "stage0_get_all"
            raft_keys:
              - "/raft_root_entry/0/leader-uuid"
            peers_val: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys) }}"
          debug:
            msg: "Getting stats for all running peers"
          no_log: true
          with_items:
            - "{{ peers_val }}"
          register: stage0_peers_vals

        - name: "{{ recipe_name }}: Create new Raft UUID."
          shell: "/usr/bin/uuid"
          register: new_cluster_uuid

        - name: "Prepare the new cluster information."
          set_fact:
            ClusterParams:
              base_dir: "{{ dir_path }}"
              raft_uuid: "{{ new_cluster_uuid.stdout}}"
              ctype: "{{ backend_type }}"
              npeers: "{{ npeers }}"
              client_port: "{{ client_port | int + 100 }}"
              srv_port: "{{ srv_port | int + 100 }}"
              nclients: 2
              app_type: "controlplane"
              coal_wr: "{{ 0 }}"
              sync_mode: "{{ 0 }}"
              file_counter: 0
              prometheus_support: 0
              nthreads: "{{ nthreads | default(2) | int }}"

        - name: "{{ recipe_name }}: Prepare config for new cluster using same ports as already running cluster."
          set_fact:
            new_server_cluster: "{{ lookup('niova_raftconfig', 'server') }}"

        - name: "{{ recipe_name }}: Prepare config for the new client uuids."
          set_fact:
            new_client_cluster: "{{ lookup('niova_raftconfig', 'client') }}"

        - name: "{{ recipe_name }}: get the list of non-running servers."
          include_role:
            name: common
            tasks_from: server_uuid_info_for_new_cluster
          vars:
            base_dir_path: "{{ new_server_cluster['base_dir_path'] }}"
            RAFT_UUID: "{{ new_cluster_uuid.stdout}}"
            New_ClusterInfo: "{{ new_server_cluster }}"

        - name: "Prepare gossip node config and proxy.config file"
          set_fact: gossipCreation="{{lookup('niova_raftconfig', "{{ app_type }}", 0)}}"

        # Start PMDB servers.
        - name: "{{ recipe_name }}: Start pmdb servers in the cluster."
          include_role:
            name: common
            tasks_from: start_server_golang
          vars:
            ServerUUID: "{{ NonRunningPeers[item] }}"
            number_of_PMDBServers: 4
          loop: "{{ range(0, number_of_PMDBServers | int ) | list }}"

        - name: "{{ recipe_name }}: pause for 5 seconds."
          pause:
            seconds: 5

        # Start proxy servers
        - name: "{{ recipe_name }}: Start proxy servers."
          include_role:
            name: common
            tasks_from: start_proxy_server
          vars:
            ClientUUID: "{{ new_client_cluster[item] }}"
          loop: "{{ range(0, new_client_cluster | length) |list }}"

        - name: "{{ recipe_name }}: Pause for 5 seconds to start proxy servers properly."
          pause:
            seconds: 5

        - name: "{{ recipe_name }}: Starting controlplane_client to get membership details."
          vars:
            input_param:
              {
                "Operation": "membership",
                "OutfileName": "membership_output_secondCluster",
              }
            ncpclires: "{{ lookup('controlplane', 'ncpc', input_param) }}"
          debug:
            msg: "get membership details of running servers."
          with_items:
            - "{{ ncpclires }}"
          register: membership_secondCluster
          no_log: true

        - name: "{{ recipe_name }}: Check if raft_uuid is same for all the nodes in second cluster."
          vars:
            raftuuid_val_secondCluster: "{{ membership_secondCluster['results'][0]['item']['membership']['output_data'][NumRunningPeers[item]]['Tags']['RU'] }}"
          debug:
            msg: "check that raft uuid is same for all the nodes running in second cluster"
          failed_when: >
            (raftuuid_val_secondCluster != "{{ new_cluster_uuid.stdout}}" )
          loop: "{{ range(0, NumRunningPeers | length) | list }}"

        - name: "{{ recipe_name }}: Kill the pmdb servers from second cluster."
          debug:
            msg: "{{lookup('niova_raftprocess', 'kill', NonRunningPeers[item])}}"
          loop: "{{ range(0, NonRunningPeers | length) |list }}"
          no_log: True

        - name: "{{ recipe_name }}: Kill the proxy servers from second cluster."
          debug:
            msg: "{{lookup('niova_raftprocess', 'kill', new_client_cluster[item])}}"
          loop: "{{ range(0, new_client_cluster | length) |list }}"
          no_log: True

        - name: "{{ recipe_name }}: Revert back the origin cluster information."
          set_fact:
            ClusterParams: "{{ orig_cluster_param }}"

        - name: "{{ recipe_name }}: Get the updated list of running peers."
          include_role:
            name: common
            tasks_from: get_server_uuid_info

        - name: "{{ recipe_name }}: Verify 1st cluster leader-uuid is same as original leader-uuid"
          vars:
            stage: "verify_leader"
            initial_vals: "{{ stage0_peers_vals['results'][0]['item'] }}"
            raft_key:
              - "/raft_root_entry/0/leader-uuid"
            peers_val: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], raft_key) }}"
          debug:
            msg: "Validate leader-uuid"
          failed_when: >
            (peers_val["/0/leader-uuid"] != initial_vals["/0/leader-uuid"])
          loop: "{{ range(0, NRunningPeers|length) | list }}"

      rescue:
        - name: "Recipe: {{ recipe_name }} failed"
          set_fact:
            terminate_recipe: true
