- import_playbook: lease_basic_operations.yml

- name: "lease_validate_if_GC_thread_marks_lease_as_stale_only_of_TTL_gets_expired"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "lease_validate_if_GC_thread_marks_lease_as_stale_only_of_TTL_gets_expired"
    parent: "lease_basic_operations"
    no_of_leases: 5
  vars_files:
    - ../leaseStateValue.yml

  tasks:
  - block:

    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: "Get multiple client uuids."
      include_role:
        name: common
        tasks_from: get_multiple_client_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "Get multiple resource uuids."
      include_role:
        name: common
        tasks_from: get_multiple_resource_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'GET' operation for {{ no_of_leases }} client-uuids and resource-uuids."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_{{ item }}'
                 }
      set_fact:
        getLeaseOps: "{{ getLeaseOps|default([]) + [lookup('lease_feature', 'GET', input_param)] }}"
      failed_when: >
        (getLeaseOps[item]['outfile_status'] != 0) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Client'] != ClientUUIDS[item]) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Resource'] != resourceUUIDS[item]) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED)
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "Get multiple client uuids."
      include_role:
        name: common
        tasks_from: get_new_clientUUIDs
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "Get multiple resource uuids."
      include_role:
        name: common
        tasks_from: get_new_resourceUUIDs
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'GET' operation for {{ no_of_leases }} new client-uuids and new resource-uuids."
      vars:
         input_param: {
                'client': '{{ newClientUUIDS[item] }}',
                'resource': '{{ newResourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_{{ item }}'
                 }
      set_fact:
        getOps: "{{ getOps|default([]) + [lookup('lease_feature', 'GET', input_param)] }}"
      failed_when: >
        (getOps[item]['outfile_status'] != 0) or
        (getOps[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (getOps[item]['output_data'][0]['LeaseRes']['Client'] != newClientUUIDS[item]) or
        (getOps[item]['output_data'][0]['LeaseRes']['Resource'] != newResourceUUIDS[item]) or
        (getOps[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED)
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'LOOKUP' operation for {{ no_of_leases }} client-uuids and resource-uuids and validate that 2nd set of uuids should be valid."
      vars:
         input_param: {
                'client': '',
                'resource': '{{ newResourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_new_set{{ item }}'
                 }
      set_fact:
        lookupOps: "{{ lookupOps|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param)] }}"
      failed_when: >
        (lookupOps[item]['outfile_status'] != 0) or
        (lookupOps[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (lookupOps[item]['output_data'][0]['LeaseRes']['Client'] != newClientUUIDS[item]) or
        (lookupOps[item]['output_data'][0]['LeaseRes']['Resource'] != newResourceUUIDS[item]) or
        (lookupOps[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED) or
        (lookupOps[item]['output_data'][0]['LeaseRes']['TTL'] > 60)
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Wait untill leaseState of all leases of clientuuid of first set is expired."
      include_role:
        name: common
        tasks_from: wait_until_leaseState_change
      vars:
         resourceuuid: "{{ resourceUUIDS[item] }}"
         leaseState: "{{ EXPIRED }}"
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'LOOKUP' operation for {{ no_of_leases }} client-uuids and resource-uuids and validate that 1st set of uuids should be expired."
      vars:
         input_param: {
                'client': '',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_old_set{{ item }}'
                 }
      set_fact:
        lookupLease_old_set: "{{ lookupLease_old_set|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param)] }}"
      failed_when: >
        (lookupLease_old_set[item]['outfile_status'] != 0) or
        (lookupLease_old_set[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (lookupLease_old_set[item]['output_data'][0]['LeaseRes']['Client'] != ClientUUIDS[item]) or
        (lookupLease_old_set[item]['output_data'][0]['LeaseRes']['Resource'] != resourceUUIDS[item]) or
        (lookupLease_old_set[item]['output_data'][0]['LeaseRes']['LeaseState'] != EXPIRED)
      loop: "{{ range(0, no_of_leases) | list }}"

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
