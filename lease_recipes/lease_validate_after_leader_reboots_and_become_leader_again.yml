- import_playbook: lease_basic_operations.yml

- name: "lease_validate_after_leader_reboots_and_become_leader_again"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "lease_validate_after_leader_reboots_and_become_leader_again"
     parent: "lease_basic_operations"
     no_of_leases: 4
  vars_files:
    - ../leaseStateValue.yml

  tasks:
  - block:

    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'."
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "Get multiple client uuids."
      include_role:
        name: common
        tasks_from: get_multiple_client_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "Get multiple resource uuids."
      include_role:
        name: common
        tasks_from: get_multiple_resource_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform First 'GET' operation for {{ no_of_leases }} client-uuids and resource-uuids."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_{{ item }}'
                 }
      set_fact:
        getLeaseOps: "{{ getLeaseOps|default([]) + [lookup('lease_feature', 'GET', input_param)] }}"
      no_log: true
      failed_when: >
        (getLeaseOps[item]['outfile_status'] != 0) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Client'] != ClientUUIDS[item]) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Resource'] != resourceUUIDS[item]) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED)
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Store old leader-uuid"
      vars:
         old_leader: "{{ LeaderUUID['/0/leader-uuid'] }}"
      debug:
        msg: "Old Leader UUID"
      #no_log: true
      with_items:
         - "{{ old_leader }}"
      register: orig_leader

    - name: "{{ recipe_name }}: Kill the Old Leader."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'kill', orig_leader['results'][0]['item'], wantlist=True) }}"

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Again wait until new leader election happens."
      vars:
         stage: "wait_for_new_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid')| dict2items | map(attribute='value') | list | first != orig_leader['results'][0]['item']
      retries: 10
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Verify already taken leases gets updated with new leader."
      vars:
         input_param: {
                'client': '',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_after_new_leader_{{ item }}'
                 }
      set_fact:
        lookup_aftr_new_leader: "{{ lookup_aftr_new_leader|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param)] }}"
      no_log: true
      failed_when: >
        (lookup_aftr_new_leader[item]['outfile_status'] != 0) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Client'] != getLeaseOps[item]['output_data'][0]['LeaseRes']['Client']) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Resource'] != getLeaseOps[item]['output_data'][0]['LeaseRes']['Resource']) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTerm'] <= getLeaseOps[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTerm']) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTime'] >= getLeaseOps[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTime'])
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "Get multiple resource uuids."
      include_role:
        name: common
        tasks_from: create_multiple_client_and_resource_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform more 'GET' operation for {{ no_of_leases }} client-uuids and resource-uuids."
      vars:
         input_param: {
                'client': '{{ Client[item] }}',
                'resource': '{{ Resource[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_with_new_resource{{ item }}'
                 }
      set_fact:
        write_new_getLease: "{{ write_new_getLease|default([]) + [lookup('lease_feature', 'GET', input_param)] }}"
      no_log: true
      failed_when: >
        (write_new_getLease[item]['outfile_status'] != 0) or
        (write_new_getLease[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (write_new_getLease[item]['output_data'][0]['LeaseRes']['Client'] != Client[item]) or
        (write_new_getLease[item]['output_data'][0]['LeaseRes']['Resource'] != Resource[item]) or
        (write_new_getLease[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED)
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Restart the Old Leader."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'start', orig_leader['results'][0]['item'], wantlist=True) }}"

    - name: "Wait for Old Leader to bootup completely"
      debug:
        msg: "Wait till bootup completes for Peer {{ orig_leader['results'][0]['item'] }}."
      vars:
        stage: "bootup_old_leader"
      until: (lookup('niova_ctlrequest', 'lookup', orig_leader['results'][0]['item'], '/raft_root_entry')| dict2items | map(attribute='value') | list | first != "null") and (lookup('niova_ctlrequest', 'lookup', orig_leader['results'][0]['item'], '/raft_root_entry/0/state')| dict2items | map(attribute='value') | list | first != "booting")
      retries: 60
      delay: 1

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Disable message receive on all peers for leader overthrow"
      vars:
         stage: "stage1_rcv_false"
         cmd: "net_recv_enabled@false"
         where: "/ctl_svc_nodes/net_recv_enabled@true"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Lets sleep for sometime before checking the values"
      wait_for:
        timeout: 5

    - name: "{{ recipe_name }}: Store old leader-uuid for leader-to-be again"
      set_fact:
        OLD_LEADER: "{{ orig_leader['results'][0]['item'] }}"

    - name: "{{ recipe_name }}: Enable receive on all peers from the leader-to-be."
      vars:
         stage: "stage2_set_leader"
         cmd: "net_recv_enabled@true"
         where: "/ctl_svc_nodes/uuid@{{ OLD_LEADER }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where) }}"
      no_log: true

    - pause: seconds=3

    - name: "{{ recipe_name }}: Enable message receive on peer which is leader-to-be"
      vars:
         stage: "stage3_rcv_true"
         cmd: "net_recv_enabled@true"
         where: "/ctl_svc_nodes/net_recv_enabled@false"
      debug:
       msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', OLD_LEADER, cmd, where) }}"
      no_log: true

    - name: "{{ recipe_name }}: Verify new leader is elected successfully"
      vars:
         stage: "get_all_for_new_leader"
      debug:
        msg:
         - "Waiting for new leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid') | dict2items | map(attribute='value') | list | first == OLD_LEADER
      retries: 10
      delay: 2
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Perform and Verify 'LOOKUP' for second time written leases."
      vars:
         input_param: {
                'client': '',
                'resource': '{{ Resource[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_after_leader_to_be_{{ item }}'
                 }
      set_fact:
        lookup_with_old_leader: "{{ lookup_with_old_leader|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param)] }}"
      no_log: true
      failed_when: >
        (lookup_with_old_leader[item]['outfile_status'] != 0) or
        (lookup_with_old_leader[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (lookup_with_old_leader[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED) or
        (lookup_with_old_leader[item]['output_data'][0]['LeaseRes']['Client'] != write_new_getLease[item]['output_data'][0]['LeaseRes']['Client']) or
        (lookup_with_old_leader[item]['output_data'][0]['LeaseRes']['Resource'] != write_new_getLease[item]['output_data'][0]['LeaseRes']['Resource']) or
        (lookup_with_old_leader[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTerm'] <= write_new_getLease[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTerm']) or
        (lookup_with_old_leader[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTime'] >= write_new_getLease[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTime'])
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform and Verify 'LOOKUP' for firstly written leases."
      vars:
         input_param: {
                'client': '',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_for_old_get_lease{{ item }}'
                 }
      set_fact:
        lookup_aftr_old_leader: "{{ lookup_aftr_old_leader|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param)] }}"
      no_log: true
      failed_when: >
        (lookup_aftr_old_leader[item]['outfile_status'] != 0) or
        (lookup_aftr_old_leader[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (lookup_aftr_old_leader[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED) or
        (lookup_aftr_old_leader[item]['output_data'][0]['LeaseRes']['Client'] != getLeaseOps[item]['output_data'][0]['LeaseRes']['Client']) or
        (lookup_aftr_old_leader[item]['output_data'][0]['LeaseRes']['Resource'] != getLeaseOps[item]['output_data'][0]['LeaseRes']['Resource']) or
        (lookup_aftr_old_leader[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTerm'] != lookup_with_old_leader[item]['output_data'][0]['LeaseRes']['TimeStamp']['LeaderTerm'])
      loop: "{{ range(0, no_of_leases) | list }}"

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
