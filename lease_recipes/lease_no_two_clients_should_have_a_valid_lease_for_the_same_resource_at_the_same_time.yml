- name: "lease_no_two_clients_should_have_a_valid_lease_for_the_same_resource_at_the_same_time"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "lease_no_two_clients_should_have_a_valid_lease_for_the_same_resource_at_the_same_time.yml"
  vars_files:
    - ../leaseStateValue.yml

  tasks:
  - block:

    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: "{{ recipe_name }}: Get the non-running peers list to select first peer to start"
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "Start 5 peers in the cluster"
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ NonRunningServers[item] }}"
      loop: "{{ range(0, NonRunningServers | length) | list }}"

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: Generate new resource
      shell: "/usr/bin/uuid"
      register: resourceUUID

    - name: Generate new client
      shell: "/usr/bin/uuid"
      register: clientUUID

    - name: "{{ recipe_name }}: Perform 'GET' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'GET', input_param, wantlist=True) }}"
      debug:
         msg: "GET operation"
      with_items:
          - "{{ leaseApp }}"
      register: getLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check outfile status: {{ getLease['results'][0]['item']['outfile_status'] }}"
      no_log: true
      failed_when: >
         (getLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if 'GET' is successful."
      vars:
         wr_response: "{{ getLease['results'][0]['item']['output_data'][0]['LeaseRes'] }}"
      debug:
         msg: "Check if GET is successful"
      failed_when: >
         (wr_response['Status'] != 0) or
         (wr_response['Client'] != clientUUID.stdout|string) or
         (wr_response['Resource'] != resourceUUID.stdout|string) or
         (wr_response['TTL'] <= 0) or
         (wr_response['LeaseState'] != GRANTED)

    - name: "{{ recipe_name }}: verify_all_peers_after_becoming_leader_has_valid_lease"
      include_role:
        name: common
        tasks_from: verify_new_leader_has_valid_lease
      loop: "{{ range(0, NRunningPeers | length) | list }}"

