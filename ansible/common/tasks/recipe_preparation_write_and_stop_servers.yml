---
   - name: "{{ recipe_name }}: Generate Client UUID."
     shell: "/usr/bin/uuid"
     register: client_uuid

   - name: "{{ recipe_name }}: Generate App UUID."
     shell: "/usr/bin/uuid"
     register: app_uuid

   - name: "{{ recipe_name }}: Set client_uuid, app_uuid and rncui to use across recipes."
     set_fact:
        client_uuid: "{{ client_uuid.stdout }}"
        app_uuid: "{{ app_uuid.stdout }}"
        rncui: "{{ app_uuid.stdout }}:0:0:0:0"

   #Recipe Preparation.
   - name: "{{ recipe_name }}: Get raft_root_entry values of all peers before reboot."
     vars:
       raft_root_entry_all: []
       stage: "recipe_preparation"
     set_fact:
        raft_root_entry_all: "{{ raft_root_entry_all + [lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], peer_raft_keys, wantlist=True)] }}"
     loop: "{{ range(0, nrunning_peers | length) | list }}"

   - name: "{{ recipe_name }}: Compare raft_root_entry values of all peers."
     debug:
       msg: "Compare raft_root_entry values of all peers."
     failed_when: >
          (raft_root_entry_all[item]['/0/term'] != raft_root_entry_all[item+1]['/0/term']) or
          (raft_root_entry_all[item]['/0/commit-idx'] != raft_root_entry_all[item+1]['/0/commit-idx']) or
          (raft_root_entry_all[item]['/0/last-applied'] !=  raft_root_entry_all[item+1]['/0/last-applied']) or
          (raft_root_entry_all[item]['/0/last-applied-cumulative-crc'] != raft_root_entry_all[item+1]['/0/last-applied-cumulative-crc']) or
          (raft_root_entry_all[item]['/0/newest-entry-idx'] != raft_root_entry_all[item+1]['/0/newest-entry-idx']) or
          (raft_root_entry_all[item]['/0/newest-entry-term'] != raft_root_entry_all[item+1]['/0/newest-entry-term']) or
          (raft_root_entry_all[item]['/0/newest-entry-data-size'] != raft_root_entry_all[item+1]['/0/newest-entry-data-size']) or
          (raft_root_entry_all[item]['/0/newest-entry-crc'] != raft_root_entry_all[item+1]['/0/newest-entry-crc'])
     loop: "{{ range(0, nrunning_peers | length-1) | list }}"
   
   #Determine leader before reboot.
   - name: "{{ recipe_name }}: Get leader_uuid before reboot."
     vars:
       stage: "before_reboot_leader"
       raft_keys:
          - "/raft_root_entry/0/leader-uuid"
     set_fact:
        raft_values: "{{ lookup('niova_ctlrequest', 'lookup', nrunning_peers[0], raft_keys, wantlist=True) }}"

   - name: "{{ recipe_name }}: Get follower's uuids."
     set_fact:
        leader_uuid_before: "{{ raft_values['/0/leader-uuid'] }}" 
        follower_uuids: "{{ nrunning_peers | difference(raft_values['/0/leader-uuid']) }}"

   - name: "{{ recipe_name }}: Get newest-entry-idx values for all followers before write."
     vars:
       newest_entry_idx_followers_before_write: []
       stage: "before_write_followers"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
     set_fact:
        newest_entry_idx_followers_before_write: "{{ newest_entry_idx_followers_before_write + [lookup('niova_ctlrequest', 'lookup', follower_uuids[item], raft_keys, wantlist=True)] }}"
     loop: "{{ range(0, follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Get newest-entry-idx value for leader before write."
     vars:
       stage: "before_write_leader"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
     set_fact:
        newest_entry_idx_leader_before_write: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid_before, raft_keys, wantlist=True) }}"

   #Set raft_follower_ignores_non_hb_AE_request on the followers.
   - name: "{{ recipe_name }}: Set fault injection on all followers and verify through common task."
     include_role:
       name: common
       tasks_from: set_fault_injection_on_all_followers_and_verify
     loop: "{{ range(0, follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Start client process."
     include_role:
       name: common
       tasks_from: start_client
     vars:
       ClientUUID: "{{ client_uuid }}"

   - name: "{{ recipe_name }}: Decrease client request timeout to 1 sec."
     vars:
       stage: "decrease_client_timeout"
       cmd: "default-request-timeout-sec@1"
       where: "/raft_client_root_entry/default-request-timeout-sec"
     set_fact:
        decrease_client_timeout: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"

   - name: "{{ recipe_name }}: Perform write on the client."
     vars:
       stage: "write"
       cmd: "input@{{ app_uuid }}:0:0:0:0.write:0"
       where: "/pumice_db_test_client/input"
     set_fact:
        write: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"

   - name: "{{ recipe_name }}: Get newest-entry-idx values for all followers after write."
     vars:
       newest_entry_idx_followers_after_write: []
       stage: "after_write_followers"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
     set_fact:
        newest_entry_idx_followers_after_write: "{{ newest_entry_idx_followers_after_write + [lookup('niova_ctlrequest', 'lookup', follower_uuids[item], raft_keys, wantlist=True)] }}"
     loop: "{{ range(0, follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Get newest-entry-idx value for leader after write."
     vars:
       stage: "after_write_leader"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
     set_fact:
        newest_entry_idx_leader_after_write: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid_before, raft_keys, wantlist=True) }}"

   #2a- Verification for newest-entry-idx.
   - name: "{{ recipe_name }}: Verify that newest-entry-idx of all followers remains same."
     debug:
       msg: "Verifying that newest-entry-idx of all followers is not advanced"
     failed_when: newest_entry_idx_followers_before_write[item]["/0/newest-entry-idx"] != newest_entry_idx_followers_after_write[item]["/0/newest-entry-idx"]
     loop: "{{ range(0, follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Verify that newest-entry-idx of leader is advanced by 1."
     debug:
       msg: "Verifying that newest-entry-idx of leader is advanced by 1"
     when: (newest_entry_idx_leader_after_write["/0/newest-entry-idx"] - newest_entry_idx_leader_before_write["/0/newest-entry-idx"]) == 1

   - name: "{{ recipe_name }}: Get commit-idx of all running peers after write and validate that commit-idx has not advanced on any peer."
     vars:
       get_commit_idx_all_after_write: []
       stage: "get_commit_idx_all_after_write"
       raft_keys:
           - "/raft_root_entry/0/commit-idx"
     set_fact:
        get_commit_idx_all_after_write: "{{ get_commit_idx_all_after_write + [lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], raft_keys, wantlist=True)] }}"
     failed_when:  get_commit_idx_all_after_write[item]['/0/commit-idx'] > raft_root_entry_all[item]['/0/commit-idx']
     loop: "{{ range(0, nrunning_peers | length) | list }}"

   #Get commit-idx of leader before leader election.
   - name: "{{ recipe_name }}: Get commit-idx of previous leader before leader election."
     vars:
       stage: "get_leader_commit_idx_before_leader_election"
       raft_keys:
           - "/raft_root_entry/0/commit-idx"
     set_fact:
        leader_values_before_election: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid_before, raft_keys, wantlist=True) }}"

   #3- Stop the processes, first all followers and then leader.
   - name: "{{ recipe_name }}: Stop all follower processes."
     set_fact:
        stop_peers: "{{ lookup('niova_raftprocess', 'kill', follower_uuids[item], wantlist=True) }}"
     loop: "{{ range(0, follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Stop leader process."
     set_fact:
        stop_leader: "{{ lookup('niova_raftprocess', 'kill', leader_uuid_before, wantlist=True) }}"
