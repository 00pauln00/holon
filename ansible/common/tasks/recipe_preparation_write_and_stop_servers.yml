---
   - name: "{{ recipe_name }}: Generate Client UUID."
     shell: "/usr/bin/uuid"
     register: client_uuid

   - name: "{{ recipe_name }}: Generate App UUID."
     shell: "/usr/bin/uuid"
     register: app_uuid

   #Recipe Preparation.
   - name: "{{ recipe_name }}: Get raft_root_entry values of all peers before reboot."
     vars:
       stage: "get_clstate_befo"
       raft_root_entry: "{{ lookup('niova_ctlrequest', 'lookup', nrunning_peers, peer_raft_keys, wantlist=True) }}"
     debug:
        msg: "Getting raft_root_entry for all servers."
     no_log: true
     with_items:
        - "{{ raft_root_entry }}"
     register: raft_root_entry_all

   - name: "{{ recipe_name }}: Compare raft_root_entry values of all peers."
     vars:
       term: "{{ raft_root_entry_all['results'][item]['item']['/0/term'] }}"
       term_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/term'] }}"
       commit_idx: "{{ raft_root_entry_all['results'][item]['item']['/0/commit-idx'] }}"
       commit_idx_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/commit-idx'] }}"
       last_applied: "{{ raft_root_entry_all['results'][item]['item']['/0/last-applied'] }}"
       last_applied_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/last-applied'] }}"
       last_applied_cum_crc: "{{ raft_root_entry_all['results'][item]['item']['/0/last-applied-cumulative-crc'] }}"
       last_applied_cum_crc_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/last-applied-cumulative-crc'] }}"
       newest_entry_idx: "{{ raft_root_entry_all['results'][item]['item']['/0/newest-entry-idx'] }}"
       newest_entry_idx_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/newest-entry-idx'] }}"
       newest_entry_term: "{{ raft_root_entry_all['results'][item]['item']['/0/newest-entry-term'] }}"
       newest_entry_term_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/newest-entry-term'] }}"
       newest_entry_data_size: "{{ raft_root_entry_all['results'][item]['item']['/0/newest-entry-data-size'] }}"
       newest_entry_data_size_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/newest-entry-data-size'] }}"
       newest_entry_crc: "{{ raft_root_entry_all['results'][item]['item']['/0/newest-entry-crc'] }}"
       newest_entry_crc_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/newest-entry-crc'] }}"
     debug:
       msg: "Compare raft_root_entry values of all peers."
     no_log: true
     failed_when: >
          (term != term_next) or
          (commit_idx != commit_idx_next) or
          (last_applied != last_applied_next) or
          (last_applied_cum_crc != last_applied_cum_crc_next) or
          (newest_entry_idx != newest_entry_idx_next) or
          (newest_entry_term != newest_entry_term_next) or
          (newest_entry_data_size != newest_entry_data_size_next) or
          (newest_entry_crc != newest_entry_crc_next)
     loop: "{{ range(0, nrunning_peers | length-1) | list }}"

   #Determine leader before reboot.
   - name: "{{ recipe_name }}: Get leader_uuid before reboot."
     vars:
       stage: "before_reboot_leader"
       raft_keys:
          - "/raft_root_entry/0/leader-uuid"
     set_fact:
        rb_during_start_raft_values: "{{ lookup('niova_ctlrequest', 'lookup', nrunning_peers[0], raft_keys, wantlist=True) }}"

   - name: "{{ recipe_name }}: Get newest-entry-idx values for all followers before write."
     vars:
       follower_uuids: "{{ nrunning_peers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
       stage: "before_write_followers"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
     set_fact:
        rb_during_start_new_entry_idx_followers_before_write: "{{ lookup('niova_ctlrequest', 'lookup', follower_uuids, raft_keys, wantlist=True) }}"

   - name: "{{ recipe_name }}: Get newest-entry-idx value for leader before write."
     vars:
       leader_uuid_before: "{{ rb_during_start_raft_values['/0/leader-uuid'] }}"
       stage: "before_write_leader"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
     set_fact:
        rb_during_start_new_entry_idx_leader_before_write: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid_before, raft_keys, wantlist=True) }}"

   #Set raft_follower_ignores_non_hb_AE_request on the followers.
   - name: "{{ recipe_name }}: Set fault injection on all followers and verify through common task."
     include_role:
       name: common
       tasks_from: set_fault_injection_on_all_followers_and_verify
     vars:
       follower_uuids: "{{ nrunning_peers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
       ServerUUID: "{{ follower_uuids[item] }}"
     loop: "{{ range(0, follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Start client process."
     include_role:
       name: common
       tasks_from: start_client
     vars:
       ClientUUID: "{{ client_uuid.stdout }}"

   - name: "{{ recipe_name }}: Decrease client request timeout to 1 sec."
     vars:
       stage: "decrease_client_timeout"
       cmd: "default-request-timeout-sec@1"
       where: "/raft_client_root_entry/default-request-timeout-sec"
     debug:
       msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"
     no_log: true

   - name: "{{ recipe_name }}: Perform write on the client."
     vars:
       stage: "write"
       cmd: "input@{{ app_uuid.stdout }}:0:0:0:0.write:0"
       where: "/pumice_db_test_client/input"
     debug:
       msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"
     no_log: true

   - name: "{{ recipe_name }}: Get newest-entry-idx values for all followers after write."
     vars:
       follower_uuids: "{{ nrunning_peers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
       stage: "after_write_followers"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
     set_fact:
        rb_during_start_new_entry_idx_followers_after_write: "{{ lookup('niova_ctlrequest', 'lookup', follower_uuids, raft_keys, wantlist=True) }}"

   - name: "{{ recipe_name }}: Get newest-entry-idx value for leader after write."
     vars:
       leader_uuid_before: "{{ rb_during_start_raft_values['/0/leader-uuid'] }}"
       stage: "after_write_leader"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
     set_fact:
        rb_during_start_new_entry_idx_leader_after_write: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid_before, raft_keys, wantlist=True) }}"

   #2a- Verification for newest-entry-idx.
   - name: "{{ recipe_name }}: Verify that newest-entry-idx of all followers remains same."
     vars:
       newest_entry_idx_before: "{{ rb_during_start_new_entry_idx_followers_before_write[item]['/0/newest-entry-idx'] }}"
       newest_entry_idx_after: "{{ rb_during_start_new_entry_idx_followers_after_write[item]['/0/newest-entry-idx'] }}"
       follower_uuids: "{{ nrunning_peers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
     debug:
       msg: "Verifying that newest-entry-idx of all followers is not advanced"
     no_log: true
     failed_when: newest_entry_idx_before != newest_entry_idx_after
     loop: "{{ range(0, follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Verify that newest-entry-idx of leader is advanced by 1."
     debug:
       msg: "Verifying that newest-entry-idx of leader is advanced by 1"
     when: (rb_during_start_new_entry_idx_leader_after_write['/0/newest-entry-idx'] - rb_during_start_new_entry_idx_leader_before_write['/0/newest-entry-idx']) == 1
     no_log: true

   - name: "{{ recipe_name }}: Get commit-idx of all running peers after write."
     vars:
       stage: "get_commit_idx_all_after_write"
       raft_keys:
           - "/raft_root_entry/0/commit-idx"
     set_fact:
        rb_during_start_get_commit_idx_all_after_write: "{{ lookup('niova_ctlrequest', 'lookup', nrunning_peers, raft_keys, wantlist=True) }}"

   - name: "{{ recipe_name }}: Validate that commit-idx has not advanced on any peer."
     vars:
       commit_idx_before: "{{ raft_root_entry_all['results'][item]['item']['/0/commit-idx'] }}"
       commit_idx_after: "{{ rb_during_start_get_commit_idx_all_after_write[item]['/0/commit-idx'] }}"
     debug:
       msg: "Validating that commit-idx has not advanced on any peer."
     no_log: true
     failed_when: commit_idx_after > commit_idx_after
     loop: "{{ range(0, nrunning_peers | length) | list }}"

   #Get commit-idx of leader before leader election.
   - name: "{{ recipe_name }}: Get commit-idx of previous leader before leader election."
     vars:
       leader_uuid_before: "{{ rb_during_start_raft_values['/0/leader-uuid'] }}"
       stage: "get_leader_commit_idx_before_leader_election"
       raft_keys:
           - "/raft_root_entry/0/commit-idx"
     set_fact:
        rb_during_start_leader_values_before_election: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid_before, raft_keys, wantlist=True) }}"

   #3- Stop the processes, first all followers and then leader.
   - name: "{{ recipe_name }}: Stop all follower processes."
     vars:
       follower_uuids: "{{ nrunning_peers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
       ServerUUID: "{{ follower_uuids[item] }}"
     debug:
       msg: "{{ lookup('niova_raftprocess', 'kill', ServerUUID, wantlist=True) }}"
     no_log: true
     loop: "{{ range(0, follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Stop leader process."
     vars:
       leader_uuid_before: "{{ rb_during_start_raft_values['/0/leader-uuid'] }}"
     debug:
       msg: "{{ lookup('niova_raftprocess', 'kill', leader_uuid_before, wantlist=True) }}"
     no_log: true
