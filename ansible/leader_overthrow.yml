- import_playbook: basic_leader_election.yml
- name: "leader_overthrow"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "leader_overthrow"
     parent: "basic_leader_election"
     follower_idx: []
     follower_uuid: []

  tasks:
    - name: "Get the json path"
      set_fact:
        base_dir="{{ raft_conf | json_query('base_dir_path')}}"
        raft_uuid="{{ raft_conf | json_query('raft_uuid')}}"
    
    - name: "prepare path to read recipe JSON file"
      shell: cat "{{base_dir}}"/"{{raft_uuid}}".json
      register: result
     
    - name: "Convert output to JSON format"
      set_fact:
        jsondata: "{{ result.stdout | from_json }}"
       
    - name: "Get the running peer id(s) from recipe JSON"
      set_fact:
        npeers: "{{ jsondata | json_query(jmesquery) }}"
      vars:
        jmesquery: 'raft_process.*.process_idx'

    - name: "Total number of running peers"
      set_fact:
        npeers_started: "{{ npeers|length }}"

    - name: "Get the raft values for all running peers"
      vars:
         stage: "stage0_get_all"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/commit-idx"
            - "/raft_root_entry/0/newest-entry-idx"
            - "/raft_root_entry/0/newest-entry-term"
            - "/raft_root_entry/0/newest-entry-crc"
            - "/raft_root_entry/0/newest-entry-data-size"
            - "/raft_root_entry/0/state"
            - "/raft_root_entry/0/last-applied"
            - "/raft_root_entry/0/last-applied-cumulative-crc"
            - "/raft_root_entry/0/peer-uuid"
      set_fact:
          stage0_values="{{lookup('niova_ctlrequest', 'lookup', item, raft_keys, wantlist=True)}}"   
      with_sequence: start=0 end={{ npeers_started|int -1 }}
      loop_control:
          pause: 2
           
    - name: "Get the list of peers in the cluster"
      set_fact:
        peer_arr="{{ raft_conf | json_query('peer_uuid_dict')}}"    

    - name: "Get peer index for the leader"
      set_fact:
        leader_idx: "{{ item.key }}"
      when: stage0_values["/0/leader-uuid"] == item.value
      with_dict: "{{ peer_arr }}"

    - name: "Get peer indexes and corresponding UUIDs for follower peers"
      set_fact:
         follower_idx: "{{ follower_idx + [item.key] }}"
         follower_uuid: "{{ follower_uuid + [item.value] }}"
      when: stage0_values["/0/leader-uuid"] != item.value
      with_dict: "{{ peer_arr }}"

    - name: "Disable message receive on all peers for leader overthrow"
      vars:
         stage: "stage1_rcv_false"
      set_fact: recv_false="{{lookup('niova_ctlrequest', 'apply_cmd', item, 'rcv_false', False, wantlist=True)}}"
      with_sequence: start=0 end={{ npeers_started|int -1 }}
      loop_control:
          pause: 2

    - name: "Verify that message received is disabled successfully on all peers"
      vars:
         stage: "stage1_get_all"
         raft_keys:
             - "/ctl_svc_nodes/*/net_recv_enabled"
             - "/raft_root_entry/0/leader-uuid"
             - "/raft_root_entry/0/state"
             - "/raft_root_entry/0/client-requests"
             - "/raft_root_entry/0/term"
      set_fact:
          net_rcv="{{lookup('niova_ctlrequest', 'lookup', item, raft_keys, wantlist=True)}}"
      failed_when: >
           (net_rcv["/*/net_recv_enabled"] != False) or
           (net_rcv["/0/leader-uuid"] != stage0_values["/0/leader-uuid"]) or
           ((net_rcv["/0/state"] != "leader") and
           (net_rcv["/0/state"] != "candidate")) or
           ((net_rcv["/0/client-requests"] != "deny-may-be-deposed") and
           (net_rcv["/0/client-requests"] != "deny-leader-not-established")) or
           ((net_rcv["/0/term"] != stage0_values["/0/term"]) and
           (net_rcv["/0/term"] <= stage0_values["/0/term"]))
      with_sequence: start=0 end={{ npeers_started|int -1 }}
      loop_control:
          pause: 2

    - name: "Now enable message receive from leader-to-be on all peers"
      vars:
         stage: "stage2_set_leader"
      set_fact: set_leader_id="{{lookup('niova_ctlrequest', 'set_leader', item, follower_uuid[0], wantlist=True)}}"
      with_sequence: start=0 end={{ npeers_started|int -1 }}
      loop_control:
          pause: 2
    
    - name: "Verify that message received is enabled for the leader-to-be"
      vars:
         stage: "stage2_set_leader"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/commit-idx"
            - "/raft_root_entry/0/last-applied"
            - "/raft_root_entry/0/last-applied-cumulative-crc"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/newest-entry-term"
            - "/raft_root_entry/0/newest-entry-crc"
            - "/raft_root_entry/0/newest-entry-data-size"
            - "/raft_root_entry/0/newest-entry-idx"
            - "/raft_root_entry/0/state"
            - "/raft_root_entry/0/client-requests"
            - "/raft_root_entry/0/voted-for-uuid"
            - "/raft_root_entry/0/peer-uuid"
      set_fact:
          set_leader="{{lookup('niova_ctlrequest', 'lookup', item, raft_keys, wantlist=True)}}"
      failed_when: >
        (set_leader["/0/leader-uuid"] != stage0_values["/0/leader-uuid"]) or
        (set_leader["/0/commit-idx"] != stage0_values["/0/commit-idx"]) or
        (set_leader["/0/last-applied"] != stage0_values["/0/last-applied"]) or
        (set_leader["/0/last-applied-cumulative-crc"] != stage0_values["/0/last-applied-cumulative-crc"]) or
        (set_leader["/0/term"] <= stage0_values["/0/term"]) or
        (set_leader["/0/newest-entry-term"] != stage0_values["/0/newest-entry-term"]) or
        (set_leader["/0/newest-entry-crc"] != stage0_values["/0/newest-entry-crc"]) or
        (set_leader["/0/newest-entry-data-size"] != stage0_values["/0/newest-entry-data-size"]) or
        (set_leader["/0/newest-entry-idx"] != stage0_values["/0/newest-entry-idx"]) or
        (set_leader["/0/state"] != "candidate") or
        (set_leader["/0/client-requests"] != "deny-leader-not-established") or
        (set_leader["/0/voted-for-uuid"] != set_leader["/0/peer-uuid"]) 
      with_sequence: start=0 end={{ npeers_started|int -1 }}
      loop_control:
          pause: 2
      
    - name: "Enable message receive from all peer to the leader-to-be"
      vars:
         stage: "stage3_rcv_true"
         peer_id: "{{ set_leader_id }}"
      set_fact: recv_true="{{lookup('niova_ctlrequest', 'apply_cmd', follower_idx[0], 'rcv_true', False, wantlist=True)}}"

    - name: "Verify new leader is elected successfully"
      vars:
         stage: "stage4_get_all"
         raft_key:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/voted-for-uuid"
      set_fact:
          new_leader_election="{{lookup('niova_ctlrequest', 'lookup', follower_idx[0], raft_key, wantlist=True)}}"
      until: new_leader_election["/0/leader-uuid"] == new_leader_election["/0/voted-for-uuid"]
      retries: 10
      delay: 2
      ignore_errors: yes
      loop: "{{ range(0, 5) | list}}"
      loop_control:
          pause: 2
