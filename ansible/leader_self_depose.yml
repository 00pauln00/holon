- import_playbook: basic_leader_election.yml
- name: "leader_self_depose"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "leader_overthrow"
     parent: "basic_leader_election"
     follower_idx: []
     follower_uuid: []
     leader_info: []
     case1: False
     case2: False
     case3: False
     case1_iteration: -1
     case2_iteration: -1
     case3_iteration: -1


  tasks:
    - name: "Get the json path"
      set_fact:
        base_dir="{{ raft_conf | json_query('base_dir_path')}}"
        raft_uuid="{{ raft_conf | json_query('raft_uuid')}}"

    - name: "prepare path to read recipe JSON file"
      shell: cat "{{base_dir}}"/"{{raft_uuid}}".json
      register: result

    - name: "Convert output to JSON format"
      set_fact:
        jsondata: "{{ result.stdout | from_json }}"
 
    - name: "Get the running peer id(s) from recipe JSON"
      set_fact:
        npeers: "{{ jsondata | json_query(jmesquery) }}"
      vars:
        jmesquery: 'raft_process.*.process_idx'

    - name: "Total number of running peers"
      set_fact:
        npeers_started: "{{ npeers|length }}"

    - name: "Get the raft key values from all running peers"
      vars:
         stage: "stage0_get_all"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/commit-idx"
            - "/raft_root_entry/0/newest-entry-idx"
            - "/raft_root_entry/0/newest-entry-term"
            - "/raft_root_entry/0/newest-entry-crc"
            - "/raft_root_entry/0/newest-entry-data-size"
            - "/raft_root_entry/0/state"
            - "/raft_root_entry/0/last-applied"
            - "/raft_root_entry/0/last-applied-cumulative-crc"
            - "/raft_root_entry/0/peer-uuid"
      set_fact:
          stage0_values="{{lookup('niova_ctlrequest', 'lookup', item, raft_keys, wantlist=True)}}"   
      loop: "{{ range(0, 3) | list}}"  
      loop_control:
          pause: 2

    - name: "Get the peer list in the raft cluster"
      set_fact:
        peer_arr="{{ raft_conf | json_query('peer_uuid_dict')}}"
        total_peers="{{ raft_conf | json_query('nservers')}}"

    - name: "Get the peer index for the leader"
      set_fact:
        leader_idx: "{{ item.key }}"
      when: stage0_values["/0/leader-uuid"] == item.value
      with_dict: "{{ peer_arr }}"    

    - name: "Get peer indexes and UUIs for the followers"
      set_fact:
         follower_idx: "{{ follower_idx + [item.key] }}"
         follower_uuid: "{{ follower_uuid + [item.value] }}"
      when: stage0_values["/0/leader-uuid"] != item.value
      with_dict: "{{ peer_arr }}"

    - name: "Get the follower information from leader peer"
      vars:
        stage: "get_follower"
        raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/follower-stats"
            - "/raft_root_entry/*/client-requests"
      set_fact:
          follower_before_pause="{{lookup('niova_ctlrequest', 'lookup', leader_idx, raft_keys, wantlist=True)}}"

    - name: "Randomly select how mnay peers to pause for leader self depose"
      vars:
      set_fact:
         nfollower_pause: "{{ (1, 2) | random | int}}"

    - name: "Number of peers to pause"
      debug:
         msg: "{{ nfollower_pause }}"

    - name: "Pause number of followers in series"
      set_fact:
         pause_peer="{{lookup('niova_raftprocess', 'pause', 'server', follower_idx[item], wantlist=True)}}"
      loop: "{{ range(0, nfollower_pause|int) | list}}"

    - name: "Wait for 5sec"
      wait_for:
         timeout: 5
 
    - name: "Observe the leader parameters"
      vars:
         stage: "stage0"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/follower-stats"
            - "/raft_root_entry/*/client-requests"
      set_fact:
         follower_after_pause="{{ lookup('niova_ctlrequest', 'lookup', leader_idx, raft_keys, wantlist=True)}}"
      failed_when: >
          follower_after_pause['/*/client-requests'] != "deny-may-be-deposed"

    - name: "Print before and after pause"
      debug:
         msg:
           - "{{ follower_before_pause}}"
           - "{{ follower_after_pause}}"

    - name: "Verify follower parameters"
      set_fact:
        before_pause_lack: "{{follower_before_pause['/0/follower-stats'][item]['last-ack']}}"
        after_pause_lack: "{{follower_after_pause['/0/follower-stats'][item]['last-ack']}}"
      failed_when: >
        after_pause_lack < before_pause_lack
      loop: "{{ range(0, follower_idx | length) | list}}"

    - name: "Resume the followers one at a time and verify stages"
      vars:
        stage: "stage1"
        raft_keys:
          - "/raft_root_entry/0/leader-uuid"
          - "/raft_root_entry/0/peer-uuid"
          - "/raft_root_entry/0/newest-entry-term"
      set_fact:
        resume_peer="{{ lookup('niova_raftprocess', 'resume', 'server', follower_idx[item], 5, wantlist=True)}}"
        leader_info="{{ leader_info + [lookup('niova_ctlrequest', 'lookup', leader_idx, raft_keys, wantlist=True)]}}"
      loop: "{{ range(0, nfollower_pause|int) | list}}"
      loop_control:
         pause: 3

    - name: "Print Leader info"
      debug:
        msg:
         - "{{ leader_info }}"

    - name: "Check if Case 1 occured ie any of the follower became leader"
      set_fact:
          case1="True"
          case1_iteration="{{ item }}"
      when: leader_info[item]['/0/leader-uuid'] == follower_idx[item]
      loop: "{{ range(0, nfollower_pause|int) | list}}"


    - name: "Check if Case 2 occured i.e multiple attempts for leader election"
      set_fact:
          case2="True"
          case2_iteration="{{ item }}"
      when: leader_info[item]['/0/newest-entry-term'] > 2
      loop: "{{ range(0, nfollower_pause|int) | list}}"

    - name: "Check if Case 3 occured i.e leader remained same"
      set_fact:
          case3="True"
          case3_iteration="{{ item }}"
      when: leader_info[item]['/0/leader-uuid'] == leader_info[item]['/0/peer-uuid']
      loop: "{{ range(0, nfollower_pause|int) | list}}"

    - name: "Print which case occured"
      debug:
        msg:
         - "Case1: {{ case1 }} in iteration {{ case1_iteration }}"
         - "Case2: {{ case2 }} in iteration {{ case2_iteration }}"
         - "Case3: {{ case3 }} in iteration {{ case3_iteration }}"
