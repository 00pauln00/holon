- import_playbook: basic_leader_election.yml
- name: "leader_self_depose"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "leader_self_depose"
     parent: "basic_leader_election"
     follower_uuid: []
     leader_info: []
     case1: False
     case2: False
     case3: False
     case1_iteration: -1
     case2_iteration: -1
     case3_iteration: -1

  tasks:
    - name: "Get the latest list of running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info
    - name: "Get the raft key values from all running peers"
      vars:
         stage: "stage0_get_all"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/commit-idx"
            - "/raft_root_entry/0/newest-entry-idx"
            - "/raft_root_entry/0/newest-entry-term"
            - "/raft_root_entry/0/newest-entry-crc"
            - "/raft_root_entry/0/newest-entry-data-size"
            - "/raft_root_entry/0/state"
            - "/raft_root_entry/0/last-applied"
            - "/raft_root_entry/0/last-applied-cumulative-crc"
            - "/raft_root_entry/0/peer-uuid"
         peer_values: "{{ lookup('niova_ctlrequest', 'lookup', nrunning_peers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Get the raft values for all peers"
      no_log: true
      with_items:
         - "{{ peer_values }}"
      register: stage0_values

    - name: "Get the peer list in the raft cluster"
      set_fact:
        peer_arr: "{{ raft_conf | json_query('peer_uuid_dict')}}"

    - name: "Get the peer uuid for the leader"
      vars:
         leader_uuid_data: item.value
      when: stage0_values['results'][0]['item']["/0/leader-uuid"] == item.value
      with_dict: "{{ peer_arr }}"
      shell: "echo {{ leader_uuid_data }}"
      register: leader_uuid

    - name: "Get peer UUIDs for the follower"
      set_fact:
         follower_uuid: "{{ follower_uuid + [item.value] }}"
      when: stage0_values['results'][0]['item']["/0/leader-uuid"] != item.value
      with_dict: "{{ peer_arr }}"

    - name: "Get the follower information from leader peer"
      vars:
        stage: "get_follower"
        raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/follower-stats"
            - "/raft_root_entry/*/client-requests"
        follower_bf_pause: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid['results'][0]['item']['value'], raft_keys, wantlist=True) }}"
      debug:
       msg: "Get follower stats from leader: {{ leader_uuid['results'][0]['item']['value'] }}"
      no_log: true
      with_items:
        - "{{ follower_bf_pause}}"
      register: fstat_before_pause

    - name: "Randomly select how mnay peers to pause for leader self depose"
      vars:
         npause: "{{ (1, 2) | random | int}}"
      shell: "echo {{ npause }}"
      register: nfollower_pause

    - name: "Number of peers to pause"
      debug:
         msg: "{{ nfollower_pause.stdout }}"

    - name: "Pause number of followers in series"
      set_fact:
         pause_peer: "{{ lookup('niova_raftprocess', 'pause', follower_uuid[item], wantlist=True) }}"
      loop: "{{ range(0, nfollower_pause.stdout | int) | list }}"

    - name: "Wait for 5sec"
      wait_for:
         timeout: 5
 
    - name: "Observe the leader parameters"
      vars:
         stage: "stage0"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/follower-stats"
            - "/raft_root_entry/*/client-requests"
         fstat: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid['results'][0]['item']['value'], raft_keys, wantlist=True) }}"
      debug:
        msg: "Get the follower stat after pausing follower(s)"
      no_log: true
      with_items:
          - "{{ fstat }}"
      register: fstat_after_pause

    - name: "Verify leader won't be able to accept client requests."
      debug:
        msg: "Verify client-requests is deny-may-be-deposed"
      no_log: true
      failed_when: >
          fstat_after_pause['results'][0]['item']['/*/client-requests'] != "deny-may-be-deposed"

    - name: "Verify follower's last-ack before and after pausing the followers"
      vars:
        before_pause_lack: "{{ fstat_before_pause['results'][0]['item']['/0/follower-stats'][item]['last-ack'] }}"
        after_pause_lack: "{{ fstat_after_pause['results'][0]['item']['/0/follower-stats'][item]['last-ack'] }}"
      debug:
        msg: "Compare before and after pause follower stats last-ack"
      no_log: true
      failed_when: >
        after_pause_lack < before_pause_lack
      loop: "{{ range(0, follower_uuid | length) | list }}"

    - name: "Resume the followers one at a time and verify stages"
      vars:
        stage: "stage1"
        raft_keys:
          - "/raft_root_entry/0/leader-uuid"
          - "/raft_root_entry/0/peer-uuid"
          - "/raft_root_entry/0/newest-entry-term"
      set_fact:
        self_depose_resume_peer: "{{ lookup('niova_raftprocess', 'resume', follower_uuid[item], wantlist=True) }}"
        self_depse_leader_info: "{{ leader_vals + [lookup('niova_ctlrequest', 'lookup', leader_uuid['results'][0]['item']['value'], raft_keys, wantlist=True)] }}"
      loop: "{{ range(0, nfollower_pause.stdout | int) | list }}"
      loop_control:
         pause: 3

    - name: "Check if Case 1 occured ie any of the follower became leader"
      set_fact:
          self_depose_case1: "True"
          self_depose_case1_iteration: "{{ item }}"
      when: self_depose_leader_info[item]['/0/leader-uuid'] == follower_uuid[item]
      loop: "{{ range(0, nfollower_pause.stdout | int) | list }}"

    - name: "Check if Case 2 occured i.e multiple attempts for leader election"
      set_fact:
          self_depose_case2: "True"
          self_depose_case2_iteration: "{{ item }}"
      when: self_depose_leader_info[item]['/0/newest-entry-term'] > 2
      loop: "{{ range(0, nfollower_pause.stdout | int) | list }}"

    - name: "Check if Case 3 occured i.e leader remained same"
      set_fact:
          self_depose_case3: "True"
          self_depose_case3_iteration: "{{ item }}"
      when: self_depose_leader_info[item]['/0/leader-uuid'] == leader_info[item]['/0/peer-uuid']
      loop: "{{ range(0, nfollower_pause.stdout | int) | list }}"

    - name: "Print which case occured"
      debug:
        msg:
         - "Case1: {{ self_depose_case1 }} in iteration {{ self_depose_case1_iteration }}"
         - "Case2: {{ self_depose_case2 }} in iteration {{ self_depose_case2_iteration }}"
         - "Case3: {{ self_depose_case3 }} in iteration {{ case3_depose_iteration }}"
