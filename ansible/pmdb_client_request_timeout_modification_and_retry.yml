- import_playbook: pmdb_client_error_demonstration2.yml
- name: "PMDB Client Request Timeout Modification and Retry"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "pmdb_client_request_timeout_modification_and_retry"
     parent: "pmdb_client_error_demonstration2"
     requirement: "pumicedb"
     client_obj: {}
  tasks:
    - name: "{{ recipe_name }} : Verify the holon started with pumicedb cluster"
      debug:
        msg: "Recipe Requirement is: {{ requirement }}, where as 'cluster_type' passed: {{ raft_param['ctype'] }}"
      failed_when: requirement != raft_param['ctype']

    - name: "{{ recipe_name }} : Create UUID for starting the client"
      shell: "/usr/bin/uuid"
      register: client_uuid

    - name: "{{ recipe_name }} : Create app uuid"
      shell: "/usr/bin/uuid"
      register: app_uuid

    - name: "{{ recipe_name }} : Prepare parameter to pass across recipes"
      set_fact:
        client_uuid: "{{ client_uuid.stdout }}"
        app_uuid: "{{ app_uuid.stdout }}"

    - debug:
        msg:
          - "client uuid: {{ client_uuid }}"
          - "app uuid: {{ app_uuid }}"
  
    - name: "{{ recipe_name }} : Start the client"
      include_role:
         name: common
         tasks_from: start_client
      vars:
         ClientUUID: "{{ client_uuid }}"

    - name: "{{ recipe_name }} : Get the list of peers in the cluster"
      set_fact:
        peer_arr: "{{ raft_conf | json_query('peer_uuid_dict') }}"

    - name: "{{ recipe_name }} : Get peer uuid for the leader"
      set_fact:
        leader_uuid: "{{ item.value }}"
      when: stage0_values["/0/leader-uuid"] == item.value
      with_dict: "{{ peer_arr }}"

    - name: "{{ recipe_name }} : Verify leader shoulds accept client requests."
      vars:
        stage: "stage0_client_req"
        raft_key:
            - "/raft_root_entry/0/client-requests"
      set_fact:
        stage0_values: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, raft_key, wantlist=True) }}"
      failed_when: stage0_values["/0/client-requests"] != "accept"
    
    - name: "{{ recipe_name }} : Apply fault injection point on the raft leader 'raft_leader_may_be_deposed'."
      vars:
         stage: "enable_fault_injection_raft_leader_may_be_deposed"
         cmd: "enabled@true"
         where: "/fault_injection_points/name@raft_leader_may_be_deposed"
         set_fault_injection: "{{ lookup('niova_ctlrequest', 'apply_cmd', leader_uuid, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ set_fault_injection }}"

    - name: "{{ recipe_name }} : Verify Leader should report client-requests: 'deny-may-be-deposed'."
      vars:
        stage: "stage1"
        raft_key:
            - "/raft_root_entry/0/client-requests"
      set_fact:
        stage1_values: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, raft_key, wantlist=True) }}"
      failed_when: stage1_values["/0/client-requests"] != "deny-may-be-deposed"

    - name: "{{ recipe_name }} : Apply different timeout values for client requests and observe the behavior."
      include_role:
         name: common
         tasks_from: client_request_timeout_verification
      with_items:
         - 2
         - 5
         - 10

    - name: "{{ recipe_name }} : Now remove fault injection point on the raft leader"
      vars:
         stage: "disable_fault_injection"
         cmd: "enabled@false"
         where: "/fault_injection_points/name@raft_leader_may_be_deposed"
         remove_fault_injection: "{{ lookup('niova_ctlrequest', 'apply_cmd', leader_uuid, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ remove_fault_injection }}"

    - name: "{{ recipe_name }} : After removing fault injection, verify client request reported as 'accept'."
      vars:
        stage: "stage3_cli_request"
        raft_key:
            - "/raft_root_entry/0/client-requests"
      set_fact:
        stage3_values: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, raft_key, wantlist=True) }}"
      failed_when: stage3_values["/0/client-requests"] != "accept"
    
    - name: "{{ recipe_name }} : Lookup the object written by parent recipe."
      vars:
         stage: "lookup_stage"
         cmd: "input@{{ Demo2Rncui }}.lookup"
         where: "/pumice_db_test_client/input"
         lookup_obj: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ lookup_obj }}"
    
    - name: "{{ recipe_name }} : Validate pmdb-test-apps array values."
      vars:
        stage: "stage4_lookup_obj"
        lookup_stage_keys:
            - "/pumice_db_test_client/pmdb-test-apps"
      set_fact:
        stage4_values: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid, lookup_stage_keys, wantlist=True) }}"
      failed_when:
        stage4_values["/pumice_db_test_client/pmdb-test-apps"] == "null"
   
    - name: "{{ recipe_name }} : Apply fault injection on the client to silently drop non-ping replies from the leader."
      vars:
         stage: "client_fault_injection"
         cmd: "enabled@true"
         where: "/fault_injection_points/name@raft_client_udp_recv_handler_process_reply_bypass"
         client_fault_injection: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ client_fault_injection }}"

    - pause: seconds=1 

    - name: "{{ recipe_name }} : Verify that leader is still considered viable by the client."
      vars:
        stage: "stage5_leader_viable"
        raft_key:
            - "/raft_client_root_entry/0/leader-viable"
      set_fact:
        stage5_values: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid, raft_key, wantlist=True) }}"
      failed_when: stage5_values["/0/leader-viable"] != True

    - name: "{{ recipe_name }} : Perform the lookup operation again on the same object"
      vars:
         stage: "lookup_stage"
         cmd: "input@{{ Demo2Rncui }}.lookup"
         where: "/pumice_db_test_client/input"
         lookup_op: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ lookup_op }}"

    - pause: seconds=1

    - name: "{{ recipe_name }} : Disable fault injection on the client."
      vars:
         stage: "remove_fault_injection"
         cmd: "enabled@false"
         where: "/fault_injection_points/name@raft_client_udp_recv_handler_process_reply_bypass"
         disable_fault_injection: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"
      debug: 
        msg: "{{ disable_fault_injection }}"

    - pause: seconds=1

    - name: "{{ recipe_name }} : Verify that last-request-tag matches with tag in recent ops."
      vars:
        stage: "stage6"
        raft_keys:
            - "/pumice_db_test_client/pmdb-test-apps/0/last-request-tag"
            - "/pumice_db_test_client/pmdb-test-apps/0/status"
      set_fact:
        stage6_values: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid, raft_keys, wantlist=True) }}"

    - name: "{{ recipe_name }} : Get the recent-ops-rd array"
      vars:
        stage: "check_recent_ops"
        raft_keys:
            - "/raft_client_root_entry/0/recent-ops-rd"
      set_fact:
        check_values: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid, raft_keys, wantlist=True) }}"
    
    - name: "{{ recipe_name }} : Validate the last request from the recent ops array."
      set_fact:
         attempts: "{{ check_values['/0/recent-ops-rd'][-1]['attempts'] }}"
         rpc_user_tag: "{{ check_values['/0/recent-ops-rd'][-1]['rpc-user-tag'] }}"
         completion_time: "{{ check_values['/0/recent-ops-rd'][-1]['completion-time-ms'] }}"
      failed_when: >
        (stage6_values['/0/status'] != "Success") or
        (stage6_values['/0/last-request-tag'] != (rpc_user_tag | int)) or
        ((attempts | int) < 1) or
        ((completion_time | int) < 1000) and ((completion_time | int) > 2000)
    
    - name: "{{ recipe_name }} : Set the 'default-request-timeout-sec' to its default value (i.e.60)"
      vars:
         stage: "recipe_cleanup_stage"
         cmd: "default-request-timeout-sec@60"
         where: "/raft_client_root_entry/default-request-timeout-sec"
         default_timeout: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ default_timeout }}"

    - name: "{{ recipe_name }} : Verify default request timeout set to '60'."
      vars:
        stage: "stage7"
        raft_key:
            - "/raft_client_root_entry/0/default-request-timeout-sec"
      set_fact:
        stage7_values: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid, raft_key, wantlist=True) }}"
      failed_when: stage7_values["/0/default-request-timeout-sec"] != 60

