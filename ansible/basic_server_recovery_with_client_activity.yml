- import_playbook: healthy_raftserver_cluster_type2.yml
- name: "Basic Server Recovery with Client Activity"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "basic_server_recovery"
     parent: "healthy_raftserver_cluster_type2"
     requirement: "pumicedb"
     num_writes: 100
     raft_root_entry_keys: []
  tasks:
  - name: "{{ recipe_name }}: Verify holon started with pumicedb cluster."
    debug:
      msg: "Recipe Requirement is: {{ requirement }}, where as 'backend_type' passed: {{ raft_param['ctype'] }}"
    failed_when: requirement != raft_param['ctype']

  - name: "{{ recipe_name }}: Get the list of all running peer UUIDs"
    include_role:
       name: common
       tasks_from: get_server_uuid_info

  - name: "{{ recipe_name }}: Get the current term value and next-idx value."
    vars:
       stage: "pre_start"
       raft_keys:
          - "/raft_root_entry/0/term"
          - "/raft_root_entry/0/leader-uuid"
       get_orig_values: "{{ lookup('niova_ctlrequest', 'lookup', nrunning_peers, raft_keys, wantlist=True) }}"
    debug:
      msg: "Getting orignal values."
    with_items:
        - "{{ get_orig_values }}"
    register: stage0_value

  - debug: 
      msg: 
        - "{{ stage0_value }}"
        - "{{ stage0_value['results'][0]['item']['/0/leader-uuid'] }}"

  - name: "{{ recipe_name }}: Get follower's uuids."
    vars:
       bsrwca_leader_uuid: "{{ stage0_value['results'][0]['item']['/0/leader-uuid'] }}"
    set_fact:
       follower_uuids: "{{ nrunning_peers | difference( bsrwca_leader_uuid) }}"
     
  - name: "{{ recipe_name }}: Get the follower-stats from leader"
    vars:
      bsrwca_leader_uuid: "{{ stage0_value['results'][0]['item']['/0/leader-uuid'] }}"
      stage: "get_follower_stats"
      raft_key:
            - "/raft_root_entry/0/follower-stats"
      follower_info: "{{ lookup('niova_ctlrequest', 'lookup', bsrwca_leader_uuid, raft_key, wantlist=True) }}"
    debug:
     msg: "Collect the follower stat"
    no_log: true
    with_items:
      - "{{ follower_info }}"
    register: get_fstats
  
  - debug: var=get_fstats

  #- name: "{{ recipe_name }} : Store original next-idx value."
  #  set_fact:
  #    orig_next_idx: "{{ orig_next_idx + [get_fstats['results'][0]['item']['/0/follower-stats'][item]['next-idx']] }}"
  
  - name: "{{ recipe_name }}: Select follower to pause"
    vars:
      pause_follower: "{{ follower_uuids[0] }}"
    debug:
      msg: "Getting follower which will be pause."
    with_items:
        - "{{ pause_follower }}"
    register: stage1_value

  - debug:
      msg: "{{ stage1_value['results'][0]['item'] }}"

  - name: "{{ recipe_name }}: Apply fault injection on follower which will be pause."
    vars:
      follower0: "{{ stage1_value['results'][0]['item'] }}"
      stage: "disable_candidate_mode"
      cmd: "enabled@true"
      where: "/fault_injection_points/name@raft_candidate_state_disabled"
      disable_mode: "{{ lookup('niova_ctlrequest', 'apply_cmd', follower0, cmd, where, wantlist=True) }}"
    debug:
      msg: "{{ disable_mode }}"
    no_log: True
  
  - name: "{{ recipe_name }}: Get fault_injection_points array."
    vars:
      follower0: "{{ stage1_value['results'][0]['item'] }}"
      stage: "stage2"
      raft_key:
         - "/fault_injection_points"
      get_fi: "{{ lookup('niova_ctlrequest', 'lookup', follower0, raft_key, wantlist=True) }}"
    debug:
      msg: "Getting fault_injection_points array."
    with_items:
        - "{{ get_fi }}"
    register: stage2_value

  - debug: var=stage2_value 

  - name: "{{ recipe_name }}: Get 'enabled' value for 'raft_candidate_state_disabled' to check it set to 'true'."
    vars:
      fi_value: "{{ stage2_value['results'][0]['item'] }}"
    set_fact:
       Basic_Recovery_fi_check: "{{ fi_value['//fault_injection_points'][item]['enabled'] }}"
    when: (fi_value['//fault_injection_points'][item]['name'] == "raft_candidate_state_disabled")
    loop: "{{  range(0, fi_value['//fault_injection_points'] | length) | list }}"
    
  - name: "{{ recipe_name }}: Verify fault is injected correctly on follower which will be pause."
    debug:
      msg: "{{ Basic_Recovery_fi_check }}"
    failed_when: Basic_Recovery_fi_check != True

  - name: "{{ recipe_name }}: Pause one follower"
    vars:
      follower0: "{{ stage1_value['results'][0]['item'] }}"
      stage: "pause_follower"
      wait_for_ofile: False
      pause_follower0: "{{ lookup('niova_raftprocess', 'pause', follower0, wantlist=True) }}"
    debug: 
      msg: "{{ pause_follower0 }}"

  - name: "{{ recipe_name }}: After pausing one follower, get the follower-stats from leader"
    vars:
      bsrwca_leader_uuid: "{{ stage0_value['results'][0]['item']['/0/leader-uuid'] }}"
      stage: "curr_fstats"
      raft_key:
         - "/raft_root_entry/0/follower-stats"
      iter_info:
         iter: 5
         sleep_after_cmd: 0.5
    set_fact:
      curr_follower_info: "{{ lookup('niova_ctlrequest', 'lookup', bsrwca_leader_uuid, raft_key, iter_info, wantlist=True) }}"
   
  - debug: var=curr_follower_info
      
  - name: "{{ recipe_name }}: 'ms-since-last-ack' should be incremental in each iteration"
    vars:
      time1: "{{ curr_follower_info[item]['/0/follower-stats'][0]['ms-since-last-ack'] }}"
      time2: "{{ curr_follower_info[item + 1]['/0/follower-stats'][0]['ms-since-last-ack'] }}"
    debug:
      msg: "Compare ms-since-last-ack: {{ time1 | int }} with {{ time2 | int }}"
    failed_when: (time1 | int) >= (time2 | int)
    loop: "{{ range(0, 4)| list }}"

  - name: "{{ recipe_name }}: Create UUID for starting the client."
    shell: "/usr/bin/uuid"
    register: bsrca_client_uuid

  - name: "{{ recipe_name }}: Create app uuid."
    shell: "/usr/bin/uuid"
    register: bsrca_app_uuid

  - name: "{{ recipe_name }}: Prepare parameter to pass across recipes."
    set_fact:
      bsrca_rncui: "{{ bsrca_app_uuid.stdout }}:0:0:0:0"

  - debug:
      msg:
        - "client uuid: {{ bsrca_client_uuid.stdout }}"
        - "app uuid: {{ bsrca_app_uuid.stdout }}"
        - "rncui: {{ bsrca_rncui }}"

  - name: "{{ recipe_name }}: Start the client."
    include_role:
       name: common
       tasks_from: start_client
    vars:
      ClientUUID: "{{ bsrca_client_uuid.stdout }}"

  - name: "{{ recipe_name }}: Perform the write {{ num_writes }} times."
    vars:
      stage: "num_writes"
      cmd: "input@{{ bsrca_app_uuid.stdout }}:0:0:0:0.write:0.{{ num_writes }}"
      where: "/pumice_db_test_client/input"
      write_cmd: "{{ lookup('niova_ctlrequest', 'apply_cmd', bsrca_client_uuid.stdout, cmd, where, wantlist=True) }}"
    debug:
      msg: "{{ write_cmd }}"
    no_log: True

  - name: "{{ recipe_name }}: Wait until all write completes from client."
    vars:
      stage: "wait_for_client_write_completes"
      raft_key: "/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno"
    debug:
      msg: "Waiting for client to finish writing"
    until: lookup('niova_ctlrequest', 'lookup', bsrca_client_uuid.stdout, raft_key, wantlist=True) | dict2items | map(attribute='value') | list != (num_writes - 1)
    loop: "{{ range(0, 10) | list }}"
    loop_control:
       pause: 1

  - name: "{{ recipe_name }}: Get the client parameters after 100 num_writes."
    vars:
      stage: "stage3"
      raft_keys:
          - "/pumice_db_test_client/pmdb-test-apps/0/app-user-id"
          - "/pumice_db_test_client/pmdb-test-apps/0/status"
          - "/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno"
          - "/pumice_db_test_client/pmdb-test-apps/0/app-sync"
          - "/pumice_db_test_client/pmdb-test-apps/0/app-seqno"
          - "/pumice_db_test_client/pmdb-test-apps/0/last-request-tag"
      client_write_verification: "{{ lookup('niova_ctlrequest', 'lookup', bsrca_client_uuid.stdout, raft_keys, wantlist=True) }}"
    debug:
      msg: "Getting client-requests from leader."
    with_items:
        - "{{ client_write_verification }}"
    register: stage3_value

  - name: "{{ recipe_name }}: Verify the client parameters after 100 num_writes."
    vars:
      get_stage3: "{{ stage3_value['results'][0]['item'] }}"
    debug:
      msg:
        - "Verifying parameter after 100 num_writes."
    failed_when: >
      (get_stage3['/0/app-user-id'] != bsrca_rncui) or
      (get_stage3['/0/status'] != "Success") or
      ((get_stage3['/0/pmdb-seqno'] | int) != (num_writes - 1)) or
      (get_stage3['/0/app-sync'] != True) or
      ((get_stage3['/0/app-seqno'] | int) != num_writes)
  
  - name: "{{ recipe_name }}: Recheck the follower-stats from leader."
    vars:
      bsrwca_leader_uuid: "{{ stage0_value['results'][0]['item']['/0/leader-uuid'] }}"
      stage: "recheck_follower_stats"
      raft_key:
            - "/raft_root_entry/0/follower-stats"
      recheck_follower_info: "{{ lookup('niova_ctlrequest', 'lookup', bsrwca_leader_uuid, raft_key, wantlist=True) }}"
    debug:
     msg: "Collect the follower stat"
    with_items:
      - "{{ recheck_follower_info }}"
    register: recheck_fstats

  - name: "{{ recipe_name }}: Get alive followers."
    vars:
      follower0: "{{ stage1_value['results'][0]['item'] }}"
    set_fact:
      alive_followers: "{{ follower_uuids | difference(follower0) }}"
    
  - name: "{{ recipe_name }}: Verify next-idx for alive followers, it should be (original-next-idx + NumWrites)."
    vars:
       initial_next_idx: "{{ get_fstats['results'][item]['item']['/0/follower-stats'][item]['next-idx'] }}"
       get_curr_fstats: "{{ recheck_fstats['results'][item]['item'] }}"
    debug:
      msg: 
        - "Check next-idx for alive follower"
    failed_when: >
      (alive_followers[item] != get_curr_fstats['/0/follower-stats'][item]['peer-uuid']) and
      get_curr_fstats['/0/follower-stats'][item]['next-idx'] != ((initial_next_idx | int) + (num_writes | int))
    loop: "{{ range(0, alive_followers[item] | length) | list }}"
  
  - name: "{{ recipe_name }}: Verify next-idx for paused follower, it should be same as original-next-idx."
    vars: 
      initial_next_idx: "{{ get_fstats['results'][item]['item']['/0/follower-stats'][item]['next-idx'] }}"
    debug:
      msg: "{{ recheck_follower_info['/0/follower-stats'][0]['next-idx'] }}"
    failed_when:
      recheck_follower_info['/0/follower-stats'][0]['next-idx'] != (orig_next_idx[0] | int)

  - name: "{{ recipe_name }}: Unpause the paused follower."
    vars:
      stage: "unpause_follower"
      wait_for_ofile: False
      unpause_follower0: "{{ lookup('niova_raftprocess', 'resume', stage1_value['results'][0]['item'], wantlist=True) }}"
    debug:
      msg: "{{ unpause_follower0 }}"

  - name: "{{ recipe_name }}: Get running peers."
    set_fact:
        running_peers: "{{ nrunning_peers | difference(client_uuid) }}"

  - name: "{{ recipe_name }}: Verify term value has not changed."
    vars:
      initial_values: "{{ stage0_value['results'][item]['item'] }}"
      stage: "stage4"
      raft_keys:
              - "/raft_root_entry/0/commit-idx"
              - "/raft_root_entry/0/last-applied"
              - "/raft_root_entry/0/term"
              - "/raft_root_entry/0/newest-entry-idx"
    set_fact:
      stage4_values: "{{ lookup('niova_ctlrequest', 'lookup', running_peers[item], raft_keys, wantlist=True) }}"
    failed_when: >
      (stage4_values["/0/term"] != (initial_values["/0/term"] | int)) or
      (stage4_values["/0/commit-idx"] != (num_writes + 1)) or
      (stage4_values["/0/last-applied"] != (num_writes + 1)) or
      (stage4_values["/0/newest-entry-idx"] != (num_writes + 1))
    loop: "{{ range(0, running_peers | length) | list }}"
 
  - name: "{{ recipe_name }}: Get the last-applied-cumulative-crc and newest-entry-crc."
    vars:
       stage: "check_same_values"
       peer_raft_keys:
              - "/raft_root_entry/0/last-applied-cumulative-crc"
              - "/raft_root_entry/0/newest-entry-crc"
       raft_root_entry_keys: "{{ raft_root_entry_keys + [lookup('niova_ctlrequest', 'lookup', running_peers, peer_raft_keys, wantlist=True)] }}"
    debug:
      msg: "Getting running peers."
    with_items:
        - "{{ raft_root_entry_keys }}"
    register: all_running_peers
 
  - name: "{{ recipe_name }}: Verify last-applied-cumulative-crc and newest-entry-crc is same on all peers."
    debug:
      msg: "Compare last-applied-cumulative-crc and newest-entry-crc on all peers."
    failed_when: >
      (raft_root_entry_keys[item]['/0/last-applied-cumulative-crc'] != raft_root_entry_keys[item+1]['/0/last-applied-cumulative-crc']) or
      (raft_root_entry_keys[item]['/0/newest-entry-crc'] != raft_root_entry_keys[item+1]['/0/newest-entry-crc'])
    loop: "{{ range(0, running_peers | length - 1) | list }}"
  
  - name: "{{ recipe_name }}: Perform and Verify Client Read."
    vars:
      stage: "read_client"
      cmd: "input@{{ app_uuid }}:0:0:0:0.read"
      where: "/pumice_db_test_client/input"
      read_cmd: "{{ lookup('niova_ctlrequest', 'apply_cmd', bsrca_client_uuid.stdout, cmd, where, wantlist=True) }}"
    debug:
      msg: "{{ read_cmd }}"
    no_log: True

  - name: "{{ recipe_name }}: Verify that last-request-tag value changed after successful read."
    vars:
      stage: "stage5"
      raft_keys:
          - "/pumice_db_test_client/pmdb-test-apps/0/last-request-tag"
          - "/pumice_db_test_client/pmdb-test-apps/0/status"
          - "/pumice_db_test_client/pmdb-test-apps/0/app-validated-seqno"
          - "/pumice_db_test_client/pmdb-request-history"
    set_fact:
        client_read_verification: "{{ lookup('niova_ctlrequest', 'lookup', bsrca_client_uuid.stdout, raft_keys, wantlist=True) }}"
    failed_when: >
      (client_read_verification['/0/last-request-tag'] == client_write_verification['/0/last-request-tag']) or
      (client_read_verification['/0/status'] != "Success") or
      (client_read_verification['/0/app-validated-seqno'] != num_writes) or
      (client_read_verification['/pumice_db_test_client/pmdb-request-history'][-1]['last-request-tag'] != client_read_verification['/0/last-request-tag']) or
      (client_read_verification['/pumice_db_test_client/pmdb-request-history'][-1]['op'] != "read") or
      (client_read_verification['/pumice_db_test_client/pmdb-request-history'][-1]['status'] != "Success")
  
  - name: "{{ recipe_name }}: Remove fault injection from the paused follower."
    vars:
      stage: "recipe_cleanup"
      cmd: "enabled@false"
      where: "/fault_injection_points/name@raft_candidate_state_disabled"
      remove_fault_inject: "{{ lookup('niova_ctlrequest', 'apply_cmd', pause_follower, cmd, where, wantlist=True) }}"
    debug:
      msg: "{{ remove_fault_inject }}"
    no_log: True

  - name: "{{ recipe_name }}: Verify fault injection removed from the paused follower."
    vars:
      stage: "stage6"
      raft_key:
         - "/fault_injection_points"
    set_fact:
      stage6_values: "{{ lookup('niova_ctlrequest', 'lookup', stage1_value['results'][0]['item'], raft_key, wantlist=True) }}"
  
  - name: "{{ recipe_name }}: Get 'enabled' value for 'raft_candidate_state_disabled' to check it set to 'false'."
    set_fact:
       remove_fault_injection: "{{ stage6_values['//fault_injection_points'][item]['enabled'] }}"
    when: (stage6_values['//fault_injection_points'][item]['name'] == "raft_candidate_state_disabled")
    loop: "{{  range(0, stage1_values['//fault_injection_points'] | length) | list }}"
  - debug: var=remove_fault_injection

  - debug:
      msg: "Verify fault injection is removed from follower which paused."
    failed_when: remove_fault_injection != False
 
