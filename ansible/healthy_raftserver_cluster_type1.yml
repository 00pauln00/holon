- import_playbook: basic_leader_election.yml
- name: "healthy_raftserver_cluster_type1"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "healthy_raftserver_cluster_type1"
     parent: "basic_leader_election"
     follower_uuid: []
     last_ack_arr: []
  tasks:
  - name: "Get the latest list of running peer UUIDs"
    include_role:
       name: common
       tasks_from: get_server_uuid_info
     
  - name: "Get the raft values from basic leader election"
    vars:
       stage: "stage0_get_all"
       raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/commit-idx"
            - "/raft_root_entry/0/newest-entry-idx"
            - "/raft_root_entry/0/newest-entry-term"
            - "/raft_root_entry/0/newest-entry-crc"
            - "/raft_root_entry/0/newest-entry-data-size"
            - "/raft_root_entry/0/state"
            - "/raft_root_entry/0/last-applied"
            - "/raft_root_entry/0/last-applied-cumulative-crc"
    set_fact:
        stage0_values="{{lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], raft_keys, wantlist=True)}}"
    loop: "{{ range(0, nrunning_peers|length) | list}}"

  - name: "Get the list of peers in the cluster"
    set_fact:
      peer_arr="{{ raft_conf | json_query('peer_uuid_dict')}}"

  - name: "Get the peer uuid for the leader"
    set_fact:
        leader_uuid: "{{ item.value }}"
    when: stage0_values["/0/leader-uuid"] == item.value
    with_dict: "{{ peer_arr }}"

  - name: "Get peer UUIDs for the followers"
    set_fact:
        follower_uuid: "{{ follower_uuid + [item.value] }}"
    when: stage0_values["/0/leader-uuid"] != item.value
    with_dict: "{{ peer_arr }}"

  - name: "Get the follower-stats from leader"
    vars:
      stage: "get_follower_stats"
      raft_keys:
            - "/raft_root_entry/0/follower-stats"
    set_fact:
      orig_follower_info="{{lookup('niova_ctlrequest', 'lookup', leader_uuid, raft_keys, wantlist=True)}}"

  - debug:
      msg: "{{orig_follower_info}}"

  - name: "Get the non-running peers list and select remaining peers to start"
    include_role:
       name: common
       tasks_from: get_server_uuid_info
 
  - name: "Store the UUIDs for peers which needs to be started"
    set_fact:
      peers_to_be_started="{{non_running_peers}}"

  - name: "Start the remaining peers"
    set_fact: start_nservers="{{lookup('niova_raftprocess', 'start', peers_to_be_started[item], wantlist=True)}}"
    loop: "{{ range(0, peers_to_be_started|length) | list}}"

  - name: "Get the cluster information again after starting the peers"
    include_role:
       name: common
       tasks_from: get_server_uuid_info

  - name: "Wait until each raft process is fully started"
    vars:
      stage: "stage0_wait_for_peer_start"
    debug:
      msg: "Wait until each raft process is fully booted up."
    until: (lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], '/raft_root_entry', wantlist=True)| dict2items | map(attribute='value') | list | string != "null") and (lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], '/raft_root_entry/0/state', wantlist=True)| dict2items | map(attribute='value') | list | string != "booting")
    loop: "{{ range(0, nrunning_peers|length) | list}}"

  - name: "Get the follower stat from the leader."
    vars:
      stage: "stage1"
      raft_keys:
            - "/raft_root_entry/0/follower-stats"
    set_fact:
      curr_follower_info="{{lookup('niova_ctlrequest', 'lookup', leader_uuid, raft_keys, wantlist=True)}}"

  - name: "Verify consistent next-idx and prev-idx-term values across the cluster."
    debug:
     msg: "{{curr_follower_info}}"
    failed_when: >
      (curr_follower_info['/0/follower-stats'][item]['next-idx'] != 1) or
      (curr_follower_info['/0/follower-stats'][item]['prev-idx-term'] != stage0_values["/0/term"])  
    loop: "{{range(0, follower_uuid | length) | list}}"

  - name: "Get last-ack for all followers to make sure they are almost same"
    set_fact:
      last_ack_arr="{{last_ack_arr}} + ['{{curr_follower_info['/0/follower-stats'][item]['last-ack'] | to_datetime('%a %b %d %H:%M:%S %Z %Y')}}']"
    loop: "{{range(0, follower_uuid | length) | list}}"

  - name: "Difference between last-ack of two followers should not be more than 2secs"
    set_fact:
      time_diff="{{ ((last_ack_arr[item] | to_datetime) - (last_ack_arr[item + 1] | to_datetime)).total_seconds() | int}}"
    failed_when: (time_diff | int)  >= 2
    loop: "{{range(0, follower_uuid | length - 2) | list}}"

  - debug: var=peers_to_be_started

  - name: "Verify that newly started peers report as 'leader-already-present'"
    vars:
       stage: "stage2"
       raft_keys:
            - "/raft_root_entry/0/voted-for-uuid"
            - "/raft_root_entry/0/follower-reason"
    set_fact:
          stage2_values="{{lookup('niova_ctlrequest', 'lookup', peers_to_be_started[item], raft_keys, wantlist=True)}}"
    failed_when: >
        (stage2_values["/0/voted-for-uuid"] != "00000000-0000-0000-0000-000000000000") or
        (stage2_values["/0/follower-reason"] != "leader-already-present")
    loop: "{{ range(0, peers_to_be_started|length) | list}}"
    
  - name: "Get the list of all running peer UUIDs"
    include_role:
       name: common
       tasks_from: get_server_uuid_info

  - name: "Verify values on all peers"
    vars:
       stage: "stage3"
       raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/commit-idx"
            - "/raft_root_entry/0/newest-entry-idx"
            - "/raft_root_entry/0/newest-entry-term"
            - "/raft_root_entry/0/newest-entry-crc"
            - "/raft_root_entry/0/newest-entry-data-size"
            - "/raft_root_entry/0/state"
            - "/raft_root_entry/0/last-applied"
            - "/raft_root_entry/0/last-applied-cumulative-crc"
    set_fact:
          stage3_values="{{lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], raft_keys, wantlist=True)}}"
    failed_when: >
        (stage3_values["/0/leader-uuid"] != stage0_values["/0/leader-uuid"]) or
        ((stage3_values["/0/term"] != stage0_values["/0/term"]) and
        (stage3_values["/0/term"] != orig_follower_info['/0/follower-stats'][item]['prev-idx-term'])) or
        ((stage3_values["/0/state"] != "leader") and
        (stage3_values["/0/state"] != "follower")) or
        (stage3_values["/0/commit-idx"] != 0) or
        (stage3_values["/0/last-applied"] != 0) or
        (stage3_values["/0/last-applied-cumulative-crc"] != stage0_values["/0/last-applied-cumulative-crc"]) or
        (stage3_values["/0/newest-entry-term"] != stage0_values["/0/term"]) or
        (stage3_values["/0/newest-entry-idx"] != 0) or
        (stage3_values["/0/newest-entry-data-size"] != 0) or
        (stage3_values["/0/newest-entry-crc"] != stage0_values["/0/newest-entry-crc"])
    loop: "{{ range(0, nrunning_peers|length) | list}}"
