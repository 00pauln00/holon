- import_playbook: healthy_raftserver_cluster_type2.yml
  when: raft_param['ctype'] == "pumicedb"

- name: "Completing an Uncommitted Write Following a Reboot"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "Completing an Uncommitted Write Following a Reboot"
     parent: "Healthy Raftserver Cluster Type-2"
     requirement: "pumicedb"
     num_writes: 0
     cuwr_num_peer_started_after_reboot: []
     peer_raft_keys:
           - "/raft_root_entry/0/term"
           - "/raft_root_entry/0/commit-idx"
           - "/raft_root_entry/0/last-applied"
           - "/raft_root_entry/0/last-applied-cumulative-crc"
           - "/raft_root_entry/0/newest-entry-idx"
           - "/raft_root_entry/0/newest-entry-term"
           - "/raft_root_entry/0/newest-entry-data-size"
           - "/raft_root_entry/0/newest-entry-crc"

  tasks:
   - name: "{{ recipe_name }}: Verifying recipe compatibility requirements."
     debug:
       msg: "Recipe Requirement is: {{ requirement }}, where as 'cluster_type' passed: {{ raft_param['ctype'] }}"
     failed_when: requirement != raft_param['ctype']

   - name: "{{ recipe_name }}: Generate Client UUID."
     shell: "/usr/bin/uuid"
     register: client_uuid

   - name: "{{ recipe_name }}: Generate App UUID."
     shell: "/usr/bin/uuid"
     register: app_uuid

   #Recipe Preparation
   - name: "{{ recipe_name }}: Get raft_root_entry values of all peers before reboot."
     vars:
       stage: "recipe_preparation"
       raft_root_entry: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, peer_raft_keys, wantlist=True) }}"
     debug:
        msg: "Getting raft_root_entry for all servers."
     no_log: true
     with_items:
        - "{{ raft_root_entry }}"
     register: raft_root_entry_all

   - name: "{{ recipe_name }}: Compare raft_root_entry values of all peers."
     vars:
       term: "{{ raft_root_entry_all['results'][item]['item']['/0/term'] }}"
       term_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/term'] }}"
       commit_idx: "{{ raft_root_entry_all['results'][item]['item']['/0/commit-idx'] }}"
       commit_idx_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/commit-idx'] }}"
       last_applied: "{{ raft_root_entry_all['results'][item]['item']['/0/last-applied'] }}"
       last_applied_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/last-applied'] }}"
       last_applied_cum_crc: "{{ raft_root_entry_all['results'][item]['item']['/0/last-applied-cumulative-crc'] }}"
       last_applied_cum_crc_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/last-applied-cumulative-crc'] }}"
       newest_entry_idx: "{{ raft_root_entry_all['results'][item]['item']['/0/newest-entry-idx'] }}"
       newest_entry_idx_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/newest-entry-idx'] }}"
       newest_entry_term: "{{ raft_root_entry_all['results'][item]['item']['/0/newest-entry-term'] }}"
       newest_entry_term_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/newest-entry-term'] }}"
       newest_entry_data_size: "{{ raft_root_entry_all['results'][item]['item']['/0/newest-entry-data-size'] }}"
       newest_entry_data_size_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/newest-entry-data-size'] }}"
       newest_entry_crc: "{{ raft_root_entry_all['results'][item]['item']['/0/newest-entry-crc'] }}"
       newest_entry_crc_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/newest-entry-crc'] }}"
     debug:
       msg: "Compare raft_root_entry values of all peers."
     failed_when: >
          (term != term_next) or
          (commit_idx != commit_idx_next) or
          (last_applied != last_applied_next) or
          (last_applied_cum_crc != last_applied_cum_crc_next) or
          (newest_entry_idx != newest_entry_idx_next) or
          (newest_entry_term != newest_entry_term_next) or
          (newest_entry_data_size != newest_entry_data_size_next) or
          (newest_entry_crc != newest_entry_crc_next)
     loop: "{{ range(0, NRunningPeers | length-1) | list }}"
   
   #Determine leader before reboot
   - name: "{{ recipe_name }}: Get leader_uuid before reboot."
     vars:
       stage: "before_reboot_leader"
       raft_keys:
          - "/raft_root_entry/0/leader-uuid"
       lead_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[0], raft_keys, wantlist=True) }}"
     debug:
       msg: "Getting leader_uuid before reboot."
     with_items:
         - "{{ lead_values }}"
     register: leader_values

   - name: "{{ recipe_name }}: Get leader uuid and follower's uuids."
     set_fact:
       cuwr_leader_uuid_before: "{{ leader_values['results'][0]['item']['/0/leader-uuid'] }}"
       cuwr_follower_uuids: "{{ NRunningPeers | difference(leader_values['results'][0]['item']['/0/leader-uuid']) }}"

   - name: "{{ recipe_name }}: Get newest-entry-idx values for all followers before write."
     vars:
       stage: "before_write_followers"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
       new_ent_idx_follo_before_write_vals: "{{ lookup('niova_ctlrequest', 'lookup', cuwr_follower_uuids, raft_keys, wantlist=True) }}"
     debug:
       msg: "Getting newest-entry-idx values for all followers before write."
     with_items:
         - "{{ new_ent_idx_follo_before_write_vals }}"
     register: newest_entry_idx_followers_before_write

   - name: "{{ recipe_name }}: Get newest-entry-idx value for leader before write."
     vars:
       stage: "before_write_leader"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
       new_ent_idx_lead_before_write_vals: "{{ lookup('niova_ctlrequest', 'lookup', cuwr_leader_uuid_before, raft_keys, wantlist=True) }}"
     debug:
       msg: "Getting newest-entry-idx value for leader before write."
     with_items:
         - "{{ new_ent_idx_lead_before_write_vals }}"
     register: newest_entry_idx_leader_before_write

   #Set raft_follower_ignores_non_hb_AE_request on the Followers
   - name: "{{ recipe_name }}: Ignore writes on all followers using fault injection."
     include_role:
       name: common
       tasks_from: set_fault_injection_on_all_followers_and_verify
     vars:
       ServerUUID: "{{ cuwr_follower_uuids[item] }}"
     loop: "{{ range(0, cuwr_follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Start client process."
     include_role:
       name: common
       tasks_from: start_client
     vars:
       ClientUUID: "{{ client_uuid.stdout }}"

   - name: "{{ recipe_name }}: Decrease client request timeout to 1 sec."
     vars:
       stage: "decrease_client_timeout"
       cmd: "default-request-timeout-sec@1"
       where: "/raft_client_root_entry/default-request-timeout-sec"
     debug:
       msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"

   - name: "{{ recipe_name }}: Perform write on the client."
     vars:
       stage: "write"
       cmd: "input@{{ app_uuid.stdout }}:0:0:0:0.write:0"
       where: "/pumice_db_test_client/input"
     debug:
       msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"

   - name: "{{ recipe_name }}: Get newest-entry-idx values for all followers after write."
     vars:
       stage: "after_write_followers"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
       new_ent_idx_followers_after_write_vals: "{{ lookup('niova_ctlrequest', 'lookup', cuwr_follower_uuids, raft_keys, wantlist=True) }}"
     debug:
       msg: "Getting newest-entry-idx values for all followers after write."
     with_items:
         - "{{ new_ent_idx_followers_after_write_vals }}"
     register: newest_entry_idx_followers_after_write

   - name: "{{ recipe_name }}: Get newest-entry-idx value for leader after write."
     vars:
       stage: "after_write_leader"
       raft_keys:
           - "/raft_root_entry/0/newest-entry-idx"
       new_ent_idx_lead_after_write_vals: "{{ lookup('niova_ctlrequest', 'lookup', cuwr_leader_uuid_before, raft_keys, wantlist=True) }}"
     debug:
       msg: "Getting newest-entry-idx value for leader after write."
     with_items:
         - "{{ new_ent_idx_lead_after_write_vals }}"
     register: newest_entry_idx_leader_after_write

   #2a- Verification for newest-entry-idx and commit-idx
   - name: "{{ recipe_name }}: Verify that newest-entry-idx of all followers remains same."
     vars:
       newest_entry_idx_before: "{{ newest_entry_idx_followers_before_write['results'][item]['item'] }}"
       newest_entry_idx_after: "{{ newest_entry_idx_followers_after_write['results'][item]['item'] }}"
     debug:
       msg: "Verifying that newest-entry-idx of all followers remains same"
     failed_when: newest_entry_idx_before['/0/newest-entry-idx'] != newest_entry_idx_after['/0/newest-entry-idx']
     loop: "{{ range(0, cuwr_follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Verify that newest-entry-idx of leader is advanced by 1."
     vars:
       leader_newest_entry_idx_before: "{{ newest_entry_idx_leader_before_write['results'][0]['item'] }}"
       leader_newest_entry_idx_after: "{{ newest_entry_idx_leader_after_write['results'][0]['item'] }}"
     debug:
       msg: "Verifying that newest-entry-idx of leader is advanced by 1."
     failed_when: (leader_newest_entry_idx_after['/0/newest-entry-idx'] - leader_newest_entry_idx_before['/0/newest-entry-idx']) != 1

   - name: "{{ recipe_name }}: Get commit-idx of all running peers after write."
     vars:
       stage: "get_commit_idx_all_after_write"
       raft_keys:
           - "/raft_root_entry/0/commit-idx"
       get_commit_idx_all_after_write_vals: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
     debug:
       msg: "Getting commit-idx of all running peers after write."
     with_items:
         - "{{ get_commit_idx_all_after_write_vals }}"
     register: get_commit_idx_all_after_write

   - name: "{{ recipe_name }}: Verify that commit-idx has not advanced on any peer."
     vars:
       commit_idx: "{{ raft_root_entry_all['results'][item]['item']['/0/commit-idx'] }}"
       commit_idx_after: "{{ get_commit_idx_all_after_write['results'][item]['item']['/0/commit-idx'] }}"
     failed_when: commit_idx != commit_idx_after
     debug:
       msg: "Verifying that commit-idx has not advanced on any peer."
     loop: "{{ range(0, NRunningPeers | length) | list }}"

   #3- Stop the processes, first all followers and then leader
   - name: "{{ recipe_name }}: Stop all follower processes."
     debug:
       msg: "{{ lookup('niova_raftprocess', 'kill', cuwr_follower_uuids[item], wantlist=True) }}"
     loop: "{{ range(0, cuwr_follower_uuids | length) | list }}"

   - name: "{{ recipe_name }}: Stop leader process."
     debug:
       msg: "{{ lookup('niova_raftprocess', 'kill', cuwr_leader_uuid_before, wantlist=True) }}"

   #4-  Restart the Peer that was the Leader
   - name: "{{ recipe_name }}: Restart leader first."
     include_role:
       name: common
       tasks_from: start_server
     vars:
       ServerUUID: "{{ cuwr_leader_uuid_before }}"
     
   - name: "{{ recipe_name }}: Add the leader to the started peer list."
     set_fact:
       cuwr_num_peer_started_after_reboot: "{{ cuwr_num_peer_started_after_reboot + [cuwr_leader_uuid_before] }}"

   #5- Restart the minimum number of Remaining Peers to Create a Quorum
   - name: "{{ recipe_name }}: Get number of servers for basic leader election."
     include_role:
       name: common
       tasks_from: npeers_for_basic_leader_election

   - name: "{{ recipe_name }}: Starting peers for completing quorum."
     include_role:
       name: common
       tasks_from: start_server
     vars:
       ServerUUID: "{{ cuwr_follower_uuids[item] }}"
     loop: "{{ range(0, npeers_for_leader_elect | int - 1) | list }}"
     
   - name: "{{ recipe_name }}: Get the started followers in the running peer list."
     set_fact:
       cuwr_num_peer_started_after_reboot : "{{ cuwr_num_peer_started_after_reboot + [cuwr_follower_uuids[item]] }}"
     loop: "{{ range(0, npeers_for_leader_elect | int - 1) | list }}"

   - name: "{{ recipe_name }}: Activate Raft timer thread on all started peers."
     vars:
       stage: "idle_off"
       cmd: "ignore_timer_events@false"
       where: "/raft_net_info/ignore_timer_events"
     debug:
       msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', cuwr_num_peer_started_after_reboot, cmd, where, wantlist=True) }}"

   #6 - Wait for an Election to Complete.
   - name: "{{ recipe_name }}: Wait until leader election happens."
     vars:
       stage: "leader_election"
     debug:
       msg: "Waiting for leader election"
     until: lookup('niova_ctlrequest', 'lookup', cuwr_num_peer_started_after_reboot[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != "null"
     loop: "{{ range(0, cuwr_num_peer_started_after_reboot | length) | list }}"
     loop_control:
        pause: 2

   #Verify that leader before reboot and after reboot are same.
   - name: "{{ recipe_name }}: Get leader_uuid after reboot."
     vars:
       stage: "leader_after_reboot"
       raft_keys:
              - "/raft_root_entry/0/leader-uuid"
       raft_values_leader_after_reboot: "{{ lookup('niova_ctlrequest', 'lookup', cuwr_num_peer_started_after_reboot[0], raft_keys, wantlist=True) }}"
     with_items:
         - "{{ raft_values_leader_after_reboot }}"
     debug:
       msg: "Getting leader_uuid after reboot."
     register: leader_uuid_after

   - name: "{{ recipe_name }}: Verify that leader did not change after reboot."
     debug:
       msg: "Verifying that leader did not change after reboot."
     failed_when: cuwr_leader_uuid_before != leader_uuid_after['results'][0]['item']['/0/leader-uuid']
   
   - name: "{{ recipe_name }}:Get remaining non-running peer uuids for restarting it."
     set_fact:
        cuwr_remaining_followers_to_start: "{{ cuwr_follower_uuids | difference(cuwr_num_peer_started_after_reboot) }}"

   #7 - Startup the Remaining Followers
   - name: "{{ recipe_name }}: Restarting remaining followers."
     include_role:
       name: common
       tasks_from: start_server
     vars:
       ServerUUID: "{{ cuwr_remaining_followers_to_start[item] }}"
     loop: "{{ range(0, cuwr_remaining_followers_to_start | length) | list }}"

   - name: "{{ recipe_name }}: Wait until all followers have a last-applied-idx which is equal to the leader's."
     vars:
       stage: "poll_for_last_applied_idx"
     debug:
       msg: "Waiting for all followers to have a last-applied-idx which is equal to the leader's."
     until: (lookup('niova_ctlrequest', 'lookup', cuwr_follower_uuids[item], '/raft_root_entry/0/last-applied', wantlist=True) | dict2items | map(attribute='value') | list | first) == (lookup('niova_ctlrequest', 'lookup', leader_uuid_after['results'][0]['item']['/0/leader-uuid'], '/raft_root_entry/0/last-applied', wantlist=True) | dict2items | map(attribute='value') | list | first)
     loop: "{{ range(0, cuwr_follower_uuids | length) | list }}"
     loop_control:
        pause: 2

   #7a - Verifications
   - name: "{{ recipe_name }}: Get the values for comparing commit-idx, last-applied and newest-entry-idx for all servers."
     vars:
       stage: "verifications_after_reboot"
       raft_root_entry_all_after_vals: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, peer_raft_keys, wantlist=True) }}"
     debug:
       msg: "Getting values for for all peers for comparing commit-idx, last-applied and newest-entry-idx."
     with_items:
         - "{{ raft_root_entry_all_after_vals }}"
     register: raft_root_entry_all_after

   - name: "{{ recipe_name }}: Verify values for commit-idx, last-applied and newest-entry-idx for all servers."
     vars:
       commit_idx: "{{ raft_root_entry_all_after['results'][item]['item'] }}"
       last_applied: "{{ raft_root_entry_all_after['results'][item]['item'] }}"
       newest_entry_idx: "{{  raft_root_entry_all_after['results'][item]['item'] }}"
       commit_idx_prev: "{{ raft_root_entry_all['results'][item]['item'] }}"
       last_applied_prev: "{{ raft_root_entry_all['results'][item]['item'] }}"
       newest_entry_idx_prev: "{{  raft_root_entry_all['results'][item]['item'] }}"
     debug:
       msg: "Verifying values for commit-idx, last-applied and newest-entry-idx for all servers."
     failed_when: >
           (commit_idx['/0/commit-idx'] != (commit_idx_prev['/0/commit-idx'] + 2)) or
           (last_applied['/0/last-applied'] != (last_applied_prev['/0/last-applied'] + 2)) or
           (newest_entry_idx['/0/newest-entry-idx'] != (newest_entry_idx_prev['/0/newest-entry-idx'] + 2))
     loop: "{{ range(0, NRunningPeers | length) | list }}"
   
   - name: "{{ recipe_name }}: Validate term, last-applied-cumulative-crc, newest-entry-term, newest-entry-data-size and newest-entry-crc of all peers after reboot."
     vars:
       term: "{{ raft_root_entry_all_after['results'][item]['item']['/0/term'] }}"
       last_applied_cum_crc: "{{ raft_root_entry_all_after['results'][item]['item']['/0/last-applied-cumulative-crc'] }}"
       newest_entry_term: "{{ raft_root_entry_all_after['results'][item]['item']['/0/newest-entry-term'] }}"
       newest_entry_data_size: "{{ raft_root_entry_all_after['results'][item]['item']['/0/newest-entry-data-size'] }}"
       newest_entry_crc: "{{ raft_root_entry_all_after['results'][item]['item']['/0/newest-entry-crc'] }}"
       term_next: "{{ raft_root_entry_all_after['results'][item + 1]['item']['/0/term'] }}"
       last_applied_cum_crc_next: "{{ raft_root_entry_all_after['results'][item + 1]['item']['/0/last-applied-cumulative-crc'] }}"
       newest_entry_term_next: "{{ raft_root_entry_all_after['results'][item + 1]['item']['/0/newest-entry-term'] }}"
       newest_entry_data_size_next: "{{ raft_root_entry_all_after['results'][item + 1]['item']['/0/newest-entry-data-size'] }}"
       newest_entry_crc_next: "{{ raft_root_entry_all_after['results'][item + 1]['item']['/0/newest-entry-crc'] }}"
     debug:
       msg: "Compare raft_root_entry values of all peers"
     failed_when: >
           (term != term_next) or
           (last_applied_cum_crc != last_applied_cum_crc_next) or
           (newest_entry_term != newest_entry_term_next) or
           (newest_entry_data_size != newest_entry_data_size_next) or
           (newest_entry_crc != newest_entry_crc_next)
     loop: "{{ range(0, NRunningPeers | length-1) | list }}"
   
   #8 - Verify the Application Data.
   - name: "{{ recipe_name }}: Perform read on the same object."
     vars:
       stage: "read"
       cmd: "input@{{ app_uuid.stdout }}:0:0:0:0.read"
       where: "/pumice_db_test_client/input"
     debug:
       msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"

   #8a- Get values for pmdb-request-history.
   - name: "{{ recipe_name }}: Get values for pmdb-request-history."
     vars:
       stage: "pmdb_request_history"
       raft_keys:
           - "/pumice_db_test_client/pmdb-request-history"
       pmdb_req_history_vals: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_keys, wantlist=True) }}"
     debug:
       msg: "Getting values for pmdb-request-history."
     with_items:
         - "{{ pmdb_req_history_vals }}"
     register: pmdb_request_history

   #8a- Verifications.
   - name: "{{ recipe_name }}: Validate pmdb-request-history parameters."
     vars:
       rncui: "{{ app_uuid.stdout }}:0:0:0:0"
       pmdb_seqno: "{{ pmdb_request_history['results'][0]['item']['/pumice_db_test_client/pmdb-request-history'][-1] }}"
       app_seq_no: "{{ pmdb_request_history['results'][0]['item']['/pumice_db_test_client/pmdb-request-history'][-1] }}"
       app_user_id: "{{ pmdb_request_history['results'][0]['item']['/pumice_db_test_client/pmdb-request-history'][-1] }}"
       op: "{{ pmdb_request_history['results'][0]['item']['/pumice_db_test_client/pmdb-request-history'][-1] }}"
       status: "{{ pmdb_request_history['results'][0]['item']['/pumice_db_test_client/pmdb-request-history'][-1] }}"
     debug:
       msg: "Validating pmdb-request-history parameters."
     failed_when: >
           (pmdb_seqno['pmdb-seqno'] != 0) or
           (app_seq_no['app-seqno'] != 1) or
           (app_user_id['app-user-id'] != rncui) or
           (op['op'] != "read") or
           (status['status'] != "Success")
