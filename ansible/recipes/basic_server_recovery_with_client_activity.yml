- import_playbook: healthy_raftserver_cluster_type2.yml
- name: "Basic Server Recovery with Client Activity"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "basic_server_recovery"
     parent: "healthy_raftserver_cluster_type2"
     requirement: "pumicedb"
     num_writes: 100
    
  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Verifying recipe compatibility requirements."
      include_role:
         name: common
         tasks_from: recipe_compatibility_requirement

    - name: "{{ recipe_name }}: Get the list of all running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get the current term value and next-idx value."
      vars:
         stage: "pre_start"
         raft_keys:
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/leader-uuid"
         get_orig_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Getting orignal values."
      no_log: True
      with_items:
          - "{{ get_orig_values }}"
      register: stage0_value

    - name: "{{ recipe_name }}: Get follower's uuids."
      include_role:
           name: common
           tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Get the follower-stats from leader"
      vars:
        follower_info: "{{ GetFollowerStatsInfo }}"
      debug:
       msg: "Collect the follower stat"
      no_log: True
      with_items:
        - "{{ follower_info }}"
      register: get_fstats

    - name: "{{ recipe_name }}: Select any follower to be paused"
      set_fact:
        bsr_pause_follower: "{{ FollowerUUIDs[0] }}"

    - name: "{{ recipe_name }}: Apply fault injection on follower which will be pause."
      vars:
        stage: "disable_candidate_mode"
        cmd: "enabled@true"
        where: "/fault_injection_points/name@raft_candidate_state_disabled"
        disable_mode: "{{ lookup('niova_ctlrequest', 'apply_cmd', bsr_pause_follower, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ disable_mode }}"
      no_log: True

    - name: "{{ recipe_name }}: Get fault_injection_points array."
      vars:
        stage: "stage2"
        raft_key:
           - "/fault_injection_points"
        get_fi: "{{ lookup('niova_ctlrequest', 'lookup', bsr_pause_follower, raft_key, wantlist=True) }}"
      debug:
        msg: "Getting fault_injection_points array."
      no_log: True
      with_items:
          - "{{ get_fi }}"
      register: stage2_value

    - name: "{{ recipe_name }}: Get 'enabled' value for 'raft_candidate_state_disabled' to check it set to 'true'."
      vars:
        fi_value: "{{ stage2_value['results'][0]['item'] }}"
      set_fact:
         Basic_Recovery_fi_check: "{{ fi_value['//fault_injection_points'][item]['enabled'] }}"
      when: fi_value['//fault_injection_points'][item]['name'] == "raft_candidate_state_disabled"
      loop: "{{  range(0, fi_value['//fault_injection_points'] | length) | list }}"

    - name: "{{ recipe_name }}: Verify fault is injected correctly on follower which will be pause."
      debug:
        msg: "{{ Basic_Recovery_fi_check }}"
      no_log: True
      failed_when: Basic_Recovery_fi_check != True

    - name: "{{ recipe_name }}: Pause one follower."
      vars:
        stage: "pause_follower"
        wait_for_ofile: False
        pause_follower0: "{{ lookup('niova_raftprocess', 'pause', bsr_pause_follower, wantlist=True) }}"
      debug:
        msg: "{{ pause_follower0 }}"
      no_log: True

    - name: "{{ recipe_name }}: After pausing one follower, get the follower-stats from leader"
      vars:
        bsrwca_leader_uuid: "{{ stage0_value['results'][0]['item']['/0/leader-uuid'] }}"
        stage: "curr_fstats"
        raft_key:
           - "/raft_root_entry/0/follower-stats"
        iter_info:
           iter: 5
           sleep_after_cmd: 0.5
      set_fact:
        curr_follower_info: "{{ lookup('niova_ctlrequest', 'lookup', bsrwca_leader_uuid, raft_key, iter_info, wantlist=True) }}"

    - name: "{{ recipe_name }}: 'ms-since-last-ack' should increment in each iteration."
      vars:
        time1: "{{ curr_follower_info[item]['/0/follower-stats'][0]['ms-since-last-ack'] }}"
        time2: "{{ curr_follower_info[item + 1]['/0/follower-stats'][0]['ms-since-last-ack'] }}"
      debug:
        msg: "Compare ms-since-last-ack: {{ time1 | int }} with {{ time2 | int }}"
      no_log: True
      failed_when: (time1 | int) >= (time2 | int)
      loop: "{{ range(0, 4)| list }}"

    - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
      include_role:
         name: common
         tasks_from: get_new_client_uuid
      register: client_uuid

    - name: "{{ recipe_name }}: Create app uuid."
      shell: "/usr/bin/uuid"
      register: bsrca_app_uuid

    - debug:
        msg: "client uuid: {{ client_uuid }}"

    - name: "{{ recipe_name }}: Start the client."
      include_role:
         name: common
         tasks_from: start_client
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "Recovery Client."
      set_fact:
        RecoveryClient: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Perform the write {{ num_writes }} times."
      vars:
        stage: "num_writes"
        cmd: "input@{{ bsrca_app_uuid.stdout }}:0:0:0:0.write:0.{{ num_writes }}"
        where: "/pumice_db_test_client/input"
        write_cmd: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ write_cmd }}"
      no_log: True

    - name: "{{ recipe_name }}: Wait until all write completes from client."
      vars:
        stage: "wait_for_client_write_completes"
        raft_key: "/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno"
      debug:
        msg: "Waiting for client to finish writing"
      until: lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_key, wantlist=True) | dict2items | map(attribute='value') | list | int != (num_writes | int - 1)
      loop: "{{ range(0, 10) | list }}"
      loop_control:
         pause: 1

    - name: "{{ recipe_name }}: Get the client parameters after 100 num_writes."
      vars:
        stage: "stage3"
        raft_keys:
            - "/pumice_db_test_client/pmdb-test-apps/0/app-user-id"
            - "/pumice_db_test_client/pmdb-test-apps/0/status"
            - "/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno"
            - "/pumice_db_test_client/pmdb-test-apps/0/app-sync"
            - "/pumice_db_test_client/pmdb-test-apps/0/app-seqno"
            - "/pumice_db_test_client/pmdb-test-apps/0/last-request-tag"
        client_write_verification: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_keys, wantlist=True) }}"
      debug:
        msg: "Getting client-requests from leader."
      no_log: True
      with_items:
          - "{{ client_write_verification }}"
      register: stage3_value

    - name: "{{ recipe_name }}: Verify the client parameters after 100 num_writes."
      vars:
        bsrca_rncui: "{{ bsrca_app_uuid.stdout }}:0:0:0:0"
        get_stage3: "{{ stage3_value['results'][0]['item'] }}"
      debug:
        msg:
          - "Verifying parameter after 100 num_writes."
      no_log: True
      failed_when: >
        (get_stage3['/0/app-user-id'] != bsrca_rncui) or
        (get_stage3['/0/status'] != "Success") or
        ((get_stage3['/0/pmdb-seqno'] | int) != (num_writes - 1)) or
        (get_stage3['/0/app-sync'] != True) or
        ((get_stage3['/0/app-seqno'] | int) != num_writes)

    - name: "{{ recipe_name }}: Get follower-stats from leader."
      include_role:
         name: common
         tasks_from: get_follower_stats
  
    - name: "{{ recipe_name }}: Recheck the follower-stats from leader."
      vars:
        recheck_follower_info: "{{ GetFollowerStatsInfo }}"
      debug:
        msg: "Collect the follower stat"
      no_log: True
      with_items:
        - "{{ recheck_follower_info }}"
      register: recheck_fstats
  
    - name: "{{ recipe_name }}: Verify next-idx for alive followers, it should be (original-next-idx + NumWrites)."
      vars:
        follower0: "{{ bsr_pause_follower }}"
        alive_followers: "{{ FollowerUUIDs | difference(follower0) }}"
        initial_next_idx: "{{ get_fstats['results'][0]['item']['/0/follower-stats'][item]['next-idx'] }}"
        get_curr_fstats: "{{ recheck_fstats['results'][0]['item'] }}"
        alive_peer_uuid: "{{ alive_followers | select('search', get_curr_fstats['/0/follower-stats'][item]['peer-uuid']) | list }}"
      debug:
        msg:
          - "{{ alive_peer_uuid }}"
          - "{{ get_curr_fstats['/0/follower-stats'][item]['peer-uuid'] }}"
          - "{{ get_curr_fstats['/0/follower-stats'][item]['next-idx'] }}"
      no_log: True
      failed_when: >
        (alive_peer_uuid == get_curr_fstats['/0/follower-stats'][item]['peer-uuid']) and
        get_curr_fstats['/0/follower-stats'][item]['next-idx'] != ((initial_next_idx | int) + (num_writes | int))
      loop: "{{ range(0, FollowerUUIDs | length) | list }}"

    - name: "{{ recipe_name }}: Verify next-idx for paused follower, it should be same as original-next-idx."
      vars:
        initial_next_idx: "{{ get_fstats['results'][0]['item']['/0/follower-stats'][0]['next-idx'] }}"
        get_curr_fstats: "{{ recheck_fstats['results'][0]['item'] ['/0/follower-stats'][0]['next-idx'] }}"
      debug:
        msg: "{{ get_curr_fstats }}"
      no_log: True
      failed_when:
        (get_curr_fstats | int) != (initial_next_idx | int)

    - name: "{{ recipe_name }}: Unpause the paused follower."
      vars:
        stage: "unpause_follower"
        wait_for_ofile: False
        unpause_follower0: "{{ lookup('niova_raftprocess', 'resume', bsr_pause_follower, wantlist=True) }}"
      debug:
        msg: "{{ unpause_follower0 }}"
      no_log: True

    - name: "{{ recipe_name }}: Get term value."
      vars:
        running_peers: "{{ NRunningPeers }}"
        stage: "stage4"
        raft_keys:
                - "/raft_root_entry/0/commit-idx"
                - "/raft_root_entry/0/last-applied"
                - "/raft_root_entry/0/term"
                - "/raft_root_entry/0/sync-entry-idx"
        stage4_values: "{{ lookup('niova_ctlrequest', 'lookup', running_peers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Verify term value."
      no_log: True
      with_items:
          - "{{ stage4_values }}"
      register: check_term

    - name: "{{ recipe_name }}: Verify term value has not changed."
      vars:
        initial_term: "{{ stage0_value['results'][0]['item']['/0/term'] }}"
        after_resume_follower: "{{ check_term['results'][0]['item'] }}"
      debug:
        msg:
          - "Verifying term value {{ after_resume_follower }}."
      no_log: True
      failed_when: >
        (after_resume_follower["/0/term"] != (initial_term | int)) or
        (after_resume_follower["/0/commit-idx"] != (num_writes + 1)) or
        (after_resume_follower["/0/last-applied"] != (num_writes + 1)) or
        (after_resume_follower["/0/sync-entry-idx"] != (num_writes + 1))

    - name: "{{ recipe_name }}: Get the last-applied-cumulative-crc and sync-entry-crc."
      vars:
         running_peers: "{{ NRunningPeers }}"
         stage: "check_same_values"
         peer_raft_keys:
                - "/raft_root_entry/0/last-applied-cumulative-crc"
                - "/raft_root_entry/0/sync-entry-crc"
         raft_root_entry_keys: "{{ lookup('niova_ctlrequest', 'lookup', running_peers, peer_raft_keys, wantlist=True) }}"
      debug:
        msg:
          - "Getting last-applied-cumulative-crc and sync-entry-crc."
      no_log: True
      with_items:
          - "{{ raft_root_entry_keys }}"
      register: all_running_peers

    - name: "{{ recipe_name }}: Verify last-applied-cumulative-crc and sync-entry-crc is same on all peers."
      vars:
        running_peers: "{{ NRunningPeers }}"
        last_applied_cum_crc: "{{ all_running_peers['results'][item]['item']['/0/last-applied-cumulative-crc'] }}"
        last_applied_cum_crc_next: "{{ all_running_peers['results'][item + 1]['item']['/0/last-applied-cumulative-crc'] }}"
        sync_entry_crc: "{{ all_running_peers['results'][item]['item']['/0/sync-entry-crc'] }}"
        sync_entry_crc_next: "{{ all_running_peers['results'][item + 1]['item']['/0/sync-entry-crc'] }}"
      debug:
        msg: "Compare last-applied-cumulative-crc and sync-entry-crc on all peers."
      no_log: True
      failed_when: >
        (last_applied_cum_crc != last_applied_cum_crc_next ) or
        (sync_entry_crc != sync_entry_crc_next)
      loop: "{{ range(0, running_peers | length - 1) | list }}"

    - name: "{{ recipe_name }}: Perform and Verify Client Read."
      vars:
        stage: "read_client"
        cmd: "input@{{ bsrca_app_uuid.stdout }}:0:0:0:0.read"
        where: "/pumice_db_test_client/input"
        read_cmd: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ read_cmd }}"
      no_log: True
  
    - name: "{{ recipe_name }}: Read the client parameters."
      vars:
        stage: "stage5"
        raft_keys:
            - "/pumice_db_test_client/pmdb-test-apps/0/last-request-tag"
            - "/pumice_db_test_client/pmdb-test-apps/0/status"
            - "/pumice_db_test_client/pmdb-test-apps/0/app-validated-seqno"
            - "/pumice_db_test_client/pmdb-request-history"
        client_read_verification: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_keys, wantlist=True) }}"
      debug:
        msg: "Getting last-request-tag."
      no_log: True
      with_items:
          - "{{ client_read_verification }}"
      register: stage5_value

    - name: "{{ recipe_name }}: Wait until last-request-tag value changed to a new value."
      vars:
        stage: "wait_for_last_rqst_tag"
        get_stage3: "{{ stage3_value['results'][0]['item']['/0/last-request-tag'] }}"
        raft_key: "/pumice_db_test_client/pmdb-test-apps/0/last-request-tag"
      debug:
        msg: "Waiting last-request-tag value changed to a new value"
      until: lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_key, wantlist=True) | dict2items | map(attribute='value') | list | first != (get_stage3 | int)
      loop: "{{ range(0, 10) | list }}"
      loop_control:
         pause: 1

    - name: "{{ recipe_name }}: Verify that last-request-tag value changed after successful read."
      vars:
        running_peers: "{{ NRunningPeers }}"
        get_stage3: "{{ stage3_value['results'][0]['item']['/0/last-request-tag'] }}"
        get_stage5: "{{ stage5_value['results'][0]['item'] }}"
      debug:
        msg: "Verifying last-request-tag value changed or not."
      no_log: True
      failed_when: >
        (get_stage5['/0/last-request-tag'] == (get_stage3 | int)) or
        (get_stage5['/0/status'] != "Success") or
        (get_stage5['/0/app-validated-seqno'] != num_writes) or
        (get_stage5['/pumice_db_test_client/pmdb-request-history'][0]['last-request-tag'] != get_stage5['/0/last-request-tag']) or
        (get_stage5['/pumice_db_test_client/pmdb-request-history'][0]['op'] != "read") or
        (get_stage5['/pumice_db_test_client/pmdb-request-history'][0]['status'] != "Success")

    - name: "{{ recipe_name }}: Apply cmd to remove fault injection from the paused follower."
      vars:
        stage: "recipe_cleanup"
        cmd: "enabled@false"
        where: "/fault_injection_points/name@raft_candidate_state_disabled"
        remove_fault_inject: "{{ lookup('niova_ctlrequest', 'apply_cmd', bsr_pause_follower, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ remove_fault_inject }}"
      no_log: True

    - name: "{{ recipe_name }}: Get fault_injection_points array to remove fault injection."
      vars:
        stage: "stage6"
        raft_key:
           - "/fault_injection_points"
        remove_fi: "{{ lookup('niova_ctlrequest', 'lookup', bsr_pause_follower, raft_key, wantlist=True) }}"
      debug:
        msg: "Getting fault_injection_points array."
      no_log: True
      with_items:
          - "{{ remove_fi }}"
      register: stage6_value

    - name: "{{ recipe_name }}: Get 'enabled' value for 'raft_candidate_state_disabled' to remove fault injection."
      vars:
        fi_value: "{{ stage6_value['results'][0]['item'] }}"
      set_fact:
         Basic_Recovery_remove_fi: "{{ fi_value['//fault_injection_points'][item]['enabled'] }}"
      when: (fi_value['//fault_injection_points'][item]['name'] == "raft_candidate_state_disabled")
      loop: "{{  range(0, fi_value['//fault_injection_points'] | length) | list }}"

    - name: "{{ recipe_name }}: Verify fault injection is removed from paused follower."
      debug:
        msg: "{{ Basic_Recovery_remove_fi }}"
      no_log: True
      failed_when: Basic_Recovery_remove_fi != False

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
           terminate_recipe: true
        failed_when: true
