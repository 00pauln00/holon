- import_playbook: healthy_raftserver_cluster_type1.yml
  when: raft_param['ctype'] == "pumicedb"

- name: "pmdb_client_error_demonstration2"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "pmdb_client_error_demonstration2"
     parent: "healthy_raftserver_cluster_type1"
     requirement: "pumicedb"
     client_obj: {}
     raft_keys:
            - "/pumice_db_test_client/pmdb-test-apps/0/app-user-id"
            - "/pumice_db_test_client/pmdb-test-apps/0/status"
            - "/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno"
            - "/pumice_db_test_client/pmdb-test-apps/0/pmdb-write-pending"
            - "/pumice_db_test_client/pmdb-test-apps/0/app-sync"
            - "/pumice_db_test_client/pmdb-test-apps/0/app-seqno"
            - "/raft_client_root_entry/0/recent-ops-wr"

  tasks:
    - name: "Verify the holon started with pumicedb cluster"
      debug:
         msg: "Recipe Requirement is: {{ requirement }}, where as 'cluster_type' passed is : {{ raft_param['ctype'] }}"
      failed_when: requirement != raft_param['ctype']

    - name: "Create UUID for starting the client"
      shell: "/usr/bin/uuid"
      register: client_uuid

    - name: "Create app uuid"
      shell: "/usr/bin/uuid"
      register: app_uuid

    - name: "Prepare parameter to pass across recipes"
      set_fact:
        client_uuid: "{{ client_uuid.stdout }}"
        app_uuid: "{{ app_uuid.stdout}}"
        Demo2Rncui: "{{ app_uuid.stdout }}:0:0:0:0"
 
    - debug:
        msg:
          - "{{ client_uuid }}"
          - "{{ app_uuid }}"

    - name: "Starting client"
      include_role:
         name: common
         tasks_from: start_client
      vars:
         ClientUUID: "{{ client_uuid }}"

    - name: "Find out the leader for setting the leader election timeout."
      vars:
        stage: "stage0_get_leader"
        leader_obj: "{{ lookup('niova_ctlrequest', 'lookup', Server0UUID, '/raft_root_entry/0/leader-uuid', wantlist=True) }}"
      set_fact: leader_uuid="{{ leader_obj['/0/leader-uuid'] }}"


    - name: "Capture the leader's term value for comparison."
      vars:
        stage: "leader_term"
        raft_key:
           - "/raft_root_entry/0/term"
           - "/raft_net_info/election-timeout-ms"
      set_fact:
        leader_term="{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, raft_key, wantlist=True) }}"

    - debug:
       msg: "{{ leader_term }}"

    - name: "Set leader election timeout to 30sec."
      vars:
        stage: "stage0_set_elec_timeout"
        cmd: "election-timeout-ms@30000"
        where: "/raft_net_info/election-timeout-ms"
        elec_timeout: "{{ lookup('niova_ctlrequest', 'apply_cmd', leader_uuid, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ elec_timeout }}"

    - name: "Verify that election timeout set to 30sec."
      vars:
        stage: "stage0_elec_timeout"
      set_fact:
        leader_elect_timeout="{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, '/raft_net_info/election-timeout-ms', wantlist=True) }}"
      failed_when: >
        leader_elect_timeout["/raft_net_info/election-timeout-ms"] | string != "30000"


    - name: "Lower the client request timeout to 3secs."
      vars:
        stage: "stage1_client_req_timeout"
        cmd: "default-request-timeout-sec@3"
        where: "/raft_client_root_entry/default-request-timeout-sec"
        client_timeout: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ client_timeout }}"

    - name: "Now write on the client with valid seqno: 0."
      vars:
         stage: "valid_seq_stage"
         cmd: "input@{{ app_uuid }}:0:0:0:0.write:0"
         where: "/pumice_db_test_client/input"
         valid_write_seq: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ valid_write_seq }}"

    - name: "Wait for write completion"
      vars:
        stage: "wait-for-write-comp"
      debug:
        msg: "Waiting for write completion"
      until: (lookup('niova_ctlrequest', 'lookup', client_uuid, '/raft_client_root_entry/0/recent-ops-wr/0/status', wantlist=True) | dict2items | list | first != "null")
      retries: 3
      delay: 1

    - name: "Verify the parameters for successful write operation."
      vars:
        stage: "stage2"
      set_fact:
        stage2_values: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid, raft_keys, wantlist=True) }}"
      failed_when: >
        (stage2_values['/0/app-user-id'] != Demo2Rncui) or
        (stage2_values['/0/status'] != "Success") or
        (stage2_values['/0/pmdb-seqno'] != 0) or
        (stage2_values['/0/pmdb-write-pending'] != False) or
        (stage2_values['/0/app-sync'] != True) or
        (stage2_values['/0/app-seqno'] != 1) or
        (stage2_values['/0/recent-ops-wr'][0]['sub-app-user-id'] != Demo2Rncui) or
        (stage2_values['/0/recent-ops-wr'][0]['status'] != "Success")

    - name: "Get the list of peers in the cluster."
      set_fact:
        peer_arr="{{ raft_conf | json_query('peer_uuid_dict')}}"
 
    - name: "Get the list of followers UUID."
      set_fact:
         follower_uuid: "{{ follower_uuid + [item.value] }}"
      when: leader_uuid != item.value
      with_dict: "{{ peer_arr }}"

    - name: "Follower uuids are:"
      debug:
        msg: "{{ follower_uuid }}"

    - name: "Number of peers needed for quorum"
      include_role:
        name: common
        tasks_from: npeers_for_basic_leader_election

    - name: "Pause the number of peers to break the quorum."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'pause', follower_uuid[item], wantlist=True) }}"
      loop: "{{ range(0, npeers_for_leader_elect | int) | list }}"

    - name: "Now issue read until read fails i.e till leader timeout occurs and it stops responding to client requests."
      vars:
        stage: "read_until_fail"
        cmd: "input@{{ app_uuid }}:0:0:0:0.read"
        where: "/pumice_db_test_client/input"
        lookup_key: "/pumice_db_test_client/pmdb-test-apps/0/status"
      debug:
        msg: "Read until it fails"
      until: lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) and (lookup('niova_ctlrequest', 'lookup', client_uuid, lookup_key, wantlist=True)| dict2items | map(attribute='value') | list | first  != "Success")
      retries: 30
      delay: 1

    - name: "Verify the client parameters after connection timeout"
      vars:
        stage: "after_conn_timeout"
        lookup_key:
          - "/raft_client_root_entry/0/leader-viable"
          - "/raft_client_root_entry/0/leader-alive-cnt"
      set_fact:
         cli_val_after_timeout: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid, lookup_key, wantlist=True) }}"
      failed_when: >
        (cli_val_after_timeout['/0/leader-viable'] | bool != false) or
        (cli_val_after_timeout['/0/leader-alive-cnt'] | int != 0)

    - name: "Verify leaader parameters"
      vars:
        stage: "verify_leader"
        leader_keys:
          - "/raft_root_entry/0/client-requests"
          - "/raft_root_entry/0/state"
          - "/raft_root_entry/0/term"
      set_fact:
        leader_values="{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, leader_keys, wantlist=True)}}"
      failed_when: >
        (leader_values["/0/client-requests"] != "deny-may-be-deposed") or
        (leader_values["/0/state"] != "leader") or
        (leader_values["/0/term"] != leader_term["/0/term"])

    # TestCleanup
    - name: "Resume the paused followers as part of test cleanup process."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'resume', follower_uuid[item], wantlist=True) }}"
      loop: "{{ range(0, npeers_for_leader_elect | int) | list }}"

    - name: "Resetting the leader election timeout"
      vars:
        stage: "stage0_set_elec_timeout"
        cmd: "election-timeout-ms@300"
        where: "/raft_net_info/election-timeout-ms"
        elec_timeout: "{{ lookup('niova_ctlrequest', 'apply_cmd', leader_uuid, cmd, where, wantlist=True) }}"
      debug:
         msg: "{{ elec_timeout }}"

    - name: "Reset the client request timeout."
      vars:
        stage: "stage1_client_req_timeout"
        cmd: "default-request-timeout-sec@60"
        where: "/raft_client_root_entry/default-request-timeout-sec"
        client_timeout: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid, cmd, where, wantlist=True) }}"
      debug:
         msg: "{{ client_timeout }}"

    - name: "Determine the new leader"
      vars:
        stage: "test-cleanup-get-leader"
        leader_obj: "{{ lookup('niova_ctlrequest', 'lookup', Server0UUID, '/raft_root_entry/0/leader-uuid', wantlist=True) }}"
      set_fact: new_leader_uuid="{{ leader_obj['/0/leader-uuid'] }}"

    - name: "After resuming followers valiadate it's aliveness"
      include_role:
         name: common
         tasks_from: validate_followers_aliveness
      vars:
        LeaderUUID: "{{ new_leader_uuid }}"
      with_items:
          - 0
          - 1
          - 2
          - 3
      loop_control:
        loop_var: outer_item
