- import_playbook: healthy_raftserver_cluster_type1.yml
- name: "Healthy Raftserver Cluster Type-2"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "Healthy Rafterver Cluster Type-2"
     parent: "Healthy Raftserver Cluster Type-1"
     stage_values_after: []
     raft_values_after_restart: []
     start_time_prev: []
     start_time_after: []
     follower_uuids_after_restart: []

  tasks:
  #Stage0: Pre-restart
  - name: "Get cluster information"
    include_role:
      name: common
      tasks_from: get_server_uuid_info

  - name: "Get leader_uuid and term value from all running peers before restart"
    vars:
       stage: "Pre-restart"
       raft_keys:
          - "/raft_root_entry/0/leader-uuid"
          - "/raft_root_entry/0/term"
    set_fact:
        stage_values: "{{ lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], raft_keys, wantlist=True) }}"
    loop: "{{ range(0, nrunning_peers | length) | list }}"
    loop_control:
        pause: 2

  - name: "Get start_time of all peers before restarting the cluster"
    vars:
      stage: "pre_restart_start_time"
      raft_keys:
           - "/system_info/start_time"
    set_fact:
        start_time_prev: "{{ start_time_prev + [lookup('niova_ctlrequest','lookup', nrunning_peers[item], raft_keys, wantlist=True)] }}"
    loop: "{{ range(0, nrunning_peers | length) | list }}"
  
  - name: "Get follower-stats from leader peer before restart"
    vars:
      stage: "pre_restart_follower_stat"
      raft_keys:
          - "/raft_root_entry/0/follower-stats"
    set_fact:
        follower_stats_before: "{{ lookup('niova_ctlrequest', 'lookup', stage_values['/0/leader-uuid'], raft_keys, wantlist=True) }}"
  
  #Stage1: Restart
  - name: "Safe restart: Make peers idle before stopping them"
    vars:
      stage: "stage1_idle_on_before_Stop"
    set_fact:
        idle_on: "{{ lookup('niova_ctlrequest', 'apply_cmd', nrunning_peers[item], 'idle_on', False, wantlist=True) }}"
    loop: "{{ range(0, nrunning_peers|length) | list }}"

  - name: "Safe_restart : Kill the processes."
    set_fact:
        kill_peer: "{{ lookup('niova_raftprocess', 'kill', nrunning_peers[item], wantlist=True) }}"
    loop: "{{ range(0, nrunning_peers | length) | list }}"

  - name: "Safe_restart : Restart all peers in the cluster"
    set_fact:
        start_peer: "{{ lookup('niova_raftprocess', 'start', nrunning_peers[item], wantlist=True) }}"
    loop: "{{ range(0, nrunning_peers | length) | list}}"

  - name: "Wait until each raft process is fully started"
    vars:
      stage: "stage2_wait_for_peer_start"
    debug:
      msg: "Wait until each raft process is fully booted up"
    until: (lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], '/raft_root_entry', wantlist=True)| dict2items | map(attribute='value') | list | string != "null") and (lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], '/raft_root_entry/0/state', wantlist=True)| dict2items | map(attribute='value') | list | string != "booting")
    loop: "{{ range(0, nrunning_peers | length) | list }}"
    loop_control:
        pause: 2

  - name: "Make sure peers are not in idle state"
    vars:
       stage: "stage2_idle_off"
    set_fact:
        idle_off: "{{ lookup('niova_ctlrequest', 'apply_cmd', nrunning_peers[item], 'idle_off', False, wantlist=True) }}"
    loop: "{{ range(0, nrunning_peers|length) | list }}"

  - name: "Get start_time of peers after restart"
    vars:
      stage: "stage2_get_time"
      raft_keys:
           - "/system_info/start_time"
    set_fact:
      start_time_after: "{{ start_time_after + [lookup('niova_ctlrequest','lookup', nrunning_peers[item], raft_keys, wantlist=True)] }}"
    loop: "{{ range(0, nrunning_peers | length) | list }}"

  #Stage2: Verification
  - name: "Verify that restart timestamp has advanced"
    vars:
      prev_time: "{{ start_time_prev[item]['/system_info/start_time'] }}"
      after_time: "{{ start_time_after[item]['/system_info/start_time'] }}"
    debug:
      msg: "Compare time stamp: {{ prev_time }} with {{ after_time }}"
    failed_when: prev_time >= after_time
    loop: "{{ range(0, nrunning_peers | length)| list }}"

  - name: "Wait until leader election happens"
    vars:
      stage: "stage2_leader_election"
    debug:
      msg: "Waiting for leader election"
    until: lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | string != "null"
    loop: "{{ range(0, nrunning_peers | length) | list }}"
    loop_control:
      pause: 2

  #Get new leader-uuid after restart
  - name: "Obtaining the leader_uuid after leader election"
    vars:
       stage: "stage2_get_leader_uuid"
       raft_keys:
           - "/raft_root_entry/0/leader-uuid"
    set_fact:
        stage_values_after: "{{ lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], raft_keys, wantlist=True) }}"
    loop: "{{ range(0, nrunning_peers|length) | list }}"
    loop_control:
        pause: 2

  - name: "Get follower's uuids after restart"
    set_fact:
        follower_uuids_after_restart: "{{ nrunning_peers | difference(stage_values_after['/0/leader-uuid']) }}"

  - name: "Get follower-stats from leader peer after restart"
    vars:
      stage: "stage2_get_follower_stats"
      raft_keys:
          - "/raft_root_entry/0/follower-stats"
    set_fact:
        follower_stats_after: "{{ lookup('niova_ctlrequest', 'lookup', stage_values_after['/0/leader-uuid'], raft_keys, wantlist=True) }}"
        
  - name: "Verify next-idx value before and after restart"
    vars:
      next_idx_before: "{{ follower_stats_before['/0/follower-stats'][item]['next-idx'] }}"
      next_idx_after: "{{ follower_stats_after['/0/follower-stats'][item]['next-idx'] }}"
    debug:
      msg: "Compare next_idx: {{ next_idx_before }} with {{ next_idx_after }}"
    failed_when: >
      next_idx_after < next_idx_before
    loop: "{{ range(0, follower_uuids_after_restart | length) | list }}"
  
  - name: "Get values from all peers after restart and compare parameters"
    vars:
       stage: "stage2_after_restart"
       raft_keys:
           - "/raft_root_entry/0/term"
           - "/raft_root_entry/0/commit-idx"
           - "/raft_root_entry/0/last-applied"
           - "/raft_root_entry/0/last-applied-cumulative-crc"
           - "/raft_root_entry/0/newest-entry-idx"
           - "/raft_root_entry/0/newest-entry-term"
           - "/raft_root_entry/0/newest-entry-data-size"
           - "/raft_root_entry/0/newest-entry-crc"
    set_fact:
        raft_values_after_restart: "{{ raft_values_after_restart + [lookup('niova_ctlrequest', 'lookup', nrunning_peers[item], raft_keys, wantlist=True)] }}"
    failed_when: >
         raft_values_after_restart[item]['/0/term'] <= stage_values['/0/term'] and
         raft_values_after_restart[item]['/0/commit-idx'] != 1 and
         raft_values_after_restart[item]['/0/last-applied'] != 1 and
         raft_values_after_restart[item]['/0/last-entry-idx'] != 1 and
         raft_values_after_restart[item]['/0/newest-entry-term'] > raft_values_after_restart[item]['/0/term'] and
         raft_values_after_restart[item]['/0/newest-entry-data-size'] != 0 
    loop: "{{ range(0, follower_uuids_after_restart | length) | list }}"
    loop_control:
        pause: 2

  - name: "Compare term, last_applied_cumulative_crc and newest_entry_crc of all peers"
    vars:
      term_prev: "{{ raft_values_after_restart[item]['/0/term'] }}"
      term_next: "{{ raft_values_after_restart[item+1]['/0/term'] }}"
      last_applied_cumulative_crc_prev: "{{ raft_values_after_restart[item]['/0/last-applied-cumulative-crc']}}"
      last_applied_cumulative_crc_next: "{{ raft_values_after_restart[item+1]['/0/last-applied-cumulative-crc']}}"
      newest_entry_crc_prev: "{{ raft_values_after_restart[item]['/0/newest-entry-crc']}}"
      newest_entry_crc_next: "{{ raft_values_after_restart[item+1]['/0/newest-entry-crc']}}"
    debug:
       msg: "Compare term values of all peers"
    failed_when: >
      term_prev != term_next and
      last_applied_cumulative_crc_prev != last_applied_cumulative_crc_next and
      newest_entry_crc_prev != newest_entry_crc_next 
    loop: "{{ range(0, follower_uuids_after_restart | length-1) | list }}"

  - name: "Compare Leaderâ€™s follower-stats for all followers"
    vars: 
      next_idx: "{{follower_stats_after['/0/follower-stats'][item]['next-idx']}}"
      prev_idx_term:  "{{follower_stats_after['/0/follower-stats'][item]['prev-idx-term']}}"
      term: "{{ raft_values_after_restart[item]['/0/term'] }}"
    debug:
      msg: "Compare next_idx, prev_idx_term and term value"
    failed_when: >
      next_idx != 2 and
      prev_idx_term != term
    loop: "{{ range(0, follower_uuids_after_restart | length) | list }}"
