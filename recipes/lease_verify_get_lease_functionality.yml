- import_playbook: lease_basic_operations.yml

- name: "Verify_get_lease_functionality"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "verify_get_lease_functionality"
     parent: lease_basic_operations
     no_of_leases: 10

  tasks:
  - block:
    - name: "{{ recipe_name }}: Get the non-running peers list to select first peer to start"
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: Generate new resource
      shell: "/usr/bin/uuid"
      register: resourceUUID

    - name: "Get multiple client uuids."
      include_role:
        name: common
        tasks_from: get_multiple_client_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - set_fact: first_client="{{  ClientUUIDS[0] }}"
    - set_fact: uuids_except_first_client="{{ ClientUUIDS | difference(first_client) }}"

    - name: "{{ recipe_name }}: Perform 'GET' operation."
      vars:
         input_param: {
                'client': '{{ first_client }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'get_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'GET', input_param, wantlist=True) }}"
      debug:
         msg: "GET operation"
      with_items:
          - "{{ leaseApp }}"
      register: getLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ getLease['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (getLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if 'GET' is successful."
      vars:
         wr_response: "{{ getLease['results'][0]['item']['output_data']['Response'] }}"
         operation: "{{ getLease['results'][0]['item']['output_data']['Request'] }}"
      debug:
         msg: "Check if GET is successful: {{ wr_response }}, {{ operation }}"
      failed_when: >
         (operation['Operation'] != "GET") or
         (wr_response['Client'] != clientUUID.stdout|string) or
         (wr_response['Resource'] != resourceUUID.stdout|string) or
         (wr_response['Status'] != 0) or
         (wr_response['TTL'] != 60) or
         (wr_response['LeaseState'] != "Granted")

    - name: "{{ recipe_name }}: Perform 'GET' operation."
      vars:
         input_param: {
                'client': '{{ uuids_except_first_client[idx] }}',
                'resource': '{{ resource_uuid.stdout }}',
                'outFileName': 'get_lease_with_same_Resource_uuids_Diff_client_uuids{{ uuids_except_first_client[idx] }}'
                 }
      set_fact:
        getLease:  " {{ lookup('lease_feature', 'GET', input_param, wantlist=True) }}"
      failed_when: >
         (getLease['output_data']['Status']     != "0")  or
         (getLease['output_data']['client']     != "{{ ClientUUIDS[idx] }}") or
         (getLease['output_data']['resource']   != "{{ resourceUUID.stdout}}") or
         (getLease['output_data']['Operation']  != "GET") or
         (getLease['output_data']['LeaseState'] != "Already-in-use")
      loop: "{{ range(0, uuids_except_first_client | int) }}"
      loop_control:
         loop_var: idx
    
    - name: "{{ recipe_name }}: Start niova-block-ctl process."
      vars:
          input_param: {
             'nisd_dev_size': '68719476736',
             'lookout_uuid': '',
             'alt_name': 'nisd{{item}}'
              }
      set_fact:
         get_nisd: "{{ lookup('nisd_handler', 'niova-block-ctl', input_param, wantlist=True) }}"
      loop: "{{ range(0, nnisds | int) }}"
      #no_log: True

    - name: "{{ recipe_name }}: Start nisd process."
      vars:
         input_param: {
                  'nisd_uuid' : '{{ get_nisd }}',
                  'uport' : '1053',
                  'lookout_uuid': ''
                  }
      debug:
         msg: "{{ lookup('nisd_handler', 'nisd', input_param, wantlist=True) }}"
      #no_log: True

    - pause:
        seconds: 2

    - name: "{{ recipe_name }}: Perform some Writes to the NISD form client 1."
      vars:
         input_param: {
                 'nisd_uuid_to_write' : 'unix:{{ get_nisd }}',
                 'vdev' : '{{ resourceUUID.stdout }}',
                 'read_operation_ratio_percentage' : '0',
                 'random_seed' : '123',
                 'client_uuid' : '{{ clientUUID1.stdout }}',
                 'request_size_in_bytes' : '32',
                 'queue_depth' : '1',
                 'num_ops' : '50',
                 'integrity_check' : True,
                 'sequential_writes' : False,
                 'blocking_process' : False,
                 'lookout_uuid': ''
                 }
      debug:
         msg: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"
    
  # TODo
  # validations from client1 that writes is complete

    - name: "{{ recipe_name }}: Perform some Writes to the NISD form client 2."
      vars:
         input_param: {
                 'nisd_uuid_to_write' : 'unix:{{ get_nisd }}',
                 'vdev' : '{{ resourceUUID.stdout }}',
                 'read_operation_ratio_percentage' : '0',
                 'random_seed' : '123',
                 'client_uuid' : '{{ clientUUID2.stdout }}',
                 'request_size_in_bytes' : '32',
                 'queue_depth' : '1',
                 'num_ops' : '50',
                 'integrity_check' : True,
                 'sequential_writes' : False,
                 'blocking_process' : False,
                 'lookout_uuid': ''
                 }
      debug:
         msg: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"

           # TODO
           # Client2 should not be able to perform any operation on NISD as it does not have the lease.
