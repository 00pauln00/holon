- import_playbook: basic_controlplane_membership.yml
- name: "basic_niova_block_recipe"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "basic_niova_block_recipe"
    parent: basic_controlplane_membership.yml

  tasks:
  - block:
      # Check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: generate new uuid
       shell: uuidgen
       register: nisdUUID

     - name: "{{ recipe_name }}: Starting controlplane_client to write config information of nisd."
       vars:
         input_param: {
                  'Key': '{{ nisdUUID["stdout_lines"][0] }}',
                  'Value': '',
                  'Operation': 'write',
                  'IP_addr': '127.0.0.1',
                  'Port': '3505',
                  'OutfileName': 'nisd_config_output'
                  }
       debug:
         msg: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       no_log: True

     - name: "{{ recipe_name }}: Starting controlplane_client to read the config data"
       vars:
         input_param: {
                  'Key': '{{ nisdUUID["stdout_lines"][0] }}',
                  'Operation': 'read',
                  'OutfileName': 'read_output'
                  }
       debug:
         msg: "{{ lookup('controlplane','ncpc', input_param, wantlist=True) }}"
       no_log: True

     - name: generate new lookout-uuid
       shell: uuidgen
       register: lookoutUUID

     - name: "{{ recipe_name }}: Start niova-lookout process."
       vars:
         input_param: {
                 'lookout_uuid' :  '{{ lookoutUUID["stdout_lines"][0] }}',
                 'aport' : '3900',
                 'hport' : '8001',
                 'rport' : '3901',
                 'uport' : '1053',
                 'lookout_uuid' :  '{{ lookoutUUID["stdout_lines"][0] }}'
                 }
       debug:
         msg: "{{ lookup('controlplane', 'niova-lookout', input_param, wantlist=true) }}"

     - pause:
         seconds: 2

     - name: "{{ recipe_name }}: Wait until lookout's status gets changed."
       vars:
         getLookoutUUID: "{{ lookoutUUID['stdout_lines'][0] }}"
         input_param: {
                  'Operation': 'membership',
                  'OutfileName': 'lookoutMembership'
                  }
       debug:
         msg: "Verifying lookout's Status"
       until: lookup('controlplane', 'ncpc', input_param, wantlist=True) | dict2items | map(attribute='value') | map(attribute=getLookoutUUID) | map(attribute='Status') | list | first == "alive"
       retries: 10
       delay: 1

     - name: "{{ recipe_name }}: Get lookout's membership details."
       vars:
         input_param: {
                  'Operation': 'membership',
                  'OutfileName': 'verify_lookout_info'
                  }
         lookout_membership: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "get lookout's gossip info"
       with_items:
          - "{{ lookout_membership }}"
       register: verify_lookout_status

     - name: "{{ recipe_name }}: Verify lookout's status."
       vars:
         getLookoutUUID: "{{ lookoutUUID['stdout_lines'][0] }}"
         verifyStatus: "{{ verify_lookout_status['results'][0]['item']['membership'][getLookoutUUID]['Status'] }}"
       debug:
         msg: "Verifying status of the lookout."
       failed_when: verifyStatus != "alive"

     - name: "{{ recipe_name }}: Start niova-block-ctl process."
       vars:
          input_param: {
             'nisd_uuid': '{{ nisdUUID["stdout_lines"][0] }}',
             'nisd_dev_size': '21474836480',
             'lookout_uuid' :  '{{ lookoutUUID["stdout_lines"][0] }}'
              }
       debug:
         msg: "{{ lookup('controlplane', 'niova-block-ctl', input_param, wantlist=True) }}"

     - name: "{{ recipe_name }}: Start nisd process."
       vars:
         input_param: {
                  'nisd_uuid' : '{{ nisdUUID["stdout_lines"][0] }}',
                  'lookout_uuid' :  '{{ lookoutUUID["stdout_lines"][0] }}'
                  }
       debug:
         msg: "{{ lookup('controlplane', 'nisd', input_param, wantlist=True) }}"

     - pause:
         seconds: 2

     - name: "{{ recipe_name }}: Wait until Nisd's status gets updated."
       vars:
         getNisd: "{{ nisdUUID['stdout_lines'][0] }}"
         input_param: {
                  'Operation': 'NISDGossip',
                  'OutfileName': 'wait_for_nisdGossip'
                  }
       debug:
         msg: "Verifying NISD's Status"
       until: lookup('controlplane', 'ncpc', input_param, wantlist=True) | dict2items | map(attribute='value') | map(attribute=getNisd) | map(attribute='Status') | list | first == "Alive"
       retries: 10
       delay: 1

     - name: "{{ recipe_name }}: Get nisd's membership details."
       vars:
         input_param: {
                  'Operation': 'NISDGossip',
                  'OutfileName': 'verify_nisd_gossip_info'
                  }
         nisd_membership: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "get nisd's gossip info"
       with_items:
          - "{{ nisd_membership }}"
       register: verify_nisd_status

     - name: "{{ recipe_name }}: Verify nisd's status."
       vars:
         getNisd: "{{ nisdUUID['stdout_lines'][0] }}"
         verifyStatus: "{{ verify_nisd_status['results'][0]['item']['NISDGossip'][getNisd]['Status'] }}"
       debug:
         msg: "Verifying status of the nisd."
       failed_when: verifyStatus != "Alive"

     - name: Generate new vdev-uuid
       shell: "/usr/bin/uuid"
       register: vdevUUID

     - name: Generate new client-uuid for niova-block-test
       shell: "/usr/bin/uuid"
       register: blockTestClientUUID

     - name: "{{ recipe_name }}: Start niova-block-test process."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID["stdout_lines"][0] }}',
                 'vdev' : '{{ vdevUUID.stdout }}',
                 'read_operation_ratio_percentage' : '0',
                 'random_seed' : '123',
                 'client_uuid' : '{{ blockTestClientUUID.stdout }}',
                 'request_size_in_bytes' : '16',
                 'queue_depth' : '1',
                 'num_ops' : '1000',
                 'lookout_uuid' :  '{{ lookoutUUID["stdout_lines"][0] }}'
                 }
       debug:
         msg: "{{ lookup('controlplane', 'niova-block-test', input_param, wantlist=True) }}"
       no_log:  True

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true

