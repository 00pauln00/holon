- import_playbook: lease_basic_operations.yml

- name: "lease_validate_when_leader_sends_the_stale_lease_processing_request_and_then_leader_changes"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "lease_validate_when_leader_sends_the_stale_lease_processing_request_and_then_leader_changes"
    parent: "lease_basic_operations"
    no_of_leases: 5
  vars_files:
    - ../leaseStateValue.yml

  tasks:
  - block:

    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: "Get multiple client uuids."
      include_role:
        name: common
        tasks_from: get_multiple_client_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "Get multiple resource uuids."
      include_role:
        name: common
        tasks_from: get_multiple_resource_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'GET' operation for {{ no_of_leases }} client-uuids and resource-uuids."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_{{ item }}'
                 }
      set_fact:
        getLeaseOps: "{{ getLeaseOps|default([]) + [lookup('lease_feature', 'GET', input_param, wantlist=True)] }}"
      failed_when: >
        (getLeaseOps[item]['outfile_status'] != 0) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Client'] != ClientUUIDS[item]) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Resource'] != resourceUUIDS[item]) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED)
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Apply fault injection on leader and verify."
      include_role:
        name: common
        tasks_from: set_fault_injection_and_verify
      vars:
        ServerUUID: "{{ LeaderUUID['/0/leader-uuid'] }}"
        fault_injection_name: "raft_leader_disable_direct_req"

    - name: "{{ recipe_name }}: Pause for 60 seconds so that all the leases gets expired."
      pause:
        seconds: 60

    - name: "{{ recipe_name }}: Wait untill leaseState of all leases is expired."
      include_role:
        name: common
        tasks_from: wait_untill_leaseState_is_expired
      vars:
         clientuuid: "{{ ClientUUIDS[item] }}"
         resourceuuid: "{{ resourceUUIDS[item] }}"
         leaseState: "{{ EXPIRED }}"
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Store leader-1"
      vars:
         leader1: "{{ LeaderUUID['/0/leader-uuid'] }}"
      debug:
        msg: "Leader-1: {{ leader1 }}"
      no_log: true
      with_items:
         - "{{ leader1 }}"
      register: orig_leader

    - name: "{{ recipe_name }}: Disable send on all peers from the leader 1."
      vars:
         stage: "stage1_disable_net_send"
         cmd: "net_send_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Disable receive on all peers from the leader 1."
      vars:
         stage: "stage1_disable_net_recv"
         cmd: "net_recv_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Wait until leader election happens."
      include_role:
        name: common
        tasks_from: wait_until_leader_election

    - name: "{{ recipe_name }}: Verify new leader has the state as valid for all the leases."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_after_new_leader_{{ item }}'
                 }
      set_fact:
        lookup_aftr_new_leader: "{{ lookup_aftr_new_leader|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param, wantlist=True)] }}"
      failed_when: >
        (lookup_aftr_new_leader[item]['outfile_status'] != 0) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Client'] != ClientUUIDS[item]) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Resource'] != resourceUUIDS[item])
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Enable send on all peers from the leader 1."
      vars:
         stage: "stage1_disable_net_send"
         cmd: "net_send_enabled@true"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Enable receive on all peers from the leader 1."
      vars:
         stage: "stage1_disable_net_recv"
         cmd: "net_recv_enabled@true"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Verify previous leader is elected successfully again."
      vars:
         stage: "get_all_for_new_leader"
      debug:
        msg:
         - "Waiting for new leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True) | dict2items | map(attribute='value') | list | first == orig_leader
      retries: 10
      delay: 2
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Wait untill leaseState of all leases is granted."
      include_role:
        name: common
        tasks_from: wait_untill_leaseState_is_expired
      vars:
         clientuuid: "{{ ClientUUIDS[item] }}"
         resourceuuid: "{{ resourceUUIDS[item] }}"
         leaseState: "{{ GRANTED }}"
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Verify already taken leases gets updated with new leader."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_after_leader_to_be_{{ item }}'
                 }
      set_fact:
        new_leader_lookup: "{{ new_leader_lookup|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param, wantlist=True)] }}"
      failed_when: >
        (new_leader_lookup[item]['outfile_status'] != 0) or
        (new_leader_lookup[item]['output_data'][0]['LeaseRes']['Status'] != 0)
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Client'] != ClientUUIDS[item]) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Resource'] != resourceUUIDS[item])
      loop: "{{ range(0, no_of_leases) | list }}"

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
