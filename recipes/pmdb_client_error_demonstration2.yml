- import_playbook: pmdb_client_error_demonstration1.yml
  when: ClusterParams['ctype'] == "pumicedb"

- name: "pmdb_client_error_demonstration2"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "pmdb_client_error_demonstration2"
     parent: "pmdb_client_error_demonstration1"
     requirement: "pumicedb"
     FollowerUUIDs: []
     client_keys:
            - "/pumice_db_test_client/pmdb-test-apps/0/app-user-id"
            - "/pumice_db_test_client/pmdb-test-apps/0/status"
            - "/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno"
            - "/pumice_db_test_client/pmdb-test-apps/0/pmdb-write-pending"
            - "/pumice_db_test_client/pmdb-test-apps/0/app-sync"
            - "/pumice_db_test_client/pmdb-test-apps/0/app-seqno"
            - "/raft_client_root_entry/0/recent-ops-wr"

  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "Verifying recipe compatibility requirements."
      include_role:
         name: common
         tasks_from: recipe_compatibility_requirement

    - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
      include_role:
        name: common
        tasks_from: get_new_client_uuid
      register: client_uuid

    - name: "Create app uuid"
      shell: "/usr/bin/uuid"
      register: app_uuid

    - name: "{{ recipe_name }}: Prepare parameter to pass across recipes"
      set_fact:
        Demo2Rncui: "{{ app_uuid.stdout }}:0:0:0:0"

    - name: "{{ recipe_name }}: Starting client {{ client_uuid.stdout }}"
      include_role:
         name: common
         tasks_from: start_client
      vars:
         ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Verify leader is viable."
      include_role:
        name: common
        tasks_from: verify_leader_viable
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Get follower-stats from leader peer before restart."
      include_role:
         name: common
         tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Capture the leader's term value for comparison."
      vars:
        stage: "leader_term"
        raft_key:
           - "/raft_root_entry/0/term"
        leader_uuid: "{{ LeaderUUID['/0/leader-uuid'] }}"
        term: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, raft_key, wantlist=True) }}"
      with_items:
        - "{{ term }}"
      register: leader_term
      debug:
        msg: "Get the term value for leader: {{ leader_uuid }}"
      no_log: true

    - name: "{{ recipe_name }}: Set election timeout to 30sec on followers first."
      vars:
        stage: "stage0_set_elec_timeout"
        cmd: "election-timeout-ms@30000"
        where: "/raft_net_info/election-timeout-ms"
        key:
         - "/raft_net_info/election-timeout-ms"
         - "/raft_root_entry/0/leader-uuid"
         - "/raft_root_entry/0/state"
         - "/raft_root_entry/0/client-requests"
      debug:
        msg:
          - "{{ lookup('niova_ctlrequest', 'apply_cmd', FollowerUUIDs[item], cmd, where, wantlist=True) }}"
          - "{{ lookup('niova_ctlrequest', 'lookup', FollowerUUIDs[item], key, wantlist=True) }}"
      loop: "{{ range(0, FollowerUUIDs | length) | list }}"

    - name: "{{ recipe_name }}: Now set election timeout to 30sec on leader."
      vars:
        stage: "stage0_set_elec_timeout_on_leader"
        cmd: "election-timeout-ms@30000"
        where: "/raft_net_info/election-timeout-ms"
        key:
         - "/raft_net_info/election-timeout-ms"
         - "/raft_root_entry/0/leader-uuid"
         - "/raft_root_entry/0/state"
         - "/raft_root_entry/0/client-requests"
        leader_uuid: "{{ LeaderUUID['/0/leader-uuid'] }}"
      debug:
        msg:
          - "{{ lookup('niova_ctlrequest', 'apply_cmd', leader_uuid, cmd, where, wantlist=True) }}"
          - "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, key, wantlist=True) }}"

    - name: "{{ recipe_name }}: Verify that election timeout set to 30sec on all peers."
      vars:
        stage: "stage0_elec_timeout"
        key:
         - "/raft_net_info/election-timeout-ms"
         - "/raft_root_entry/0/leader-uuid"
        leader_uuid: "{{ LeaderUUID['/0/leader-uuid'] }}"
      set_fact:
        demo2_leader_elect_timeout="{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, key, wantlist=True) }}"
      failed_when: >
        demo2_leader_elect_timeout["/raft_net_info/election-timeout-ms"] | string != "30000" or
        demo2_leader_elect_timeout["/0/leader-uuid"] != leader_uuid

    - name: "{{ recipe_name }}: Now lower the client request timeout to 3secs."
      vars:
        stage: "stage1_client_req_timeout"
        cmd: "default-request-timeout-sec@3"
        where: "/raft_client_root_entry/default-request-timeout-sec"
        client_timeout: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ client_timeout }}"

    - name: "{{ recipe_name }}: Write from the client with valid seqno: 0."
      vars:
         stage: "valid_seq_stage"
         cmd: "input@{{ app_uuid.stdout }}:0:0:0:0.write:0"
         where: "/pumice_db_test_client/input"
         valid_write_seq: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ valid_write_seq }}"

    - name: "{{ recipe_name }}: Wait for write completion"
      vars:
        stage: "wait-for-write-comp"
      debug:
        msg: "Waiting for write completion"
      until: (lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, '/raft_client_root_entry/0/recent-ops-wr/0/status', wantlist=True) |
              dict2items | map(attribute='value')| list | first != "null")
      retries: 3
      delay: 1

    - name: "{{ recipe_name }}: Verify the parameters for successful write operation."
      vars:
        stage: "stage2"
      set_fact:
        demo2_stage2_values: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, client_keys, wantlist=True) }}"
      failed_when: >
        (demo2_stage2_values['/0/app-user-id'] != Demo2Rncui) or
        (demo2_stage2_values['/0/status'] != "Success") or
        (demo2_stage2_values['/0/pmdb-seqno'] != 0) or
        (demo2_stage2_values['/0/pmdb-write-pending'] != False) or
        (demo2_stage2_values['/0/app-sync'] != True) or
        (demo2_stage2_values['/0/app-seqno'] != 1) or
        (demo2_stage2_values['/0/recent-ops-wr'][0]['sub-app-user-id'] != Demo2Rncui) or
        (demo2_stage2_values['/0/recent-ops-wr'][0]['status'] != "Success")


    - name: "{{ recipe_name }}: Get the number of peers needed for quorum."
      include_role:
        name: common
        tasks_from: npeers_for_basic_leader_election

    - name: "{{ recipe_name }}: Kill the number of followers to break the quorum."
      debug:
        msg:
         - "Pausing peer: {{ FollowerUUIDs[item] }}"
         - "{{ lookup('niova_raftprocess', 'kill', FollowerUUIDs[item], wantlist=True) }}"
      loop: "{{ range(0, npeers_for_leader_elect | int) | list }}"

    - name: "{{ recipe_name }}: Now issue read until read fails i.e till leader timeout occurs and it stops responding to client requests."
      vars:
        stage: "read_until_fail"
        cmd: "input@{{ app_uuid.stdout }}:0:0:0:0.read"
        where: "/pumice_db_test_client/input"
        lookup_key: "/pumice_db_test_client/pmdb-test-apps/0/status"
      debug:
        msg:
         - "Read until it fails"
         - "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, lookup_key, wantlist=True)| dict2items | map(attribute='value') | list | first }}"

      until: lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) and (lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, lookup_key, wantlist=True)| dict2items | map(attribute='value') | list | first  != "Success")
      retries: 65
      delay: 1

    - name: "{{ recipe_name }}: Get the updated list of runing peers."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Wait until leader viable=false and leader-alive-cnt=0."
      vars:
         stage: "wait_leader_viableFalse"
      debug:
        msg: "Waiting for leader viable=false and leader-alive-cnt=0"
      until: lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, '/raft_client_root_entry/0/leader-viable', wantlist=True) | dict2items | map(attribute='value') | list | first != "false"
      retries: 30
      delay: 1

    - name: "{{ recipe_name }}: Verify the client parameters after connection timeout"
      vars:
        stage: "after_conn_timeout"
        lookup_key:
          - "/raft_client_root_entry/0/leader-viable"
          - "/raft_client_root_entry/0/leader-alive-cnt"
      set_fact:
         demo2_cli_val_after_timeout: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, lookup_key, wantlist=True) }}"
      failed_when: >
        (demo2_cli_val_after_timeout['/0/leader-viable'] | bool != false) or
        (demo2_cli_val_after_timeout['/0/leader-alive-cnt'] | int != 0)

    - name: "{{ recipe_name }}: Verify leaader parameters after connection timeout."
      vars:
        stage: "verify_leader"
        leader_keys:
          - "/raft_root_entry/0/client-requests"
          - "/raft_root_entry/0/state"
          - "/raft_root_entry/0/term"
        leader_term_val: "{{ leader_term['results'][0]['item'] }}"
        leader_uuid: "{{ LeaderUUID['/0/leader-uuid'] }}"
      set_fact:
        demo2_leader_values="{{ lookup('niova_ctlrequest', 'lookup', leader_uuid, leader_keys, wantlist=True) }}"
      failed_when: >
        (demo2_leader_values["/0/client-requests"] != "deny-may-be-deposed") or
        (demo2_leader_values["/0/state"] != "leader") or
        (demo2_leader_values["/0/term"] != leader_term_val["/0/term"])

    # TestCleanup
    - name: "{{ recipe_name }}: Restart the stopped followers as part of test cleanup process."
      debug:
        msg:
         - "Resuming follower: {{ FollowerUUIDs[item] }}"
         - "{{ lookup('niova_raftprocess', 'start', FollowerUUIDs[item], wantlist=True) }}"
      loop: "{{ range(0, npeers_for_leader_elect | int) | list }}"

    - name: "{{ recipe_name }}: Resetting the election timeout on leader"
      vars:
        stage: "stage0_set_elec_timeout_on_leader"
        cmd: "election-timeout-ms@300"
        where: "/raft_net_info/election-timeout-ms"
        leader_uuid: "{{ LeaderUUID['/0/leader-uuid'] }}"
      debug:
        msg:
          - "{{ lookup('niova_ctlrequest', 'apply_cmd', leader_uuid, cmd, where, wantlist=True) }}"

    - name: "{{ recipe_name }}: Resetting the election timeout on followers"
      vars:
        stage: "stage0_set_elec_timeout_on_follower"
        cmd: "election-timeout-ms@300"
        where: "/raft_net_info/election-timeout-ms"
      debug:
        msg:
          - "{{ lookup('niova_ctlrequest', 'apply_cmd', FollowerUUIDs[item], cmd, where, wantlist=True) }}"
      loop: "{{ range(0, FollowerUUIDs | length) | list }}"

    - name: "{{ recipe_name }}: Reset the client request timeout."
      vars:
        stage: "test_cleanup_client_req_timeout"
        cmd: "default-request-timeout-sec@60"
        where: "/raft_client_root_entry/default-request-timeout-sec"
        client_timeout: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"
      debug:
         msg: "{{ client_timeout }}"

    # This was work-around as thread polls till the previous timeout completes.
    - name: "Wait for 30sec timeout to complete"
      wait_for:
        timeout: 35

    - name: "{{ recipe_name }}: After resuming the followers, new leader might have got elected."
      vars:
        stage: "test-cleanup-get-leader"
        leader_obj: "{{ lookup('niova_ctlrequest', 'lookup', FollowerUUIDs[0], '/raft_root_entry/0/leader-uuid', wantlist=True) }}"
      set_fact: demo2_new_leader_uuid="{{ leader_obj['/0/leader-uuid'] }}"

    - name: "{{ recipe_name }}: After resuming followers valiadate it's aliveness"
      include_role:
         name: common
         tasks_from: validate_followers_aliveness
      vars:
        ValLeaderUUID: "{{ demo2_new_leader_uuid }}"
      with_items:
          - 0
          - 1
          - 2
          - 3
      loop_control:
        loop_var: outer_item

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
           terminate_recipe: true
