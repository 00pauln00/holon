- import_playbook: basic_recipe_for_rangeQuery_controlplane.yml

- name: "controlplane_rangeQuery_Insertnew_key.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "RangeQuery_insert_newKey"
    parent: "basic_recipe_for_rangeQuery"

  tasks:
  - block:

    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeWrite with n as 5."
       vars:
         input_param: {
                'Operation': 'write',
                'OutfileName': 'Rangewrite_Insert_output',
                'NoofWrites': '25'
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcliwr }}"
       register: writeres5keys
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with n as 5."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'RangeRead_Insert_output',
                'NoofWrites': '25'
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: readres_existingKey
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         input_param: {
                'Key': 'Country',
                'Value': 'India',
                'Operation': 'write',
                'IP_addr': '',
                'Port': '',
                'OutfileName': 'write_output',
                'NoofWrites': '',
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcliwr }}"
       register: InsertNewKey
       no_log: true

       # check if read is successful
     - name: "{{ recipe_name }}: Check if read is successful"
       debug:
         msg: "Check if read is successful"
       failed_when: readres_existingKey['results'][0]['item']['Response']['Status'] != 0

     - name: "{{ recipe_name }}: Validate that we should not see the new key and value written with the earlier read result."
       vars:
         read_earlier: "{{ readres_existingKey['results'][0]['item']['Response']['Response'] }}"
         newKey: "{{ InsertNewKey['results'][0]['item']['Request']['Key'] }}"   
       debug:
         msg: "Validate that we should not see the newKey and value written in earlier read result"
       failed_when: read_earlier == newKey
       with_items: "{{ readres_existingKey['results'][0]['item']['Response']['Response']  | dict2items |  map(attribute='key')| list }}"

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
