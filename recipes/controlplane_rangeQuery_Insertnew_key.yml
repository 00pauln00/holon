- import_playbook: basic_recipe_for_rangeQuery_controlplane.yml

- name: "controlplane_rangeQuery_Insertnew_key.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "RangeQuery_insert_newKey"
    parent: "basic_recipe_for_rangeQuery"

  tasks:
  - block:

    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeWrite with n as 5."
       vars:
         input_param: {
                'Operation': 'write',
                'OutfileName': 'Rangewrite_output',
                'NoofWrites': '5'
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcliwr }}"
       register: writeres5keys
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with n as 5."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'RangeRead_ExistingKey',
                'NoofWrites': '5',
                'seqNo': ''
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: readres_existingKey
       no_log: true

     - name: "{{ recipe_name }}: Get the sequence no from the read result of the existing keys."
       vars:
          seq_no: "{{ readres_existingKey['results'][0]['item']['Response']['Sequence_number']}}"
       debug:
         msg: "Get the seq no"
       with_items:
           - "{{ seq_no }}"
       register: newseqNo
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         input_param: {
                'Key': 'Country',
                'Value': 'India',
                'Operation': 'write',
                'IP_addr': '',
                'Port': '',
                'OutfileName': 'write_output',
                'NoofWrites': '',
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcliwr }}"
       register: InsertNewKey
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead after writing new key."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'RangeRead_After_InsertingNewKey',
                'NoofWrites': '5',
                'seqNo': "{{newseqNo['results'][0]['item']}}"
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: readres_AfterInsertingNewKey
       no_log: true

     - name: "{{ recipe_name }}: Validate that we should not see the new key and value written with same sequence number."
       vars:
         read_earlier: "{{readres_existingKey['results'][0]['item']['Response']['Response'][item.key]}}"
         read_later: "{{readres_AfterInsertingNewKey['results'][0]['item']['Response']['Response'][item.key]}}"  
       debug:
         msg: "validate iterator with specific seq no should not include newly written value  read_earlier {{read_earlier}} and XXXXXXXXXXXXread_later {{read_later}}"
       failed_when: read_earlier != read_later
       with_dict: "{{ writeres5keys['results'][0]['item']}}"

