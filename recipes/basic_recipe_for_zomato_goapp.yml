- name: "basic_recipe_for_zomato_goapp"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "basic_recipe_for_zomato_goapp"
    parent: None
    uid: "{{ app_uuid.stdout }}:0:0:0:0" 
  tasks:
  - block:
      # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is zomato"
       vars: 
         app_type: "{{ app_type}}"
       debug:
         msg: "app_type should be zomato"
       failed_when:
         (app_type != "zomato") 

       # start the servers
     - name: "{{ recipe_name }}: Print the UUIDs of all the servers"
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Start all the servers in the cluster"
       include_role:
          name: common
          tasks_from: start_server_golang
       vars:
          ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length) | list }}"

       # start the client 
     - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
       include_role:
         name: common
         tasks_from: get_new_client_uuid
       register: client_uuid
     
     - name: "{{ recipe_name}}: Start the client for {{ app_type}} Application"
       include_role:
         name: common
         tasks_from: start_client_golang
       vars:
         ClientUUID: "{{ client_uuid.stdout }}"
  
       # generate rncui
     - name: "{{ recipe_name }}: Generate App UUID"
       shell: "/usr/bin/uuid"
       register: app_uuid
      
       # write single entry
     - name: "{{ recipe_name }}: Write the single key-value pair to ZOMATO Application"
       vars:
        stage: "ZomatoWriteOne"
        cmd: "WriteOne#{{ app_uuid.stdout }}:0:0:0:0#96627#Grill 9#Secunderabad#Biryani, Chinese, North Indian, Rolls#Very Good#85988#{{ recipe_name }}_{{ stage }}"
        WriteOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "write single entry"
       with_items:
         - "{{ WriteOneValue }}"
       register: WriteOne 

     - debug:
        msg: "{{WriteOne}}"  
     
       # check if write is successful
     - name: "{{ recipe_name }}: Check if write is successful" 
       debug:
         msg: "{{ WriteOne }}"
       failed_when: >
         (WriteOne['results'][0]['item']['status'] != 0) or
         (WriteOne['results'][0]['item']['response'][uid]['Status'] != '0')

       # read single entry   
     - name: "{{ recipe_name }}: Read value for key: 96627(Restaurant_id) from ZOMATO application"
       vars:
        stage: "ZomatoReadOne"
        cmd: "ReadOne#96627#{{ app_uuid.stdout }}:0:0:0:0#{{ recipe_name }}_{{ stage }}"
        ReadOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "read single entry"
       with_items:
         - "{{ ReadOneValue }}"
       register: ReadOne

     - name: "{{ recipe_name }}: Check if read is successful"
       debug:
        msg: "check if read is successful"   
       failed_when:
          ReadOne['results'][0]['item']['status'] != 0

       # compare read and write
     - name: "{{ recipe_name }}: Comparing read and write"
       vars:
        OldLeader_rdrqst: "{{ ReadOne['results'][0]['item']['response'][uid] }}"
       debug:
        msg: "compare read and write"
       failed_when: >
         (OldLeader_rdrqst['Restaurant_id'] != "96627") or
         (OldLeader_rdrqst['Restaurant_name'] != "Grill 9") or
         (OldLeader_rdrqst['city'] != "Secunderabad") or
         (OldLeader_rdrqst['cuisines'] != "Biryani, Chinese, North Indian, Rolls") or
         (OldLeader_rdrqst['ratings_text'] != "Very Good") or
         (OldLeader_rdrqst['votes'] != "85988") 
      
       # Get the path for csv file
     - name: "{{ recipe_name }}: Get the path for csv file"
       set_fact:
        NIOVA_BIN_PATH: "{{ lookup('env','NIOVA_BIN_PATH') }}"

       # write multiple entries
     - name: "{{ recipe_name }}: Write all entries from csv file to ZOMATO application"
       vars:
         stage: "ZomatoWriteMulti"
         cmd: "WriteMulti#{{ NIOVA_BIN_PATH }}/zomatodata.csv#{{ recipe_name }}_{{ stage }}"
         WriteMultiValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "write all entries"
       with_items:
         - "{{ WriteMultiValue }}"
       register: WriteMulti
       no_log: True

        # read multiple entries
     - name: "{{ recipe_name }}: Read multiple entries to the ZOMATO application through csv file"
       vars:
        stage: "ZomatoReadMulti"
        cmd: "ReadMulti#{{ recipe_name }}_{{ stage }}"
        ReadMultiValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "read all entries"
       with_items:
         - "{{ ReadMultiValue }}"
       register: ReadMulti  
       no_log: True
     
       # get leader
     - name: "{{ recipe_name}}: Get Leader UUID"
       vars:
         stage: 'getLeader'
         cmd: "get_leader#{{ recipe_name }}_{{ stage }}"
         getLeader_values: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "Get the Leader UUID "
       with_items:
         - "{{ getLeader_values }}"
       register: OldLeaderUUID

       # pause the leader
     - name: "{{ recipe_name }}: Pause  leader process."
       debug:
        msg: "Pausing leader process {{ lookup('niova_raftprocess', 'pause', OldLeaderUUID['results'][0]['item']['response'], wantlist=True) }}"
        
     - name: "{{ recipe_name }}: Printing the list of all server"
       include_role:
          name: common
          tasks_from: get_server_uuid_info  

       # verify new leader is elected
     - name: "{{ recipe_name }}: Verify new leader is elected successfully"
       include_role:
         name: common
         tasks_from: verify_new_leader_election 
       vars:
         old_leader: "{{OldLeaderUUID['results'][0]['item']['response'] }}"
         peer_list: "{{ NRunningPeers }}"
       loop: "{{ range(0, peer_list | length) | list }}"
       loop_control:
          loop_var: itr
       
       # get new leader
     - name: "{{ recipe_name }}: Get new leader uuid value"
       vars:
        stage: "getLeaderNew"
        cmd: "get_leader#{{ recipe_name }}_{{ stage }}"
        getNewLeader_values: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "Get the new Leader UUID"
       with_items:
         - "{{ getNewLeader_values }}"
       register: NewLeaderUUID
      
      # check if new leader is elected
     - name: "{{ recipe_name }}: Check if new leader is elected"
       debug:
        msg: "Old leader : {{ OldLeaderUUID }} and New leader : {{ NewLeaderUUID }}"
       failed_when: OldLeaderUUID == NewLeaderUUID

        # read single entry        
     - name: "{{ recipe_name }}: Read single entry to the ZOMATO application"
       vars:
        stage: "ZomatoReadTwo"
        cmd: "ReadOne#96627#{{ app_uuid.stdout }}:0:0:0:0#{{ recipe_name }}_{{ stage }}"
        ReadOneNewValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "read single entry"
       with_items:
         - "{{ ReadOneNewValue }}"
       register: ReadOneNew

        # comparing read entry of old and new leader 
     - name: "{{ recipe_name }}: Comparing read single entry of the golang app form json output file "
       vars:
        uid: "{{ app_uuid.stdout }}:0:0:0:0"
        prev_val: "{{ ReadOne['results'][0]['item']['response'][uid] }}"
        NewLeader_rdreqst: "{{ ReadOneNew['results'][0]['item']['response'][uid] }}"
       debug:
        msg: "Compare read request of old and new leader"
       failed_when: >
         (NewLeader_rdreqst['Restaurant_id'] != prev_val['Restaurant_id']) or
         (NewLeader_rdreqst['Restaurant_name'] != prev_val['Restaurant_name']) or
         (NewLeader_rdreqst['city'] !=  prev_val['city']) or
         (NewLeader_rdreqst['cuisines'] !=  prev_val['cuisines']) or
         (NewLeader_rdreqst['ratings_text'] !=  prev_val['ratings_text']) or
         (NewLeader_rdreqst['votes'] <= prev_val['votes'])
         

       # generate rncui                                             
     - name: "{{ recipe_name }}: Generate App UUID"
       shell: "/usr/bin/uuid"
       register: app_uuid_new

      # write single entry
     - name: "{{ recipe_name }}: Write single key-value pair to ZOMATO Application"
       vars:
        stage: "ZomatoWriteTwo"   
        cmd: "WriteOne#{{ app_uuid_new.stdout }}:0:0:0:0#2500256#Indiana Veg Restaurant#Aurangabad#North Indian, Chinese, Fast Food#Very Good#323#{{ recipe_name }}_{{ stage }}"
        WriteOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "write single entry"
       with_items:
         - "{{ WriteOneValue }}"
       register: WriteOne

       # check if write is successfull
     - name: "{{ recipe_name }}: Check if write is successful"
       vars:
         uid: "{{ app_uuid_new.stdout }}:0:0:0:0"
       debug:
         msg: "{{ WriteOne }}"
       failed_when: >
         (WriteOne['results'][0]['item']['status'] != 0) or
         (WriteOne['results'][0]['item']['response'][uid]['Status'] != '0')
      
       # read single entry
     - name: "{{ recipe_name }}: Read value for key: 2500256(Restaurant_id) from ZOMATO application"
       vars:
        stage: "ZomatoReadThree"
        cmd: "ReadOne#2500256#{{ app_uuid_new.stdout }}:0:0:0:0#{{ recipe_name }}_{{ stage }}"
        ReadOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "Read single entry "
       with_items:
         - "{{ ReadOneValue }}"
       register: ReadOne
       no_log: True

        # comparing read entry
     - name: "{{ recipe_name }}: Comparing read single entry of the COVID Application form json output"
       vars:
        uid: "{{ app_uuid_new.stdout }}:0:0:0:0"
        Readrequest: "{{ ReadOne['results'][0]['item']['response'][uid] }}"
       debug:
        msg: "Compare read and write"
       failed_when: >
         (Readrequest['Restaurant_id'] != "2500256") or
         (Readrequest['Restaurant_name'] != "Indiana Veg Restaurant") or
         (Readrequest['city'] != "Aurangabad") or
         (Readrequest['cuisines'] != "North Indian, Chinese, Fast Food") or
         (Readrequest['ratings_text'] != "Very Good") or
         (Readrequest['votes'] != "646")    
