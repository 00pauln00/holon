- import_playbook: basic_leader_election2.yml
- name: "Peer Recovery Interrupted Long Enough"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "peer_recovery_interrupted_long_enough"
     parent: "basic_leader_election2"
     pri_num_writes: 1400
     no_of_app_uuids: 5
     raft_root_entry_keys:
              - "/raft_root_entry/0/leader-uuid"
              - "/raft_root_entry/0/term"
              - "/raft_root_entry/0/commit-idx"
              - "/raft_root_entry/0/lowest-idx"
              - "/raft_root_entry/0/checkpoint-idx"
              - "/raft_net_info/max-scan-entries"
              - "/raft_net_info/log-reap-factor"
  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Start 4th peer."
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{  NonRunningServers[0]  }}"

    - name: "{{ recipe_name }}: Get the latest list of running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Apply fault injection on all peers i.e. 1, 2 and 3."
      include_role:
        name: common
        tasks_from: set_fault_injection_and_verify
      vars:
        ServerUUID: "{{ NRunningPeers[item] }}"
        fault_injection_name: "raft_force_set_max_scan_entries"
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Set max-scan-entries on all peers."
      vars:
        stage: "setMaxScanEntriesOnAll"
        cmd: "max-scan-entries@1000"
        where: "/raft_net_info/max-scan-entries"
        key: "/raft_net_info/max-scan-entries"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Set log-reap-factor on all peers."
      vars:
        stage: "setLRPOnAll"
        cmd: "log-reap-factor@2"
        where: "/raft_net_info/log-reap-factor"
        key: "/raft_net_info/log-reap-factor"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Verify max-scan-entries and log-reap-factor on all peers."
      vars:
         stage: "verifyMSEandLRPOnAll"
         getVal: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Verify max-scan-entries and log-reap-factor are set properly on all peers."
      failed_when: >
           (getVal["/raft_net_info/max-scan-entries"] != 1000) or
           (getVal["/raft_net_info/log-reap-factor"] != 2)
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
      include_role:
        name: common
        tasks_from: get_new_client_uuid
      register: client_uuid

    - debug:
        msg: "Client UUID: {{ client_uuid }}"

    - name: "{{ recipe_name }}: Start client process"
      include_role:
        name: common
        tasks_from: start_client
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Verify leader is viable."
      include_role:
        name: common
        tasks_from: verify_leader_viable
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

      #Create set of required number of app_uuids.
    - name: "Get set of required number of app_uuids."
      include_role:
        name: common
        tasks_from: create_app_uuid_set
      vars:
        number_of_apps: "{{no_of_app_uuids}}"

    #Perform write operations.
    - name: "Perform write operations."
      include_role:
         name: common
         tasks_from: perform_writes
      vars:
        pmdb_apps: "{{ pmdb_app_uuids  }}"
        ClientUUID: "{{ client_uuid.stdout }}"
        constant_number_of_writes: "{{ pri_num_writes }}"

    - name: "{{ recipe_name}}: Wait until all write completes from client"
      vars:
        stage: "wait_for_write_op"
      debug:
        msg: "Waiting for client to finish writing"
      until: lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, '/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno', wantlist=True) | dict2items | map(attribute='value') | list | first == (pri_num_writes - 1)
      retries: 500
      delay: 1

    #Verify client parameters after successful write operations.
    - name: "{{ recipe_name }}: Verify client parameters."
      include_role:
        name: common
        tasks_from: verify_client_parameters
      vars:
        Client_UUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Get the latest list of running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get the leader and follower uuids."
      include_role:
         name: common
         tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Kill the leader."
      debug:
        msg:  "{{ lookup('niova_raftprocess', 'kill', LeaderUUID['/0/leader-uuid'], wantlist=True) }}"

    - name: "{{ recipe_name }}: Wait until leader election happens."
      include_role:
        name: common
        tasks_from: wait_until_leader_election

      #Store previous leader.
    - name: "{{ recipe_name }}: Store previous leader uuid."
      vars:
        prv_ldr: "{{ LeaderUUID['/0/leader-uuid'] }}"
      debug:
        msg: "Store previous leader."
      with_items:
          - "{{ prv_ldr }}"
      register: prev_leader

    - name: "{{ recipe_name }}: Get the latest list of running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get the values for raft-root-entry."
      vars:
        stage: "stage1_get_all"
        peer_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Get the raft values for running peers"
          #   no_log: true
      with_items:
       - "{{ peer_values }}"
      register: stage1_values

    - name: "{{ recipe_name }}: Verify commit-idx gets updated on all peers after first write operation."
      vars:
         getAll: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], raft_root_entry_keys, wantlist=True) }}"
         stage: "Get_commit_idx"
      debug:
        msg: "Verify all values on all peers."
      failed_when: getAll["/0/commit-idx"] != (pri_num_writes | int) * (no_of_app_uuids | int) + 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

      #Create set of required number of app_uuids.
    - name: "Get set of required number of app_uuids."
      include_role:
        name: common
        tasks_from: create_app_uuid_set
      vars:
        number_of_apps: "{{no_of_app_uuids}}"

    #Perform write operations.
    - name: "Perform write operations."
      include_role:
         name: common
         tasks_from: perform_writes
      vars:
        pmdb_apps: "{{ pmdb_app_uuids  }}"
        ClientUUID: "{{ client_uuid.stdout }}"
        constant_number_of_writes: "{{ pri_num_writes }}"

    - name: "{{ recipe_name}}: Wait until all write completes from client"
      vars:
        stage: "wait_for_write_op"
      debug:
        msg: "Waiting for client to finish writing"
      until: lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, '/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno', wantlist=True) | dict2items | map(attribute='value') | list | first == (pri_num_writes - 1)
      retries: 500
      delay: 1

    - name: "{{ recipe_name }}: Get the values for raft-root-entry."
      vars:
         stage: "stage2_get_all"
         peer_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Get the raft values for running peers"
          #      no_log: true
      with_items:
       - "{{ peer_values }}"
      register: stage2_values

    - name: "{{ recipe_name }}: Verify commit-idx on all peers after 2nd write operation"
      vars:
         initial_vals: "{{ stage1_values['results'][0]['item']}}"
         stage: "Get_commit_idx_after2nd_write"
         getAll: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Verify all values on all peers."
      failed_when: >
           (getAll["/0/commit-idx"] != (pri_num_writes | int) * (no_of_app_uuids | int) + initial_vals["/0/commit-idx"])
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Get commit-idx values of all peers."
      vars:
        stage: "get_cm_idx_all"
        cmidx: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, '/raft_root_entry/0/commit-idx', wantlist=True) }}"
      debug:
         msg: "Getting commit-idx for all servers."
      no_log: true
      with_items:
         - "{{ cmidx }}"
      register: commit_idx_all

    - name: "{{ recipe_name }}: Compare commit-idx values of all peers."
      vars:
        commit_idx: "{{ commit_idx_all['results'][item]['item']['/0/commit-idx'] }}"
        commit_idx_next: "{{ commit_idx_all['results'][item +1]['item']['/0/commit-idx'] }}"
      debug:
        msg: "Compare commit-idx values of all peers."
      failed_when: commit_idx != commit_idx_next
      loop: "{{ range(0, NRunningPeers | length-1) | list }}"

    - name: "{{ recipe_name }}: Check for checkpoint-idx."
      vars:
        chkp_idx: "{{ stage2_values['results'][item]['item']['/0/checkpoint-idx'] }}"
      debug:
        msg: "Check for checkpoint-idx."
      failed_when: chkp_idx | int == -1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Check if lowest index is increasing."
      vars:
        prev_lowest_idx: "{{ stage1_values['results'][item]['item']['/0/lowest-idx'] }}"
        next_lowest_idx: "{{ stage2_values['results'][item]['item']['/0/lowest-idx'] }}"
      debug:
        msg: "Check if lowest index is increasing."
      failed_when: prev_lowest_idx == next_lowest_idx
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    #recipe-cleanup.
    - name: "{{ recipe_name }}: Start previous leader."
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ prev_leader['results'][0]['item'] }}"

    rescue:
      - name: "Recipe failed"
        set_fact:
          terminate_recipe: true

