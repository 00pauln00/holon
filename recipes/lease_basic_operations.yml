- name: "basic_lease_operation_all"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "basic_lease_operation_all"
     parent: None

  tasks:
  - block:
    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "lease")

    - name: "{{ recipe_name }}: Get the non-running peers list to select first peer to start"
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "Start 5 peers in the cluster"
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ NonRunningServers[item] }}"
      loop: "{{ range(0, NonRunningServers | length) | list }}"

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Wait until leader election happens."
      vars:
         stage: "wait_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != "null"
      retries: 10
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Get the raft values for all running peers"
      vars:
         stage: "stage0_get_all"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/leader-time"
         peers_val: "{{ lookup('niova_ctlrequest', 'lookup', LeaderUUID['/0/leader-uuid'], raft_keys, wantlist=True) }}"
      debug:
        msg: "Getting stats for all running peers: {{ peers_val }}"
      #no_log: true
      with_items:
         - "{{ peers_val }}"
      register: stage0_peers_vals

    - name: Generate new resource
      shell: "/usr/bin/uuid"
      register: resourceUUID

    - name: Generate new client
      shell: "/usr/bin/uuid"
      register: clientUUID

    - name: "{{ recipe_name }}: Perform 'get_lease' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'get_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'GET', input_param, wantlist=True) }}"
      debug:
         msg: "get lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: getLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ getLease['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (getLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if write is successful."
       vars:
         wrstatus: "{{ getLease['results'][0]['item']['output_data']['Response']['Status'] }}"
         operation: "{{ getLease['results'][0]['item']['output_data']['Request']['Operation'] }}"
         client: "{{ getLease['results'][0]['item']['output_data']['Response']['client'] }}"
         resource: "{{ getLease['results'][0]['item']['output_data']['Response']['resource'] }}"
       debug:
         msg: "Check if write is successful."
       failed_when: >
         (operation != "write_lease") or
         (client != clientUUID.stdout) or
         (resource != resourceUUID.stdout) or
         (wrstatus != "Success")

    - name: "{{ recipe_name }}: Compare TS after write_lease."
      vars:
        timestamp: "{{ getLease['results'][0]['item']['output_data']['Response']['timestamp'] }}"
      debug:
        msg: "compare TS with intitial values"
      failed_when: >
        ((timestamp | string | split('.') | first) != stage0_peers_vals['results'][0]['item']['/0/term']) or
        ((timestamp | string | split('.') | last) != stage0_peers_vals['results'][0]['item']['/0/leader-time'])

    - name: "{{ recipe_name }}: Perform 'lookup_lease' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'lookup_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: lookupLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ lookupLease['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (lookupLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if read is successful."
       vars:
         rdstatus: "{{ lookupLease['results'][0]['item']['output_data']['Response']['Status'] }}"
         operation: "{{ lookupLease['results'][0]['item']['output_data']['Request']['Operation'] }}"
         client: "{{ lookupLease['results'][0]['item']['output_data']['Response']['client'] }}"
         resource: "{{ lookupLease['results'][0]['item']['output_data']['Response']['resource'] }}"
       debug:
         msg: "Check if read is successful."
       failed_when: >
         (operation != "read_lease") or
         (client != clientUUID.stdout) or
         (resource != resourceUUID.stdout) or
         (rdstatus != "Success")

    - name: "{{ recipe_name }}: Compare TTL"
      vars:
        wr_ttl: "{{ getLease['results'][0]['item']['output_data']['Response']['TTL'] }}"
        rd_ttl: "{{ lookupLease['results'][0]['item']['output_data']['Response']['TTL'] }}"
      debug:
        msg: "Compare TTL"
      failed_when: >
        (rd_ttl >= wr_ttl)

    - name: "{{ recipe_name }}: Kill the Leader."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'kill', orig_leader['results'][0]['item'], wantlist=True) }}"

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Again wait until new leader election happens."
      vars:
         stage: "wait_for_new_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != "null"
      retries: 10
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Perform 'lookup_lease' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'lookup_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: aftrLeaderKillLookupLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ aftrLeaderKillLookupLease['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (aftrLeaderKillLookupLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Compare TS and TTL"
      vars:
        wr_ttl: "{{ getLease['results'][0]['item']['output_data']['Response'] }}"
        rd_ttl: "{{ aftrLeaderKillLookupLease['results'][0]['item']['output_data']['Response'] }}"
      debug:
        msg: "Compare TTL"
      failed_when: >
        (rd_ttl['timestamp'] == wr_ttl['timestamp']) or
        (rd_ttl['TTL'] == wr_ttl['TTL'])

   rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true

