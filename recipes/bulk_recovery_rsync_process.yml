- import_playbook: basic_leader_election2.yml
- name: "Bulk Recovery rsync implementation"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "bulk_recovery_rsync_implementation"
     parent: "basic_leader_election2"
     num_writes: 3000
     number_of_app_uuids: 2
     raft_root_entry_keys:
              - "/raft_root_entry/0/leader-uuid"
              - "/raft_root_entry/0/term"
              - "/raft_root_entry/0/commit-idx"
              - "/raft_root_entry/0/lowest-idx"
              - "/raft_root_entry/0/checkpoint-idx"
              - "/raft_net_info/max-scan-entries"
              - "/raft_net_info/log-reap-factor"

  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Get the updated list of running peers"
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get the leader and follower uuids."
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Apply fault injection on all peers i.e. 1, 2 and 3."
      include_role:
        name: common
        tasks_from: set_fault_injection_and_verify
      vars:
        ServerUUID: "{{ NRunningPeers[item] }}"
        fault_injection_name: "raft_force_set_max_scan_entries"
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Set max-scan-entries on all peers."
      vars:
        stage: "setMaxScanEntriesOnAll"
        cmd: "max-scan-entries@1000"
        where: "/raft_net_info/max-scan-entries"
        key: "/raft_net_info/max-scan-entries"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Set log-reap-factor on all peers."
      vars:
        stage: "setLRPOnAll"
        cmd: "log-reap-factor@2"
        where: "/raft_net_info/log-reap-factor"
        key: "/raft_net_info/log-reap-factor"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Verify max-scan-entries and log-reap-factor on all peers."
      vars:
         stage: "verifyMSEandLRPOnAll"
         getVal: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Verify max-scan-entries and log-reap-factor are set properly on all peers."
      failed_when: >
           (getVal["/raft_net_info/max-scan-entries"] != 1000) or
           (getVal["/raft_net_info/log-reap-factor"] != 2)
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Store the UUID for peer4 which needs to be started."
      vars:
        peer4: "{{ NonRunningServers[0] }}"
      debug:
        msg: "Get the new peer to start: {{ peer4 }}"
      with_items:
        - "{{ peer4 }}"
      register: newlyStartedPeer4

    - debug:
        msg: "{{ newlyStartedPeer4['results'][0]['item'] }}"
     
    - name: "{{ recipe_name }}: Get Commit index value from NRunningPeers servers."
      vars:
        stage: "get_root_entry_values"
        peer_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_root_entry_keys, wantlist=true) }}"
      debug:
        msg: "{{ peer_values }} "
      with_items:
        - "{{ peer_values }}"
      register: running_peers_info

    - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
      include_role:
        name: common
        tasks_from: get_new_client_uuid
      register: client_uuid

    - debug:
        msg: "Client UUID: {{ client_uuid }}"

    - name: "{{ recipe_name }}: Generate App UUID"
      shell: "/usr/bin/uuid"
      register: app_uuid

    - name: "{{ recipe_name }}: Start client process"
      include_role:
        name: common
        tasks_from: start_client
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Verify leader is viable."
      include_role:
        name: common
        tasks_from: verify_leader_viable
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

     #Create set of required number of app_uuids.
    - name: "Get set of required number of app_uuids."
      include_role:
        name: common
        tasks_from: create_app_uuid_set
      vars:
        number_of_apps: "{{number_of_app_uuids}}"

    #Perform write operations.
    - name: "Perform write operations for multiple clients."
      include_role:
         name: common
         tasks_from: perform_writes
      vars:
        pmdb_apps: "{{ pmdb_app_uuids }}"
        ClientUUID: "{{ client_uuid.stdout }}"
        constant_number_of_writes: "{{ num_writes }}"

    - name: "{{ recipe_name}}: Wait until all write completes from client"
      vars:
        stage: "wait_for_write_op"
      debug:
        msg: "Waiting for client to finish writing"
      until: lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, '/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno', wantlist=True) | dict2items | map(attribute='value') | list | first == (num_writes - 1)
      retries: 5000
      delay: 1

    - name: "{{ recipe_name }}: Verify checkpoint-idx, lowest-idx gets changed on all 3 peers after write operation."
      vars:
         stage: "verifyCPOnAll"
         getCPOnAll: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Verify checkpoint-idx gets changed on all peers."
      failed_when: >
           (getCPOnAll["/0/checkpoint-idx"] == -1) or
           (getCPOnAll["/0/lowest-idx"] == -1)
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    #Apply fault injection on peer4 for limiting bandwidth_limit.
    - name: "{{ recipe_name }}: Set fault injection {{ fault_injection_name }} on peer4."
      vars:
        stage: "fault_injection"
        cmd: "enabled@true"
        copy_to: "init"
        wait_for_ofile: False
        fault_injection_name: "raft_limit_rsync_bw"
        where: "/fault_injection_points/name@{{ fault_injection_name }}"
      set_fact:
         fault_injection: "{{ lookup('niova_ctlrequest', 'apply_cmd', newlyStartedPeer4['results'][0]['item'], cmd, where, wantlist=True) }}"

    - name: "{{ recipe_name }}: Start new peer with empty DB."
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ newlyStartedPeer4['results'][0]['item'] }}"

    - name: "{{ recipe_name }}: Get the updated list of running peers"
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Apply fault injection on newly started peer."
      include_role:
        name: common
        tasks_from: set_fault_injection_and_verify
      vars:
        ServerUUID: "{{ newlyStartedPeer4['results'][0]['item'] }}"
        fault_injection_name: "raft_force_set_max_scan_entries"

    - name: "{{ recipe_name }}: Set max-scan-entries on newly started peer."
      vars:
        stage: "setMaxScanEntriesOnAll"
        cmd: "max-scan-entries@1000"
        where: "/raft_net_info/max-scan-entries"
        key: "/raft_net_info/max-scan-entries"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', newlyStartedPeer4['results'][0]['item'], cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Set log-reap-factor on newly started peer."
      vars:
        stage: "setLRPOnAll"
        cmd: "log-reap-factor@2"
        where: "/raft_net_info/log-reap-factor"
        key: "/raft_net_info/log-reap-factor"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', newlyStartedPeer4['results'][0]['item'], cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Verify max-scan-entries and log-reap-factor on newly started peer."
      vars:
         stage: "verifyMSEandLRPOnAll"
         getVal: "{{ lookup('niova_ctlrequest', 'lookup', newlyStartedPeer4['results'][0]['item'], raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Verify max-scan-entries and log-reap-factor are set properly on newly started peer."
      failed_when: >
           (getVal["/raft_net_info/max-scan-entries"] != 1000) or
           (getVal["/raft_net_info/log-reap-factor"] != 2)

    - name: "{{ recipe_name }}: Kill the child processes of peer4"
      debug:
        msg: "Get peer4 child process {{ lookup('niova_raftprocess', 'kill_child', newlyStartedPeer4['results'][0]['item'], wantlist=True) }}"
      loop: "{{ range(0, 200) }}"

     #Remove fault injection on peer4.
    - name: "{{ recipe_name }}: Remove fault injection {{ fault_injection_name }} on peer4."
      vars:
        stage: "remove_fault_injection_peer4"
        cmd: "enabled@false"
        where: "/fault_injection_points/name@raft_limit_rsync_bw"
        remove_fault_inject: "{{ lookup('niova_ctlrequest', 'apply_cmd', newlyStartedPeer4['results'][0]['item'], cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ remove_fault_inject }}"
      no_log: True

    - name: "{{ recipe_name }}: Get list of fault-injections."
      vars:
        stage: "fault_injection_check"
        raft_keys:
          - "/fault_injection_points"
      set_fact:
        fault_injection_points: "{{ lookup('niova_ctlrequest', 'lookup', newlyStartedPeer4['results'][0]['item'], raft_keys, wantlist=True) }}"

    - name: "{{ recipe_name }}: Get fault_injection_point_enabled for peer4."
      vars:
         fault_injection_name: "raft_limit_rsync_bw"
      set_fact:
         fault_injection_point_enabled: "{{ fault_injection_points['//fault_injection_points'][index]['enabled'] }}"
      when: (fault_injection_points['//fault_injection_points'][index]['name'] == fault_injection_name)
      loop: "{{  range(0, fault_injection_points['//fault_injection_points'] |length) | list }}"
      loop_control:
          loop_var: index

    - name: "{{ recipe_name }}: Verify fault injection is removed from peer4."
      debug:
        msg: "{{ fault_injection_point_enabled }}"
      no_log: True
      failed_when: fault_injection_point_enabled != False

    - name: "{{ recipe_name }}: Verify commit-idx gets incremented on newly started peer."
      vars:
         origCI: "{{ running_peers_info['results'][0]['item']['/0/commit-idx'] }}"
         stage: "getRootValuesFrmPeer4"
      debug:
        msg: "Verify Commit-Idx get incrementing on peer 4."
      until: lookup('niova_ctlrequest', 'lookup', newlyStartedPeer4['results'][0]['item'], '/raft_root_entry/0/commit-idx', wantlist=True) | dict2items | map(attribute='value') | list | first == ((num_writes | int) * (number_of_app_uuids | int)) + (origCI | int)
      retries: 100
      delay: 1

    - name: "{{ recipe_name }}: Verify checkpoint-idx and lowest-idx gets changed on newly started peer after write operation."
      vars:
         stage: "verifyCPOnPeer4"
         getCPOnPeer4: "{{ lookup('niova_ctlrequest', 'lookup', newlyStartedPeer4['results'][0]['item'], raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Verify checkpoint-idx gets changed on peer 4."
      failed_when: >
           (getCPOnPeer4["/0/checkpoint-idx"] == -1) or
           (getCPOnPeer4["/0/lowest-idx"] == -1)

    # Check raft values on peer4.
    - name: "{{ recipe_name }}: Get raft root  values of newlyStartedPeer4."
      vars:
        stage: "get_root_entry_values_after_starting_peer4"
        peer_values: "{{ lookup('niova_ctlrequest', 'lookup', newlyStartedPeer4['results'][0]['item'], raft_root_entry_keys, wantlist=true) }}"
      debug:
        msg: "{{ peer_values }} "
      with_items:
        - "{{ peer_values }}"
      register: newlyStartedPeer4_info
      no_log: true

    - name: "{{ recipe_name }}: Get Commit index value from NRunningPeers servers."
      vars:
        stage: "get_root_entry_values_after_starting-peer4"
        peer_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_root_entry_keys, wantlist=true) }}" 
      debug:
        msg: "{{ peer_values }} "
      with_items:
        - "{{ peer_values }}"
      register: running_peers_info_after_rsync
      no_log: true

      # Check if all peers have same commit index
    - name: "{{ recipe_name }}: Verify commit-idx, term and leader-uuid remains same on all peers ."
      vars:
        stage: "verify_commit_term"
        raft_keys:
          - "/raft_root_entry/0/commit-idx"
          - "/raft_root_entry/0/term"
          - "/raft_root_entry/0/leader-uuid"
        peer_info: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
        msg: " Verify commit-idx, term and leader-uuid remains same on all peers "
      failed_when: >
          (peer_info[itr]['/0/commit-idx'] != peer_info[itr+1]['/0/commit-idx']) or
          (peer_info[itr]['/0/term'] != peer_info[itr+1]['/0/term']) or
          (peer_info[itr]['/0/leader-uuid'] != peer_info[itr+1]['/0/leader-uuid'])
      loop: "{{ range(0, NRunningPeers | length - 1)| list }}"
      loop_control:
        loop_var: itr

    - name: "{{ recipe_name }}: Apply cmd to remove fault injection from all peers."
      vars:
        stage: "recipe_cleanup"
        cmd: "enabled@false"
        where: "/fault_injection_points/name@raft_force_set_max_scan_entries"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Reset default max-scan-entries on all peers."
      vars:
        stage: "resetMaxScanEntriesOnAll"
        cmd: "max-scan-entries@100000"
        where: "/raft_net_info/max-scan-entries"
        key: "/raft_net_info/max-scan-entries"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Reset default log-reap-factor on all peers."
      vars:
        stage: "resetLRPOnAll"
        cmd: "log-reap-factor@5"
        where: "/raft_net_info/log-reap-factor"
        key: "/raft_net_info/log-reap-factor"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
