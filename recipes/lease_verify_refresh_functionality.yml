- import_playbook: lease_basic_operations.yml

- name: "lease_verify_refresh_functionality"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "lease_verify_refresh_functionality"
    parent: "lease_basic_operations"


  tasks:
  - block:
    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: "{{ recipe_name }}: Perform 'LOOKUP' operation, for the GET operation performed in parent recipe."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'lookup_lease_before_refresh_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: lookupLease_before_refresh

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ lookupLease_before_refresh['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (lookupLease_before_refresh['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if LOOKUP before REFRESH operation is successful."
      vars:
         rd_response: "{{ lookupLease_before_refresh['results'][0]['item']['output_data']['Response'] }}"
         operation: "{{ lookupLease_before_refresh['results'][0]['item']['output_data']['Request'] }}"
      debug:
         msg: "Check if lookup is successful."
      failed_when: >
         (operation['Operation'] != "LOOKUP") or
         (rd_response['Client'] != clientUUID.stdout) or
         (rd_response['Resource'] != resourceUUID.stdout) or
         (rd_response['Status'] != 0)

    - name: "{{ recipe_name }}: Pause for 20 seconds so that TTL value gets changed."
      pause:
        seconds: 20

    - name: "{{ recipe_name }}: Perform 'REFRESH' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'refresh_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'REFRESH', input_param, wantlist=True) }}"
      debug:
         msg: "refresh lease"
      with_items:
          - "{{ leaseApp }}"
      register: refreshLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ refreshLease['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (refreshLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if REFRESH is successful."
      vars:
         rf_response: "{{ lookupLease['results'][0]['item']['output_data']['Response'] }}"
         operation: "{{ lookupLease['results'][0]['item']['output_data']['Request'] }}"
      debug:
         msg: "Check if refresh is successful."
      failed_when: >
        (operation['Operation'] != "REFRESH") or
         (rf_response['Status'] != 0)

    - name: "{{ recipe_name }}: Perform 'LOOKUP' operation again after refreshing the lease."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'lookup_lease_after_refresh_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: lookupLease_after_refresh

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ lookupLease_after_refresh['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (lookupLease_after_refresh['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if LOOKUP is successful."
      vars:
         rd_response: "{{ lookupLease['results'][0]['item']['output_data']['Response'] }}"
         operation: "{{ lookupLease['results'][0]['item']['output_data']['Request'] }}"
      debug:
         msg: "Check if lookup is successful."
      failed_when: >
         (operation['Operation'] != "LOOKUP") or
         (rd_response['Client'] != clientUUID.stdout) or
         (rd_response['Resource'] != resourceUUID.stdout) or
         (rd_response['Status'] != 0)

    - name: "{{ recipe_name }}: Compare values of lookup before performing refresh and after performing refresh."
      vars:
        leaseValues_before: "{{ lookupLease_before_refresh['results'][0]['item']['output_data']['Response'] }}"
        leaseValues_after: "{{ lookupLease_after_refresh['results'][0]['item']['output_data']['Response'] }}"
      debug:
        msg: "Check the value of TTL should be increased than the previous lookup as refresh operation is performed"
      failed_when: >
        ( leaseValues_after['TTL'] <= leaseValues_before['TTL'] + 60 ) or 
        ( leaseValues_after['TimeStamp'] <= leaseValues_before['TimeStamp'] ) or 
        ( leaseValues_after['Client'] != leaseValues_before['Client'] ) or
        ( leaseValues_after['Resource'] != leaseValues_before['Resource'] )
