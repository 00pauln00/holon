- name: "gc_space_utilization"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "gc_space_utilization"
     parent: None
     chunks: [1, 2]

  tasks:
  - block:
    - name: "{{ recipe_name }}: Create 1.5GB Partition"
      debug:
        msg: "{{ lookup('helper', 'create_partition', wantlist=True) }}"

    - name: "{{ recipe_name }}: Start minio server"
      vars:
        s3_dir: "/local/minio_data"
      debug:
         msg:
          - "{{ lookup('obj_storage', 'minio', 'start', s3_dir, wantlist=True) }}"
      when: s3Support == "true"

    - name: "{{ recipe_name }}: Start GCService"
      vars:
        params: {
          "dry_run": false,
          "del_dbo": true,
          "partition": true,
          "total_chunks": 2,
          "force_gc": false,
        }
      debug:
         msg:
          - "{{ lookup('garbage_collection', 'daemon', 'start', params, wantlist=True) }}"

    - name: "{{ recipe_name }}: pause for 5 seconds."
      pause:
        seconds: 5

    - name: "Get the json path"
      set_fact:
        base_dir="{{ recipe_params['base_dir']}}"
        raft_uuid="{{ recipe_params['raft_uuid']}}"

    - name: "prepare path to read recipe JSON file"
      shell: cat "{{base_dir}}"/"{{raft_uuid}}"/"{{raft_uuid}}".json
      register: result

    - name: "Convert output to JSON format"
      set_fact:
        jsondata: "{{ result.stdout | from_json | default({}) }}"

    - name: "{{ recipe_name }}: Get the GC Service process pid and status."
      set_fact:
        gc_process_pid: "{{ jsondata.gcService_process.process_pid | default('') }}"
        gc_process_status: "{{ jsondata.gcService_process.process_status | default('') }}"
      when: jsondata.gcService_process is defined

    - name: "{{ recipe_name }}: pause the GC process."
      vars:
        params: {
          "pid" : "{{ gc_process_pid | int }}"
        }
      debug:
        msg: "{{ lookup('garbage_collection', 'daemon', 'pause', params, wantlist=True) }}"

    - name: "{{ recipe_name }}: Create 1.5GB file"
      vars:
        img_file: "gc/gc_download/file.img"
        bs: "64M"
        count: 25
      debug:
        msg: "{{ lookup('helper', 'create_dd_file', img_file, bs, count, wantlist=True) }}"

    - name: "{{ recipe_name }}: generate data for 2 chunks parallely"
      vars:
        dgen_args: {
                  "chunk": "1",
                  "maxPunches": "1024",
                  "maxVblks": "2097152",
                  "punchAmount": "6000",
                  "punchesPer": "0",
                  "maxPunchSize": "2048",
                  "seed": "1",
                  "seqStart": "0",
                  "vbAmount": "2097152",
                  "vblkPer": "100000",
                  "genType": "1",
                  "blockSize": "4",
                  "blockSizeMax": "32",
                  "startVblk": "0",
                  "vdev": "643eef86-e42b-11ee-8678-22abb648e432",
        }
        params: {
                  "total_chunks" : 2,
                  "is_random" : false,
                  "remove_files": false,
        }
      debug:
        msg: "{{ lookup('data_gen', 'generator', dgen_args, params, wantlist=True) }}"

    - name: "{{ recipe_name }}: Resume the GC process."
      vars:
        params: {
          "pid" : "{{ gc_process_pid | int }}",
        }   
      debug:
        msg: "{{ lookup('garbage_collection', 'daemon', 'resume', params, wantlist=True) }}"

    - name: "{{ recipe_name }}: Delete the file from partition to get available space"
      vars:
        img_file: "gc/gc_download/file.img"
      debug:
        msg: "{{ lookup('helper', 'delete_dd_file', img_file, wantlist=True) }}"

    - name: "{{ recipe_name }}: Wait for GC marker files"
      loop: "{{ chunks }}"
      loop_control:
        index_var: chunk_index
      vars:
        params: {
          "chunk": "{{ item | string }}",
          "stage": "wait_for_gc_marker",
        }
        marker_seq: "{{ lookup('obj_storage', 'get_markers', params, wantlist=True)[0] }}"
      debug:
        msg: "Waiting for GC Marker File {{ marker_seq }} for chunk {{ chunk_index + 1 }}"
      until: marker_seq[0] is not none
      retries: 300
      delay: 2
 
    - name: "{{ recipe_name }}: Wait for GC and NISD marker match"
      loop: "{{ chunks }}"
      loop_control:
        index_var: chunk_index
      vars:
        params: {
          "chunk": "{{ item | string }}",
        }
        Sequence: "{{ lookup('obj_storage', 'get_markers', params, wantlist=True)[0] }}"
        gc_marker: "{{ Sequence[0] }}"
        nisd_marker: "{{ Sequence[1] }}"
      debug:
        msg: "Wait until marker values gets match {{ gc_marker }} and {{ nisd_marker }} for chunk {{ chunk_index + 1 }}"
      until: gc_marker == nisd_marker
      retries: 300
      delay: 2

    - name: "{{ recipe_name }}: Start data validation"
      vars:
        Chunk: "1"
      debug:
         msg: "{{ lookup('data_gen', 'validator', Chunk, wantlist=True) }}"
