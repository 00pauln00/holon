- import_playbook: basic_lease_operation_all.yml
- name: "disable_leader_and_perform_lease_ops"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "disable_leader_and_perform_lease_ops"
     parent: basic_lease_operation_all

  tasks:
  - block:

    - name: Generate new resource
      shell: "/usr/bin/uuid"
      register: resourceUUID

    - name: Generate new client
      shell: "/usr/bin/uuid"
      register: clientUUID

    - name: "{{ recipe_name }}: Perform 'get_lease' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'get_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'GET', input_param, wantlist=True) }}"
      debug:
         msg: "get lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: getLease

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Store leader-1"
      vars:
         leader1: "{{ LeaderUUID['/0/leader-uuid'] }}"
      debug:
        msg: "Leader-1: {{ leader1 }}"
      #no_log: true
      with_items:
         - "{{ leader1 }}"
      register: orig_leader

    - name: "{{ recipe_name }}: Disable send on all peers from the leader 1."
      vars:
         stage: "stage1_disable_net_send"
         cmd: "net_send_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Disable receive on all peers from the leader 1."
      vars:
         stage: "stage1_disable_net_recv"
         cmd: "net_recv_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Pause the Leader 1"
      debug:
       msg: "{{lookup('niova_raftprocess', 'pause', orig_leader['results'][0]['item'], wantlist=True)}}"
      no_log: True

    - name: "{{ recipe_name }}: Perform 'lookup_lease' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'lookup_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: lookupLease

    #TODO Get TS and store it into variable

    #WIP
    #TODO Start niova-block-ctl and nisd process (This is NISD 1)
    #TODO Verify lease info from memory
    #TODO Allow mount request to expire

    - name: "{{ recipe_name }}: Wait until new leader-2 election happens."
      vars:
         stage: "wait_leader_new_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != orig_leader['results'][0]['item']
      retries: 10
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Perform 'get_lease' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'get_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'GET', input_param, wantlist=True) }}"
      debug:
         msg: "get lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: getLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ getLease['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (getLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Perform 'lookup_lease' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'lookup_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: lookupLease

    #TODO Verify Term should increment and TS should be different

    #WIP
    #TODO Start niova-block-ctl and NISD 2 process
    #TODO Get lease info from NISD 2
    #TODO Ensure that NISD 2 will be processed by a new leader i.e. Leader 2

    - name: "{{ recipe_name }}: Resume the Leader 1"
      debug:
       msg: "{{lookup('niova_raftprocess', 'resume', orig_leader['results'][0]['item'], wantlist=True)}}"
      no_log: True

    #TODO Veirfy Leader-1 becomes "follower" now.

    - name: "{{ recipe_name }}: Enable send on all peers from the leader 1."
      vars:
         stage: "enable_net_send"
         cmd: "net_send_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Enable receive on all peers from the leader 1."
      vars:
         stage: "enable_net_rcv"
         cmd: "net_recv_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    #TODO Verify Leader-1 shows the lease info from NISD 2.
