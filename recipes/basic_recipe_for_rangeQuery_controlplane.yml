- name: "basic_recipe_for_rangeQuery_controlplane.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "basic_recipe_for_rangeQuery"
    parent: None
    number_of_clients: 2 

  tasks:
  - block:

    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Get the leader and follower uuids."
       include_role:
         name: common
         tasks_from: get_follower_stats

     # Get multiple client uuids using common task.
     - name: "Get multiple client uuids."
       include_role:
        name: common
        tasks_from: get_multiple_client_uuids
       loop: "{{ range(0, number_of_clients) | list }}"

     - name: "Prepare gossip node configs"
       set_fact: gossipCreation="{{lookup('niova_raftconfig', "controlplane", TotalNServersList, ClientUUIDS, wantlist=True)}}"

     # Start 4 PMDB servers.
     - name: "{{ recipe_name }}: Start 4 pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length - 1) | list }}"

     # Start proxy servers
     - name: "{{ recipe_name }}: Start proxy servers."
       include_role:
          name: common
          tasks_from: start_proxy_server
       vars:
          ClientUUID: "{{ ClientUUIDS[item] }}"
       loop: "{{ range(0, ClientUUIDS | length) |list }}"

     - name: "{{ recipe_name }}: Pause for 5 seconds to start pmdb and proxy servers properly."
       pause:
         seconds: 5

     - name: "{{ recipe_name }}: Starting controlplane_client to get membership details."
       vars:
         input_param: {
                'Operation': 'membership',
                'OutfileName': 'membership_output'
                 }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "get membership details of running servers."
       with_items:
          - "{{ ncpclires }}"
       register: membership
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeWrite with n as 5."
       vars:
         input_param: {
                'Operation': 'write',
                'OutfileName': 'Rangewrite_output',
                'NoofWrites': '5' 
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcliwr }}"
       register: writeres5keys
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with n as 5."
       vars:
         input_param: {
                 'Key': '*', 
                 'Operation': 'read',
                 'OutfileName': 'RangeRead_output',
                 'NoofWrites': '5'
                }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc."
       with_items:
         - "{{ ncpclird }}"
       register: readres5keys
       no_log: true

     - name: "{{ recipe_name }}: Compare write and read output with all the keys passed."
       vars:
         readall: "{{readres5keys['results'][0]['item']['Response']['Response'][item.key]}}"
       debug:
         msg: "compare read and write with all the keys passed"
       failed_when: item.value['Value'] != readall
       with_dict: "{{ writeres5keys['results'][0]['item'] }}"

     - name: "{{ recipe_name }}: Store the key which needs to be started for single key read task."
       vars:
         firstkey: "{{ writeres5keys['results'][0]['item'] | dict2items |  map(attribute='key')| list | first }}"
       debug:
         msg: "Get the first key from the dictionary."
       with_items:
         - "{{ firstkey }}"
       register: firstKey
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead single key."
       vars:
         input_param: {
                'Key': '{{ firstKey["results"][0]["item"] }}',
                'Operation': 'read',
                'OutfileName': 'singleRangeRead_output',
                'NoofWrites': '5'
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: singlereadres
       no_log: true

     - name: "{{ recipe_name }}: Compare read output and write output for single key."
       vars:
          readsingle: "{{ singlereadres['results'][0]['item']['Response']['Response'] }}"
          writesingle: "{{ writeres5keys['results'][0]['item'][firstKey['results'][0]['item']]['Value'] }}"
       debug:
         msg: "compare read and write"
       failed_when: readsingle != writesingle

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with prefix passed."
       vars:
         input_param: {
                'Key': 'v*', 
                'Operation': 'read',
                'OutfileName': 'RangeRead_output',
                'NoofWrites': '5'
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: readres
       no_log: true

     - name: "{{ recipe_name }}: Sort the output as per prefix in write dictionary."
       vars:
         vprefix: "{{ writeres5keys['results'][0]['item']| dict2items | selectattr('key', 'match', '^v.+$') | map(attribute='key')| list }}"
       debug:
         msg: "Get the vprefix from dict "
       with_items:
         - "{{ vprefix }}"
       register: vPrefix
       no_log: true

     - name: "{{ recipe_name }}: Compare read output with the prefix passed."
       vars: 
             readprefix: "{{ readres['results'][0]['item']['Response']['Response'][item] }}"
             writeprefix: "{{ writeres5keys['results'][0]['item'][item]['Value'] }}"
       debug:
         msg: "readprefix: {{readprefix}} and {{writeprefix}}"
       failed_when: writeprefix != readprefix
       with_items: "{{vPrefix['results'][0]['item']}}"

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
