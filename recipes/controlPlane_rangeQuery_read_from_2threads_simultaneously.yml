- name: "controlplane_rangeQuery_read_from_2threads_simultaneously.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "controlplane_rangeQuery_read_from_2threads_simultaneously"

  tasks:
  - block:

    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: "{{ recipe_name }}: Start pmdb and proxy servers."
       include_role:
          name: common
          tasks_from: pmdb_cluster_init
       vars:
         number_of_clients: 2
         number_of_PMDBServers: 5

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeWrite with n as 5."
       vars:
         input_param: {
                'Operation': 'write',
                'OutfileName': 'Rangewrite_for_2_threads_simultaneously',
                'NoofWrites': '5',
                'wait_for_outfile': True
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcliwr }}"
       register: writeres5keys
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status"
       debug:
         msg:
           - "Check write outfile status"
       no_log: true
       failed_when: >
         (writeres5keys['results'][0]['item']['outfile_status'] != 0)

     - name: "{{ recipe_name }}: Verify write status"
       debug:
         msg: "Check write response status"
       no_log: true
       failed_when: >
         (item['Response']['Status'] != 0)
       loop: "{{ writeres5keys['results'][0]['item']['output_data'] }}"

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with n as 5."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'RangeRead_for_2_threads_simultaneously',
                'NoofWrites': '5',
                'seqNo': '',
                'wait_for_outfile': True
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: readres5keys
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status and read status"
       debug:
        msg:
         - "Check read outfile status: {{ readres5keys['results'][0]['item']['outfile_status'] }}"
       no_log: true
       failed_when:
         (readres5keys['results'][0]['item']['outfile_status'] != 0) or
         (readres5keys['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

     - name: "{{ recipe_name }}: Get the sequence no from the read result of the existing keys."
       vars:
          seq_no: "{{ readres5keys['results'][0]['item']['output_data'][0]['Response']['SeqNum'] }}"
       debug:
         msg: "Get the seq no"
       with_items:
           - "{{ seq_no }}"
       register: seqNo
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with seq no passed with 2 threads simultaneously."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'rangeRead_thread1',
                'NoofWrites': '5',
                'seqNo': '{{ seqNo["results"][0]["item"] }}',
                'wait_for_outfile': False
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: rangereadres_thread1
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with seq no passed with 2 threads simultaneously."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'rangeRead_thread2',
                'NoofWrites': '5',
                'seqNo': '{{ seqNo["results"][0]["item"] }}',
                'wait_for_outfile': False
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: rangereadres_thread2
       no_log: true

     - name: "{{ recipe_name }}: Get outfile status for 1st read thread."
       stat:
         path: "{{ rangereadres_thread1['results'][0]['item'] + '.json' }}"
       register: file_status1

     - debug:
         msg: "Outfile not exist"
       failed_when: file_status1.stat.exists == False

     - name: "{{ recipe_name }}: Get outfile status for 2nd read thread."
       stat:
         path: "{{ rangereadres_thread2['results'][0]['item'] + '.json' }}"
       register: file_status2

     - debug:
         msg: "Outfile not exist"
       failed_when: file_status2.stat.exists == False

     - name: Display the JSON file content for first thread
       shell: cat {{rangereadres_thread1['results'][0]['item'] + '.json'}}
       register: result_thread1

     - name: save the Json data to a Variable as a Fact
       set_fact:
          jsondata_thread1: "{{ result_thread1.stdout | from_json }}"

      # check if read is successful
     - name: "{{ recipe_name }}: Check if read is successful for thread 1."
       vars:
         jsondata1: "{{ jsondata_thread1[0]['Response']['Status'] }}"
       debug:
         msg: "Check if read is successful"
       failed_when: jsondata1 != "0"

     - name: Display the JSON file content
       shell: cat {{rangereadres_thread1['results'][0]['item'] + '.json'}}
       register: result_thread2

     - name: save the Json data to a Variable as a Fact
       set_fact:
          jsondata_thread2: "{{ result_thread2.stdout | from_json }}"

       # check if read is successful
     - name: "{{ recipe_name }}: Check if read is successful"
       vars:
         jsondata2: "{{ jsondata_thread2[0]['Response']['Status'] }}"
       debug:
         msg: "Check if read is successful"
       failed_when: >
         ( jsondata2 != "0")

     - name: "{{ recipe_name }}: Compare read output of thread1 and thread2  with all the keys passed."
       vars:
         read_thread1: "{{ jsondata_thread1[0]['Response']['ResultMap'] }}"
         read_thread2: "{{ jsondata_thread2[0]['Response']['ResultMap'] }}"
       debug:
         msg: "compare keys and values of both threads"
       failed_when: read_thread2 != read_thread1
       loop: "{{ range(0, writeres5keys['results'][0]['item']['output_data'] | length) | list }}"

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
