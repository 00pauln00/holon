- import_playbook: controlPlane_operation_all.yml

- name: "controlPlane_cluster_state_verify"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "controlPlane_cluster_state_verify"
    parent: "controlPlane_operation_all"

  tasks:
  - block:

     - name: "Check if parent recipe failed"
       debug: msg="Check if parent recipe {{ parent }} failed"
       failed_when: terminate_recipe == true

     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     # Start 5th PMDB servers.
     - name: "{{ recipe_name }}: Start  5th  pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length) | list }}"

     - name: "{{ recipe_name }}: Store the UUID of 5th pmdb server."
       vars:
         peer: "{{ TotalNServersList[4] }}"
       debug:
         msg: "Get the new peer to start: {{ peer }}"
       with_items:
         - "{{ peer }}"
       register: Peer5

     - name: "{{ recipe_name }}: Starting controlplane_client to get the config values after starting 5th pmdb server."
       vars:
         input_param: {
                  'Operation': 'config',
                  'OutfileName': 'config_output_5th_pmdb',
                  }
       debug:
         msg: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       no_log: True

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value and verify its status."
       vars:
         input_param: {
                'Key': 'Wel',
                'Value': 'Come',
                'Operation': 'write',
                'IP_addr': '',
                'Port': '',
                'OutfileName': 'write_output_controlplane',
                'NoofWrites': '',
                'wait_for_outfile': True
                 }
         ncpcWrRes: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcWrRes }}"
       register: writeresult
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status"
       debug:
         msg:
           - "Check write outfile status: {{ writeresult['results'][0]['item']['outfile_status'] }}"
       no_log: true
       failed_when: >
         (writeresult['results'][0]['item']['outfile_status'] != 0)

     - name: "{{ recipe_name }}: Check if write is successful."
       vars:
         wrstatus: "{{ writeresult['results'][0]['item']['output_data'][0]['Response']['Status'] }}"
       debug:
         msg: "Check if write is successful."
       failed_when: >
         (wrstatus|int != 0)

     - name: "{{ recipe_name }}: Kill one of the proxy server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', ClientUUIDS[0], wantlist=True) }}"

     - pause:
         seconds: 2

     - name: "{{ recipe_name }}: Starting controlplane_client to get membership details."
       vars:
         input_param: {
                'Operation': 'membership',
                'OutfileName': 'membership_output'
                 }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "get membership details of running servers."
       with_items:
          - "{{ ncpclires }}"
       register: membership

     - name: "{{ recipe_name }}: Get the nodename of killed proxy server."
       vars:
         node: "{{ 'Node_' + ClientUUIDS[0] }}"
       debug:
         msg: "Killed node name is: {{ node }}"
       with_items:
           - "{{ node }}"
       register: killed_node

     - name: "{{ recipe_name }}: Wait until proxy node status gets changed."
       vars:
         getNodeName: "{{ killed_node['results'][0]['item'] }}"
         input_param: {
                  'Operation': 'membership',
                  'OutfileName': 'wait_for_proxyStatus'
                  }
       debug:
         msg: "Verifying node status"
       until: lookup('controlplane', 'ncpc', input_param, wantlist=True) | dict2items | map(attribute='value') | map(attribute='output_data') | map(attribute=getNodeName) | map(attribute='Status') | list | first == "failed"
       retries: 10
       delay: 1

     - name: "{{ recipe_name }}: Verify proxy server's status."
       vars:
         getNodeName: "{{ killed_node['results'][0]['item'] }}"
         input_param: {
                  'Operation': 'membership',
                  'OutfileName': 'verify_proxyServerStatus'
                  }
         getProxyServerData: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Verify proxy server status: {{ getProxyServerData }}"
       no_log: true
       failed_when: getProxyServerData['membership']['output_data'][getNodeName]['Status'] != "failed"

     - name: "{{ recipe_name }}: Starting controlplane_client to read the value and verify its status."
       vars:
         input_param: {
                  'Key': 'Wel',
                  'Operation': 'read',
                  'OutfileName': 'read_outputControlplane_recipe',
                  'NoofWrites': '',
                  'seqNo': '',
                  'wait_for_outfile': True
                  }
         ncpRdRes: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Reading through ncpc client."
       with_items:
          - "{{ ncpRdRes }}"
       register: readresult
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status and read status"
       debug:
        msg:
         - "Check read outfile status: {{ readresult['results'][0]['item']['outfile_status'] }}"
         - "Check read response status: {{readresult['results'][0]['item']['output_data'][0]['Response']['Status'] }}"
       no_log: true
       failed_when:
         (readresult['results'][0]['item']['outfile_status'] != 0) or
         (readresult['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

     - name: "{{ recipe_name }}: compare values after sucessful write/read operation."
       vars:
         rdval: "{{ readresult['results'][0]['item']['output_data'][0]['Response'] }}"
       debug:
         msg: "Verifying parameter after read operation"
       failed_when: >
         (rdval['Status'] != 0) or
         ((rdval['ResultMap'][writeresult['results'][0]['item']['output_data'][0]['Request']['Key']] | b64decode) != (writeresult['results'][0]['item']['output_data'][0]['Request']['Value'] | b64decode))

     - name: "{{ recipe_name }}: Kill one of the pmdb server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', Peer5['results'][0]['item'], wantlist=True) }}"

     - pause:
         seconds: 2

     - name: "{{ recipe_name }}: Wait until killed pmdb server's status gets changed."
       vars:
         getPmdbServer: "{{ Peer5['results'][0]['item'] }}"
         input_param: {
                  'Operation': 'membership',
                  'OutfileName': 'wait_for_killedPmdbServerStatus'
                  }
       debug:
         msg: "Verifying pmdb server's status"
       until: lookup('controlplane', 'ncpc', input_param, wantlist=True) | dict2items | map(attribute='value') | map(attribute='output_data') | map(attribute=getPmdbServer) | map(attribute='Status') | list | first == "failed"
       retries: 10
       delay: 1

     - name: "{{ recipe_name }}: Check if killed pmdb server's status gets changed."
       vars:
         killedPmdbServer: "{{ Peer5['results'][0]['item'] }}"
         input_param: {
                  'Operation': 'membership',
                  'OutfileName': 'check_killedPmdbServerStatus'
                  }
         verifyPmdbServerStatus: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Verify killed pmdb server status"
       failed_when: verifyPmdbServerStatus['membership']['output_data'][killedPmdbServer]['Status'] != "failed"


     - name: "{{ recipe_name }}: Start killed proxy server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'start', ClientUUIDS[0], wantlist=True) }}"


     - name: "{{ recipe_name }}: Start Killed pmdb server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'start', Peer5['results'][0]['item'], wantlist=True) }}"

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
