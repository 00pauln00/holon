- import_playbook: healthy_raftserver_cluster_type1.yml
  when: ClusterParams['ctype'] == "pumicedb"

- name: "pmdb_coalesced_wr_discard_old_leader_uncommitted_writes"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "pmdb_coalesced_wr_discard_old_leader"
     parent: "healthy_raftserver_cluster_type1"
     requirement: "pumicedb"
     num_writes: 1
     set_timeout: 1

  tasks:
  - block:
    - name: "{{ recipe_name }}: Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Check if coalesced write flag is set before starting to run the recipe."
      debug: msg="Check if coalesced write flag is set before starting to run the recipe."
      failed_when: coalesced_wr | int != 1

    - name: "{{ recipe_name }}: Verify the holon started with pumicedb cluster"
      include_role:
        name: common
        tasks_from: recipe_compatibility_requirement

    - name: "{{ recipe_name }}: Get the list of all running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Verify all peers up and running."
      include_role:
         name: common
         tasks_from: verify_all_peers_up_and_running

    - name: "{{ recipe_name }}: Get the current leader-uuid, term value and commit-idx value."
      vars:
         running_servers: "{{ NRunningPeers }}"
         stage: "store_values"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/commit-idx"
         get_values: "{{ lookup('niova_ctlrequest', 'lookup', running_servers, raft_keys) }}"
      debug:
        msg: "Getting orignal values."
      no_log: True
      with_items:
          - "{{ get_values }}"
      register: stage1_value

    - name: "{{ recipe_name }}: Apply fault injection on leader and verify."
      include_role:
        name: common
        tasks_from: set_fault_injection_and_verify
      vars:
        ServerUUID: "{{ stage1_value['results'][0]['item']['/0/leader-uuid'] }}"
        fault_injection_name: "coalesced_writes"

    - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
      include_role:
        name: common
        tasks_from: get_new_client_uuid
      register: client_uuid

    - name: "{{ recipe_name }}: Generate App UUID"
      shell: "/usr/bin/uuid"
      register: app_uuid1

    - name: "{{ recipe_name }}: Start client process"
      include_role:
        name: common
        tasks_from: start_client
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Verify leader is viable."
      include_role:
        name: common
        tasks_from: verify_leader_viable
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Modify the client request timeout to 1 sec."
      vars:
         stage: "modify_timeout"
         cmd: "default-request-timeout-sec@{{ set_timeout }}"
         where: "/raft_client_root_entry/default-request-timeout-sec"
         set_time: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where) }}"
      debug:
        msg: "{{ set_time }}"
      no_log: True

    - name: "{{ recipe_name }}: Verify client request timeout set to {{ set_timeout }}"
      vars:
        stage: "verify_clireq_timeout"
        raft_key:
              - "/raft_client_root_entry/0/default-request-timeout-sec"
      set_fact:
        verifyCliReqTimeout: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_key) }}"
      failed_when: verifyCliReqTimeout["/0/default-request-timeout-sec"] != (set_timeout)


    - name: "{{ recipe_name }}: Get follower's uuids."
      include_role:
           name: common
           tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Set election timeout for all followers."
      vars:
        followers: "{{ FollowerUUIDs }}"
        stage: "set_elec_timeout"
        wait_for_ofile: False
        cmd: "election-timeout-ms@1000"
        where: "/raft_net_info/election-timeout-ms"
        key:
         - "/raft_net_info/election-timeout-ms"
      debug:
        msg:
          - "{{ lookup('niova_ctlrequest', 'apply_cmd', followers, cmd, where) }}"
      no_log: True

    - name: "{{ recipe_name }}: Pause the leader."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'pause', stage1_value['results'][0]['item']['/0/leader-uuid']) }}"

    - name: "{{ recipe_name }}: Apply write cmd from client."
      vars:
        stage: "write_op"
        cmd: "input@{{ app_uuid1.stdout }}:0:0:0:0.write:0.{{ num_writes }}"
        where: "/pumice_db_test_client/input"
        write_seq: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where) }}"
      debug:
        msg: "{{ write_seq }}"
      no_log: True

    - pause:
        seconds: "{{ set_timeout | int + 2 | int }}"

    - name: "{{ recipe_name }}: Verify client write request is timeout."
      vars:
        stage: "verifyStatus"
        raft_keys:
          - "/raft_client_root_entry/0/recent-ops-wr"
      set_fact:
        getStatusFrmCli: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_keys) }}"
      failed_when: getStatusFrmCli['/0/recent-ops-wr'][0]['status'] != "Connection timed out"

    - name: "{{ recipe_name}}: Print followers list for checking leader election"
      debug:
        msg: "{{ NRunningPeers  | difference([stage1_value['results'][0]['item']['/0/leader-uuid']]) }}"

    - name: "{{ recipe_name}}: Wait until new leader election happens."
      vars:
        stage: "wait_for_new_leader"
        raft_key: "/raft_root_entry/0/leader-uuid"
        remainingPeers: "{{ NRunningPeers  | difference([stage1_value['results'][0]['item']['/0/leader-uuid']]) }}"
      debug:
        msg:
        - "Waiting for new leader to elect"
      until: (lookup('niova_ctlrequest', 'lookup', remainingPeers[item], raft_key)['/0/leader-uuid'] != stage1_value['results'][0]['item']['/0/leader-uuid'])
      retries: 30
      delay: 3
      loop: "{{ range(0, remainingPeers | length)| list }}"

    - name: "{{ recipe_name }}: Reset the client request timeout to default timeout i.e. 60sec."
      vars:
         stage: "modify_timeout"
         cmd: "default-request-timeout-sec@60"
         where: "/raft_client_root_entry/default-request-timeout-sec"
         set_time: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where) }}"
      debug:
        msg: "{{ set_time }}"
      no_log: True

    - name: "{{ recipe_name }}: Generate new App UUID"
      shell: "/usr/bin/uuid"
      register: app_uuid2

    - name: "{{ recipe_name }}: Apply write cmd from client with new app-uuid."
      vars:
        stage: "write_with_new_appUUID"
        cmd: "input@{{ app_uuid2.stdout }}:0:0:0:0.write:0.{{ num_writes }}"
        where: "/pumice_db_test_client/input"
        writeFromCli: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where) }}"
      debug:
        msg: "{{ writeFromCli }}"
      no_log: True

    - name: "{{ recipe_name}}: Wait until all write completes from client"
      vars:
        stage: "wait_for_write_op"
      debug:
        msg: "Waiting for client to finish writing"
      until: lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, '/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno')['/0/pmdb-seqno'] == (num_writes - 1)
      retries: 500
      delay: 1

    - name: "{{ recipe_name }}: Get the term value and commit-idx value."
      vars:
         remainingPeers: "{{ NRunningPeers  | difference([stage1_value['results'][0]['item']['/0/leader-uuid']]) }}"
         stage: "get_term_and_commit_idx"
         raft_keys:
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/commit-idx"
         getVal: "{{ lookup('niova_ctlrequest', 'lookup', remainingPeers, raft_keys) }}"
      debug:
        msg: "Getting values after new election {{ getVal }}"
      no_log: True
      with_items:
          - "{{ getVal }}"
      register: valuesAftrNewElection

    - name: "{{ recipe_name }}: Resume the old leader."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'resume', stage1_value['results'][0]['item']['/0/leader-uuid']) }}"

    - name: "{{ recipe_name }}: Remove fault injection from leader."
      vars:
        stage: "rm_fault_injection"
        cmd: "enabled@false"
        where: "/fault_injection_points/name@coalesced_writes"
      debug:
         msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', stage1_value['results'][0]['item']['/0/leader-uuid'], cmd, where) }}"
      no_log: True

    - name: "{{ recipe_name }}: Get the 'state' of old leader."
      vars:
         stage: "getState"
         raft_key:
            - "/raft_root_entry/0/state"
      set_fact:
         getStateFrmOldLeader: "{{ lookup('niova_ctlrequest', 'lookup', stage1_value['results'][0]['item']['/0/leader-uuid'], raft_key) }}"
      failed_when: getStateFrmOldLeader["/0/state"] != "follower"

    - name: "{{ recipe_name }}: Verify the status of both APP-UUID1 and APP-UUID2."
      include_role:
         name: common
         tasks_from: verify_status_from_recent_ops_wr
      vars:
         ClientUUID: "{{ client_uuid.stdout }}"
         AppUUID1: "{{ app_uuid1.stdout }}:0:0:0:0"
         AppUUID2: "{{ app_uuid2.stdout }}:0:0:0:0"

    - name: "{{ recipe_name }}: Get new follower's uuids."
      include_role:
           name: common
           tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Reset default election timeout for all followers."
      vars:
        followers: "{{ FollowerUUIDs }}"
        stage: "reset_elec_timeout"
        wait_for_ofile: False
        cmd: "election-timeout-ms@300"
        where: "/raft_net_info/election-timeout-ms"
        key:
         - "/raft_net_info/election-timeout-ms"
      debug:
        msg:
          - "{{ lookup('niova_ctlrequest', 'apply_cmd', followers, cmd, where) }}"
      no_log: True

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
