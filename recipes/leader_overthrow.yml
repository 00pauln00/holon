- import_playbook: basic_leader_election2.yml

- name: "leader_overthrow"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "leader_overthrow"
     parent: "basic_leader_election2"

  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Get the latest list of running peer UUIDs"
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get the raft values for all running peers"
      vars:
         stage: "stage0_get_all"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/commit-idx"
            - "/raft_root_entry/0/sync-entry-idx"
            - "/raft_root_entry/0/sync-entry-term"
            - "/raft_root_entry/0/sync-entry-crc"
            - "/raft_root_entry/0/sync-entry-data-size"
            - "/raft_root_entry/0/state"
            - "/raft_root_entry/0/last-applied"
            - "/raft_root_entry/0/last-applied-cumulative-crc"
            - "/raft_root_entry/0/peer-uuid"
         peers_val: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Getting stats for all running peers"
      no_log: true
      with_items:
         - "{{ peers_val }}"
      register: stage0_peers_vals

    - name: "{{ recipe_name }}: Get the leader and follower uuids."
      include_role:
         name: common
         tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Disable message receive on all peers for leader overthrow"
      vars:
         stage: "stage1_rcv_false"
         cmd: "net_recv_enabled@false"
         where: "/ctl_svc_nodes/net_recv_enabled@true"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - pause: seconds=3

    - name: "{{ recipe_name }}: Verify that message received is disabled successfully on all peers"
      vars:
         initial_vals: "{{ stage0_peers_vals['results'][item]['item']}}"
         stage: "stage1_get_all"
         raft_keys:
             - "/ctl_svc_nodes/*/net_recv_enabled"
             - "/raft_root_entry/0/leader-uuid"
             - "/raft_root_entry/0/state"
             - "/raft_root_entry/0/client-requests"
             - "/raft_root_entry/0/term"
         net_rcv: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], raft_keys, wantlist=True) }}"
      debug:
        msg:
         - "Verify parameters for peer: {{ NRunningPeers }}"
         - "initial term {{ initial_vals['/0/term'] }}"
         - "initial leader uuid: {{ initial_vals['/0/leader-uuid'] }}"
      failed_when: >
           (net_rcv["/*/net_recv_enabled"] != False) or
           (net_rcv["/0/leader-uuid"] != "null") or
           (net_rcv["/0/state"] != "candidate-prevote") or
           (net_rcv["/0/client-requests"] != "deny-leader-not-established") or
           (net_rcv["/0/term"] != initial_vals["/0/term"])
      loop: "{{ range(0, NRunningPeers|length) | list }}"
      no_log: true

    - name: "{{ recipe_name }}: Lets sleep for sometime before checking the values"
      wait_for:
        timeout: 5

    - name: "{{ recipe_name }}: Selected leader-to-be"
      set_fact:
        overthrow_leader_to_be: "{{ FollowerUUIDs[0] }}"

    - name: "{{ recipe_name }}: Enable receive on all peers from the leader-to-be."
      vars:
         stage: "stage2_set_leader"
         cmd: "net_recv_enabled@true"
         where: "/ctl_svc_nodes/uuid@{{ overthrow_leader_to_be }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Get the values to verify leader-to-be is not elected yet"
      vars:
         stage: "stage2_set_leader"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/commit-idx"
            - "/raft_root_entry/0/last-applied"
            - "/raft_root_entry/0/last-applied-cumulative-crc"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/sync-entry-term"
            - "/raft_root_entry/0/sync-entry-crc"
            - "/raft_root_entry/0/sync-entry-data-size"
            - "/raft_root_entry/0/sync-entry-idx"
            - "/raft_root_entry/0/state"
            - "/raft_root_entry/0/client-requests"
            - "/raft_root_entry/0/voted-for-uuid"
            - "/raft_root_entry/0/peer-uuid"
         set_leader: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Verify leader-to-be not elected on peer"
      no_log: true
      with_items:
         - "{{ set_leader }}"
      register: set_leader_vals

    - name: "{{ recipe_name }}: Verify that leader-to-be is not elected yet"
      vars:
        initial_vals: "{{ stage0_peers_vals['results'][item]['item'] }}"
        stage2_vals: "{{ set_leader_vals['results'][item]['item'] }}"
      debug:
        msg: "Verify value for peer: {{ NRunningPeers[item] }}, initial_vals: {{ initial_vals}} / {{ stage2_vals }}"
      failed_when: >
        (stage2_vals["/0/leader-uuid"] != "null") or
        (stage2_vals["/0/commit-idx"] != initial_vals["/0/commit-idx"]) or
        (stage2_vals["/0/last-applied"] != initial_vals["/0/last-applied"]) or
        (stage2_vals["/0/last-applied-cumulative-crc"] != initial_vals["/0/last-applied-cumulative-crc"]) or
        (stage2_vals["/0/sync-entry-crc"] != initial_vals["/0/sync-entry-crc"]) or
        (stage2_vals["/0/sync-entry-data-size"] != initial_vals["/0/sync-entry-data-size"]) or
        (stage2_vals["/0/sync-entry-idx"] != initial_vals["/0/sync-entry-idx"]) or
        (stage2_vals["/0/voted-for-uuid"] != initial_vals["/0/leader-uuid"]) or
        (stage2_vals["/0/state"] != "candidate-prevote") or
        (stage2_vals["/0/client-requests"] != "deny-leader-not-established") or
        (stage2_vals["/0/term"] != initial_vals["/0/term"])
      loop: "{{ range(0, NRunningPeers|length) | list }}"
      no_log: true

    - name: "{{ recipe_name }}: Enable message receive on peer which is leader-to-be"
      vars:
         stage: "stage3_rcv_true"
         cmd: "net_recv_enabled@true"
         where: "/ctl_svc_nodes/net_recv_enabled@false"
      debug:
       msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', overthrow_leader_to_be, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Verify new leader is elected successfully"
      vars:
         stage: "stage4_get_all"
      debug:
        msg:
         - "Waiting for new leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True) | dict2items | map(attribute='value') | list | first == overthrow_leader_to_be
      retries: 10
      delay: 2
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Make sure enable message receive on all peers for leader overthrow"
      vars:
         npeersExceptLeaderToBe: "{{ NRunningPeers | difference(overthrow_leader_to_be) }}"
         stage: "net_rcv_true_on_all"
         cmd: "net_recv_enabled@true"
         where: "/ctl_svc_nodes/net_recv_enabled@false"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', npeersExceptLeaderToBe, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Verify that message received is enabled successfully on all peers"
      vars:
        stage: "recipeCleanup"
        raft_keys:
             - "/ctl_svc_nodes/*/net_recv_enabled"
        net_rcv: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], raft_keys, wantlist=True) }}"
      debug:
        msg: "Verify 'net_recv_enabled' state of all peers to â€˜true'"
      failed_when: >
           (net_rcv["/*/net_recv_enabled"] != True)
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
           terminate_recipe: true
