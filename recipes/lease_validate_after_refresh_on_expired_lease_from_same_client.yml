- import_playbook: lease_validate_after_expired_lease_granted_to_another_client.yml 

- name: "lease_validate_after_refresh_on_expired_lease_from_same_client"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "lease_validate_after_refresh_on_expired_lease_from_same_client"
    parent: "lease_validate_after_expired_lease_granted_to_another_client"
    no_of_leases: 5

  tasks:
  - block:

    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")
    
    - name: "{{ recipe_name }}: Pause for 60 seconds so that all the leases gets expired."
      pause:
        seconds: 90

    - name: "{{ recipe_name }}: get the list of non-running servers."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Perform 'REFRESH' operation."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'refresh_lease_{{ resourceUUIDS[item] }}'
                 }
      set_fact:
        refresh: "{{ refresh|default([]) + [lookup('lease_feature', 'REFRESH', input_param, wantlist=True)] }}"
      failed_when: >
        (refresh[item]['outfile_status'] != 0) or
        (refresh[item]['output_data']['LeaseRes']['Status'] != 0) or
        (refresh[item]['output_data']['LeaseRes']['LeaseState'] != 4) or
        (refresh[item]['output_data']['LeaseRes']['TTL'] > 60)
      loop: "{{ range(0, no_of_leases) | list }}"  

    - name: "{{ recipe_name }}: Kill the Old Leader."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'kill', LeaderUUID['/0/leader-uuid'], wantlist=True) }}"

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Again wait until new leader election happens."
      vars:
         stage: "wait_for_new_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != LeaderUUID['/0/leader-uuid']
      retries: 10
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Verify already taken leases gets updated with new leader and we get leaseState as valid."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_after_new_leader_{{ item }}'
                 }
      set_fact:
        lookup_aftr_new_leader: "{{ lookup_aftr_new_leader|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param, wantlist=True)] }}"
      failed_when: >
        (lookup_aftr_new_leader[item]['outfile_status'] != 0) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['LeaseState'] != 4) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Client'] != getLeaseOps[item]['output_data'][0]['LeaseRes']['Client']) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Resource'] != getLeaseOps[item]['output_data'][0]['LeaseRes']['Resource'])
      loop: "{{ range(0, no_of_leases) | list }}"
