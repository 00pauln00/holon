- import_playbook: basic_recipe_for_niovakv.yml
- name: "concurrent_multikey_rdwr_operation"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "concurrent_multikey_rdwr_operation"
    parent: "basic_recipe_for_niovakv"

  tasks:
  - block:
      # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'niovakv'."
       vars:
         app_type: "{{ app_type}}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "niovakv")

     - name: "{{ recipe_name }}: Get unused client-uuid."
       include_role:
         name: common
         tasks_from: get_new_client_uuid
       register: client_uuid

     - debug:
        msg: "Client UUID: {{ client_uuid }}"

      #Start niovakv_server
     - name: "{{ recipe_name }}: Start niovakv new server which starts pmdb client."
       include_role:
         name: common
         tasks_from: start_client_golang
       vars:
         ClientUUID: "{{ client_uuid.stdout }}"

     - name: "{{ recipe_name }}: Pause for 5 seconds to build app cache."
       pause:
        seconds: 5

     #Start niovakv_client by sending multiple requested key-value.
     - name: "{{ recipe_name }}: Start niovakv client to multi-key write/read concurrently."
       vars:
         Operation: "write/read"
         Key: "India"
         Value: "Asia"
         OutfileName: "multikey_concurrent"
         NumRequest: 10
         MultiKey: True
         Sequential: False
         multicli: "{{ lookup('niova_kvclient', Operation, Key, Value, OutfileName, NumRequest, MultiKey, Sequential, wantlist=True) }}"
       debug:
         msg: "Read value from niovakv_client."
       with_items:
          - "{{ multicli }}"
       register: multikeyres

     - name: "{{ recipe_name }}: Verify multikey concurrent write status."
       vars:
          write_arr: "{{ multikeyres['results'][0]['item']['write'] }}"
          write_status: "{{ write_arr[item]['Response'] }}"
       debug:
         msg: "Verifying status for 'write' operation"
       failed_when: write_status['Status'] != 0
       loop: "{{ range(0, write_arr | length) | list }}"

     - name: "{{ recipe_name }}: Verify multikey concurrent read status."
       vars:
          read_arr: "{{ multikeyres['results'][0]['item']['read'] }}"
          read_status: "{{ read_arr[item]['Response'] }}"
       debug:
         msg: "Verifying status for 'read' operation"
       failed_when: read_status['Status'] != 0
       loop: "{{ range(0, read_arr | length) | list }}"

     - name: "{{ recipe_name }}: Verify multikey concurrent read/write data."
       include_role:
        name: common
        tasks_from: verify_ops_success
       vars:
          write_arr: "{{ multikeyres['results'][0]['item']['Write'] }}"
          write_vals: "{{ write_arr[item]['Request']['Value'] }}"
          write_key: "{{ write_arr[item]['Request']['Key'] }}"
          read_arr:  "{{ multikeyres['results'][0]['item']['Read'] }}"
       loop: "{{ range(0, write_arr | length) | list }}"
