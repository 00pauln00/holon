- name: low_s3_storage_capacity
  hosts: localhost
  connection: local
  vars:
    recipe_name: "low_s3_storage_capacity"
    minio_dir: "minio_data"
    parent: none

  tasks:
    - block:
        - name: "{{ recipe_name }}: Create 1GB Partition"
          debug:
            msg: "{{ lookup('helper', 'create_partition', 'minio_data', '16', wantlist=True) }}"

        - name: "Get the json path"
          set_fact: base_dir="{{ recipe_params['base_dir']}}"
            raft_uuid="{{ recipe_params['raft_uuid']}}"

        - name: "{{ recipe_name }}: Start minio server"
          vars:
            s3_dir: "{{ base_dir }}/{{ raft_uuid }}/{{ minio_dir }}"
          debug:
            msg:
              - "{{ lookup('obj_storage', 'minio', 'start', s3_dir, wantlist=True) }}"
          when: s3Support == "true"

        - name: "Generate 1000 vblk entries"
          vars:
            dbi_param:
              vbAmount: "1000"
              maxVblks: "100"
              vblkPer: "100"
              maxPunches: "0"
              punchAmount: "0"
              seqStart: "0"
              startVblk: "0"
              genType: "1"
              seed: "1"
              blockSize: "16"
              blockSizeMax: "32"
              punchesPer: "0"
              maxPunchSize: "1"
              chunk: "1"
            input_param:
              total_chunks: 1
              is_random: true
              remove_files: false
          debug:
            msg:
              - "{{ lookup('data_gen', 'generator', dbi_param, input_param, wantlist=True)[0] }}"
          register: chunk

        # - name: Wait for 60 seconds
        #   pause:
        #     seconds: 60

        - name: Run df -h
          command: df -h
          register: df_output

        - name: Extract last line from df output
          set_fact:
            last_mount_line: "{{ df_output.stdout_lines[-1] }}"

        - name: Extract available size of the last mount (column 4)
          set_fact:
            last_mount_avail: "{{ last_mount_line.split()[3] }}"

        - name: Convert available size to bytes (as integer)
          set_fact:
            last_mount_avail_bytes: >-
              {{
                (
                  (last_mount_avail[:-1] | float) *
                  (1024**3 if last_mount_avail[-1] == 'G' else 1024**2)
                ) | int
              }}

        - name: Remaining size
          debug:
            msg: "{{ last_mount_avail_bytes }}"

        - name: Create file of available size in that directory
          command: fallocate -l {{ (last_mount_avail_bytes | int) - 900000 }} {{ base_dir }}/{{ raft_uuid }}/{{ minio_dir }}/available_file

        # - name: "{{ recipe_name }}: Starting gc tester with not enough space on s3"
        #   vars:
        #     input_params:
        #       debug_mode: "false"
        #       chunk: "{{ chunk['msg'][0] }}"
        #   debug:
        #     msg: "{{ lookup('garbage_collection', 'single_exec', 'start', input_params, wantlist=True)[0] }}"
        #   register: gc_output

        # - debug:
        #     msg: "Check return code of GC Process. {{ gc_output['msg'][0] }}"
        #   failed_when: gc_output['msg'][0] == "0"

        - name: "{{ recipe_name }}: Start GCService"
          vars:
            params:
              {
                "dry_run": false,
                "del_dbo": true,
                "partition": false,
                "total_chunks": 0,
                "force_gc": true,
                "dall": true,
              }
          debug:
            msg:
              - "{{ lookup('garbage_collection', 'daemon', 'start', params, wantlist=True) }}"

        - name: Remove extra file
          command: rm -rf {{ base_dir }}/{{ raft_uuid }}/{{ minio_dir }}/available_file

        # TODO Test with big write in the first iteration and not having the 2nd iteration
        # - name: "Generate 1000 vblk entries"
        #   vars:
        #     dbi_param:
        #       vbAmount: "1000"
        #       maxVblks: "100"
        #       vblkPer: "100"
        #       maxPunches: "0"
        #       punchAmount: "0"
        #       seqStart: "0"
        #       startVblk: "0"
        #       genType: "1"
        #       seed: "1"
        #       blockSize: "16"
        #       blockSizeMax: "32"
        #       punchesPer: "0"
        #       maxPunchSize: "1"
        #       chunk: "1"
        #     input_param:
        #       total_chunks: 1
        #       is_random: true
        #       remove_files: false
        #   debug:
        #     msg:
        #       - "{{ lookup('data_gen', 'generator', dbi_param, input_param, wantlist=True)[0] }}"
        #   register: chunk

        # - name: Wait for 10 minutes to let GC perform
        #   pause:
        #     minutes: 10

        - name: "{{ recipe_name }}: Wait until GC marker file present."
          vars:
            params: { "chunk": "1" }
          debug:
            msg: "Waiting for GC Marker File"
          until: lookup('obj_storage', 'get_markers', params, wantlist=True)[0][0] is not none
          retries: 50
          delay: 2

        - name: "{{ recipe_name }}: Wait until GC marker and NISD marker gets match."
          vars:
            params: { "chunk": "1" }
            Sequence: "{{ lookup('obj_storage', 'get_markers', params, wantlist=True)[0] }}"
            gc_marker: "{{ Sequence[0] }}"
            nisd_marker: "{{ Sequence[1] }}"
          debug:
            msg: "Wait until marker values gets match"
          until: gc_marker == nisd_marker
          retries: 50
          delay: 2

        # - name: "{{ recipe_name }}: Starting gc tester after making enough space on s3"
        #   vars:
        #     input_params:
        #       debug_mode: "false"
        #       chunk: "{{ chunk['msg'][0] }}"
        #   debug:
        #     msg: "{{ lookup('garbage_collection', 'single_exec', 'start', input_params, wantlist=True)[0] }}"
        #   register: gc_output_new

        # - debug:
        #     msg: "Check return code of GC Process. {{ gc_output_new['msg'][0] }}"
        #   failed_when: gc_output_new['msg'][0] != "0"

        - name: "{{ recipe_name }}: Start data validation"
          vars:
            Chunk: "{{ chunk['msg'][0] }}"
          debug:
            msg: "{{ lookup('data_gen', 'validator',  Chunk, wantlist=True) }}"

      rescue:
        - name: "Recipe: {{ recipe_name }} failed"
          set_fact:
            terminate_recipe: true
