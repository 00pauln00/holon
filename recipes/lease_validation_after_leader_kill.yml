- import_playbook: lease_basic_operations.yml
- name: "lease_validation_after_leader_kill"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "lease_validation_after_leader_kill"
     parent: "lease_basic_operations"

  tasks:
  - block:

    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "lease")

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Kill the Leader."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'kill', LeaderUUID['/0/leader-uuid'], wantlist=True) }}"

    - pause:
        seconds: 2

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Again wait until new leader election happens."
      vars:
         stage: "wait_for_new_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != "null"
      retries: 10
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Perform 'LOOKUP' operation after new leader election."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'LOOKUP_aftr_new_leader_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: aftr_new_leader_lookup_ops

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ aftr_new_leader_lookup_ops['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (aftr_new_leader_lookup_ops['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Compare TS."
      vars:
        wr_timestamp: "{{ getLease['results'][0]['item']['output_data']['Response']['TimeStamp'] }}"
        rd_timestamp: "{{ aftr_new_leader_lookup_ops['results'][0]['item']['output_data']['Response']['TimeStamp'] }}"
      debug:
        msg: "compare TS with intitial values"
      failed_when: >
        ((wr_timestamp | string | split('.') | first) != (rd_timestamp | string | split('.') | first)) or
        ((wr_timestamp | string | split('.') | last) <= (rd_timestamp | string | split('.') | first))

    - name: "{{ recipe_name }}: Compare TTL"
      vars:
        wr_ttl: "{{ getLease['results'][0]['item']['output_data']['Response'] }}"
        rd_ttl: "{{ aftr_new_leader_lookup_ops['results'][0]['item']['output_data']['Response'] }}"
      debug:
        msg: "Compare TTL"
      failed_when: >
        (rd_ttl['TTL'] >= wr_ttl['TTL'])

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
