- import_playbook: lease_basic_operations.yml

- name: "lease_validation_after_leader_kill"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "lease_validation_after_leader_kill"
     parent: "lease_basic_operations"
     no_of_leases: 4

  tasks:
  - block:

    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "Get multiple client uuids."
      include_role:
        name: common
        tasks_from: get_multiple_client_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "Get multiple resource uuids."
      include_role:
        name: common
        tasks_from: get_multiple_resource_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'GET' operation for {{ no_of_leases }} client-uuids and resource-uuids."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '0',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_{{ item }}'
                 }
      set_fact:
        getLeaseOps: "{{ getLeaseOps|default([]) + [lookup('lease_feature', 'GET', input_param, wantlist=True)] }}"
      failed_when: >
        (getLeaseOps[item]['outfile_status'] != 0) or
        (getLeaseOps[item]['output_data']['Response']['Status'] != "Success") or
        (getLeaseOps[item]['output_data']['Response']['LeaseState'] != "GRANTED")
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'LOOKUP' operation for {{ no_of_leases }} client-uuids and resource-uuids."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '0',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_{{ item }}'
                 }
      set_fact:
        lookupLeaseOps: "{{ lookupLeaseOps|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param, wantlist=True)] }}"
      failed_when: >
        (lookupLeaseOps[item]['outfile_status'] != 0) or
        (lookupLeaseOps[item]['output_data']['Response']['Status'] != "Success") or
        (lookupLeaseOps[item]['output_data']['Response']['LeaseState'] != "GRANTED") or
        (lookupLeaseOps[item]['output_data']['Response']['TTL'] >= getLeaseOps[item]['output_data']['Response']['TTL'])
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Kill the Leader."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'kill', LeaderUUID['/0/leader-uuid'], wantlist=True) }}"

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Again wait until new leader election happens."
      vars:
         stage: "wait_for_new_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != LeaderUUID['/0/leader-uuid']
      retries: 10
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Verify already taken leases gets updated with new leader."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'outFileName': 'lookup_lease_after_new_leader_{{ item }}'
                 }
      set_fact:
        lookup_aftr_new_leader: "{{ lookup_aftr_new_leader|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param, wantlist=True)] }}"
      failed_when: >
        (lookup_aftr_new_leader[item]['outfile_status'] != 0) or
        (lookup_aftr_new_leader[item]['output_data']['Response']['Status'] != "Success") or
        (lookup_aftr_new_leader[item]['output_data']['Response']['TTL'] > 60) or
        (lookup_aftr_new_leader[item]['output_data']['Response']['TTL'] < 20) or
        (lookup_aftr_new_leader[item]['output_data']['Response']['LeaseState'] != "GRANTED") or
        (lookup_aftr_new_leader[item]['output_data']['Response']['TimeStamp']['LeaderTerm'] <= lookupLeaseOps[item]['output_data']['Response']['TimeStamp']['LeaderTerm']) or
        (lookup_aftr_new_leader[item]['output_data']['Response']['TimeStamp']['LeaderTime'] >= lookupLeaseOps[item]['output_data']['Response']['TimeStamp']['LeaderTime'])
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Kill the Peer 1 to restart it in child recipe."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'kill', FollowerUUIDs[0], wantlist=True) }}"

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
