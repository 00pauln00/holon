- name: "lease_validation_after_leader_kill"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "lease_validation_after_leader_kill"
     parent: None

  tasks:
  - block:
    - name: "{{ recipe_name }}: Get the non-running peers list to select first peer to start"
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "Start 5 peers in the cluster"
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ NonRunningServers[item] }}"
      loop: "{{ range(0, NonRunningServers | length) | list }}"

    - name: "{{ recipe_name }}: Wait until leader election happens."
      vars:
         stage: "wait_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != "null"
      retries: 10
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Get the raft values for all running peers"
      vars:
         stage: "stage0_get_all"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
            - "/raft_root_entry/0/leader-time"
         peers_val: "{{ lookup('niova_ctlrequest', 'lookup', LeaderUUID['/0/leader-uuid'], raft_keys, wantlist=True) }}"
      debug:
        msg: "Getting stats for all running peers: {{ peers_val }}"
      #no_log: true
      with_items:
         - "{{ peers_val }}"
      register: stage0_peers_vals

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: Generate new resource
      shell: "/usr/bin/uuid"
      register: resourceUUID

    - name: Generate new client
      shell: "/usr/bin/uuid"
      register: clientUUID

    - name: "{{ recipe_name }}: Start niova-block-ctl process."
      vars:
          input_param: {
             'nisd_dev_size': '68719476736',
             'lookout_uuid': '',
             'alt_name': 'nisd{{item}}'
              }
      set_fact:
         get_nisd: "{{ lookup('nisd_handler', 'niova-block-ctl', input_param, wantlist=True) }}"
      loop: "{{ range(0, nnisds | int) }}"
      #no_log: True

    - name: "{{ recipe_name }}: Start nisd process."
      vars:
         input_param: {
                  'nisd_uuid' : '{{ get_nisd }}',
                  'uport' : '1053',
                  'lookout_uuid': ''
                  }
      debug:
         msg: "{{ lookup('nisd_handler', 'nisd', input_param, wantlist=True) }}"
      #no_log: True

    - pause:
        seconds: 2

    #TODO Get the TS from NISD

    - name: "{{ recipe_name }}: Store term and leader-time for old Leader"
      vars:
         old_leader: "{{ LeaderUUID['/0/leader-uuid'] }}"
      debug:
        msg: "Old Leader UUID"
      #no_log: true
      with_items:
         - "{{ old_leader }}"
      register: orig_leader

    - name: "{{ recipe_name }}: Kill the Leader."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'kill', orig_leader['results'][0]['item'], wantlist=True) }}"

    - name: "{{ recipe_name }}: Get the running peers list."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Again wait until new leader election happens."
      vars:
         stage: "wait_for_new_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != "null"
      retries: 10
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    #TODO Verify NISD should update TS from new leader

    #TODO Validate lease with new leader

    - name: "{{ recipe_name }}: Perform some Writes to the NISD."
      vars:
         input_param: {
                 'nisd_uuid_to_write' : 'unix:{{ get_nisd }}',
                 'vdev' : '{{ resourceUUID.stdout }}',
                 'read_operation_ratio_percentage' : '0',
                 'random_seed' : '123',
                 'client_uuid' : '{{ clientUUID.stdout }}',
                 'request_size_in_bytes' : '32',
                 'queue_depth' : '1',
                 'num_ops' : '50',
                 'integrity_check' : True,
                 'sequential_writes' : False,
                 'blocking_process' : False,
                 'lookout_uuid': ''
                 }
      debug:
         msg: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"


