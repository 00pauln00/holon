- import_playbook: basic_leader_election2.yml
- name: "Bulk Recovery With EmptyDB"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "bulk_recovery_with_emptyDB"
     parent: "basic_leader_election2"
     num_writes: 10000
     raft_root_entry_keys:
              - "/raft_root_entry/0/leader-uuid"
              - "/raft_root_entry/0/peer-uuid"
              - "/raft_root_entry/0/term"
              - "/raft_root_entry/0/commit-idx"
              - "/raft_root_entry/0/sync-entry-idx"
              - "/raft_root_entry/0/state"
              - "/raft_root_entry/0/lowest-idx"
              - "/raft_root_entry/0/checkpoint-idx"
  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Get the latest list of running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get the values from all 3 peers."
      vars:
         stage: "stage0_get_all"
         peer_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Get the raft values for running peers: {{ peer_values }}"
      no_log: true
      with_items:
       - "{{ peer_values }}"
      register: stage0_values

    - name: "{{ recipe_name }}: Store the UUID for peer4 which needs to be started."
      vars:
        peer4: "{{ NonRunningServers[0] }}"
      debug:
        msg: "Get the new peer to start: {{ peer4 }}"
      with_items:
        - "{{ peer4 }}"
      register: newlyStartedPeer4

    - debug:
        msg: "{{ newlyStartedPeer4['results'][0]['item'] }}"

    - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
      include_role:
        name: common
        tasks_from: get_new_client_uuid
      register: client_uuid

    - debug:
        msg: "Client UUID: {{ client_uuid }}"

    - name: "{{ recipe_name }}: Generate App UUID"
      shell: "/usr/bin/uuid"
      register: app_uuid

    - name: "{{ recipe_name }}: Start client process"
      include_role:
        name: common
        tasks_from: start_client
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Verify leader is viable."
      include_role:
        name: common
        tasks_from: verify_leader_viable
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name}}: Write at seqno 0 and perform the write {{ num_writes }} times."
      vars:
        stage: "write"
        cmd: "input@{{ app_uuid.stdout }}:0:0:0:0.write:0.{{ num_writes }}"
        where: "/pumice_db_test_client/input"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name}}: Wait until all write completes from client"
      vars:
        stage: "wait_for_write_op"
      debug:
        msg: "Waiting for client to finish writing"
      until: lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, '/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno', wantlist=True) | dict2items | map(attribute='value') | list | first == (num_writes - 1)
      retries: 500
      delay: 1

    - name: "{{ recipe_name}}: Get the client parameters after successful write completion."
      vars:
        app_uuid_string: "{{ app_uuid.stdout }}:0:0:0:0"
        stage: "aftrWrComp"
        raft_client_keys:
          - "/pumice_db_test_client/pmdb-test-apps/0/app-user-id"
          - "/pumice_db_test_client/pmdb-test-apps/0/status"
          - "/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno"
          - "/pumice_db_test_client/pmdb-test-apps/0/pmdb-write-pending"
          - "/pumice_db_test_client/pmdb-test-apps/0/app-sync"
          - "/pumice_db_test_client/pmdb-test-apps/0/app-seqno"
        client_vals_after_wr: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_client_keys, wantlist=True) }}"
      debug:
        msg: "Verify parameters after successful write operation"
      failed_when: >
            (client_vals_after_wr['/0/app-user-id'] != app_uuid_string) or
            (client_vals_after_wr['/0/status'] != "Success") or
            (client_vals_after_wr['/0/pmdb-seqno'] != (num_writes - 1)) or
            (client_vals_after_wr['/0/pmdb-write-pending'] != false) or
            (client_vals_after_wr['/0/app-sync'] != true) or
            (client_vals_after_wr['/0/app-seqno'] != num_writes)

    - name: "{{ recipe_name }}: Verify commit-idx gets incremented on all peers after write operation."
      vars:
         orig_CI: "{{ stage0_values['results'][item]['item']['/0/commit-idx'] }}"
         stage: "getValsFrmAll"
      debug:
        msg: "Verify Commit-Idx get incrementing on all peers."
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/commit-idx', wantlist=True) | dict2items | map(attribute='value') | list | first == (num_writes | int) + (orig_CI | int)
      retries: 60
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Start peer with empty DB."
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ newlyStartedPeer4['results'][0]['item'] }}"

    - name: "{{ recipe_name }}: Apply fault injection on newly started peer."
      include_role:
        name: common
        tasks_from: set_fault_injection_and_verify
      vars:
        ServerUUID: "{{ newlyStartedPeer4['results'][0]['item'] }}"
        fault_injection_name: "raft_force_set_max_scan_entries"

    - name: "{{ recipe_name }}: Set max-scan-entries on peer4."
      vars:
        stage: "set_max_scan_entries"
        wait_for_ofile: False
        cmd: "max-scan-entries@1000"
        where: "/raft_net_info/max-scan-entries"
        key: "/raft_net_info/max-scan-entries"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', newlyStartedPeer4['results'][0]['item'], cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Set log-reap-factor on peer4."
      vars:
        stage: "set_log_reap_factor"
        wait_for_ofile: False
        cmd: "log-reap-factor@2"
        where: "/raft_net_info/log-reap-factor"
        key: "/raft_net_info/log-reap-factor"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', newlyStartedPeer4['results'][0]['item'], cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Get the latest list of running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Verify commit-idx gets incremented on newly started peer."
      vars:
         orig_CI: "{{ stage0_values['results'][0]['item']['/0/commit-idx'] }}"
         stage: "getCIFrmPeer4"
      debug:
        msg: "Verify Commit-Idx get incrementing on all peers."
      until: lookup('niova_ctlrequest', 'lookup', newlyStartedPeer4['results'][0]['item'], '/raft_root_entry/0/commit-idx', wantlist=True) | dict2items | map(attribute='value') | list | first == (num_writes | int) + (orig_CI | int)
      retries: 60
      delay: 1

    - name: "{{ recipe_name }}: Verify leader-uuid, term and commit-idx on all peers"
      vars:
         initial_vals: "{{ stage0_values['results'][0]['item']}}"
         stage: "recipeCleanUp"
         getAll: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], raft_root_entry_keys, wantlist=True) }}"
      debug:
        msg: "Verify all values on all peers."
      failed_when: >
           (getAll["/0/leader-uuid"] != initial_vals["/0/leader-uuid"]) or
           (getAll["/0/term"] != initial_vals["/0/term"]) or
           (getAll["/0/commit-idx"] != initial_vals["/0/commit-idx"] + num_writes)
      loop: "{{ range(0, NRunningPeers|length) | list }}"

    - name: "{{ recipe_name }}:  Kill the peer4 to restart it with StaleDB."
      debug:
        msg: "{{ lookup('niova_raftprocess', 'kill', newlyStartedPeer4['results'][0]['item'], wantlist=True) }}"









