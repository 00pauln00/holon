- import_playbook: basic_leader_election.yml
- name: "prevote_corner_case1"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "prevote_corner_case1"
     parent: "basic_leader_election"
     raft_keys:
              - "/raft_root_entry/0/peer-uuid"
              - "/raft_root_entry/0/leader-uuid"
              - "/raft_root_entry/0/term"
              - "/raft_root_entry/0/commit-idx"
              - "/raft_root_entry/0/sync-entry-idx"
              - "/raft_root_entry/0/sync-entry-term"
              - "/raft_root_entry/0/sync-entry-crc"
              - "/raft_root_entry/0/sync-entry-data-size"
              - "/raft_root_entry/0/state"
              - "/raft_root_entry/0/last-applied"
              - "/raft_root_entry/0/last-applied-cumulative-crc"
  
  tasks:
  - block:
    - name: "{{ recipe_name }}: Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Get the latest list of running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    #Steps 1 to 4.
    - name: "{{ recipe_name }}: Disable net-send recv, apply fault injection, check for term value."
      include_role:
         name: common
         tasks_from: prevote_corner_case

    #Enabling Msg(Recv) from peer4 to the cluster.
    - name: "{{ recipe_name }}: Enable Msg(Recv) from peer4 to the cluster."
      vars:
        stage: "enable_peers_mode"
        cmd: "net_recv_enabled@true"
        where: "/ctl_svc_nodes/uuid@{{ NRunningPeersBefore[item] }}"
        enable_mode: "{{ lookup('niova_ctlrequest', 'apply_cmd', peer4, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ enable_mode }}"
      loop: "{{ range(0, NRunningPeersBefore | length) | list }}"
      no_log: True

    - name: "{{ recipe_name }}: Get term value of peer 4 after enabling."
      vars:
        stage: "get_term_val_after"
        raft_root_entry: "{{ lookup('niova_ctlrequest', 'lookup', peer4, '/raft_root_entry/0/term', wantlist=True) }}"
      debug:
         msg: "Getting raft_root_entry for all servers."
      no_log: true
      with_items:
         - "{{ raft_root_entry }}"
      register: peer4_term_after_en

    - name: "{{ recipe_name }}: Check if term is getting incremented after enabling net_recv on peer4."
      debug:
        msg: "Check if term is getting incremented"
      failed_when: peer4_term_after_en['results'][0]['item']['/0/term'] ==  peer4_term_after_fi['results'][0]['item']['/0/term']

    - name: "{{ recipe_name }}: Wait until leader election happens."
      vars:
         stage: "wait_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != "null"
      retries: 4
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"
      loop_control:
        pause: 2

    - name: "{{ recipe_name }}: Get the leader and follower uuids."
      include_role:
         name: common
         tasks_from: get_follower_stats

    - set_fact: LeaderUUID_after="{{ LeaderUUID['/0/leader-uuid'] }}"
    - name: "{{ recipe_name }}: Check if new leader is elected."
      debug:
        msg: "Check if new leader is elected."
      failed_when: LeaderUUID_after == LeaderUUID_before

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
           terminate_recipe: true
