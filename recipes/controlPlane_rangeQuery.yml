- name: "controlPlane_rangeQuery"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "controlPlane_rangeQuery"

  tasks:
  - block:

    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: "{{ recipe_name }}: Start pmdb and proxy servers."
       include_role:
          name: common
          tasks_from: pmdb_cluster_init
       vars:
         number_of_clients: 2
         number_of_PMDBServers: 5

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeWrite with n as 5."
       vars:
         input_param: {
                'Operation': 'write',
                'OutfileName': 'Rangewrite_output',
                'NoofWrites': '5',
                'wait_for_outfile': True
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc"
       with_items:
          - "{{ ncpcliwr }}"
       register: writeres5keys
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status"
       debug:
         msg:
           - "Check write outfile status"
       no_log: true
       failed_when: >
         (writeres5keys['results'][0]['item']['outfile_status'] != 0)

     - name: "{{ recipe_name }}: Verify write status"
       debug:
         msg: "Check write response status: {{ item['Response']['Status'] }}"
       no_log: true
       failed_when: >
          (item['Response']['Status'] != 0)
       loop: "{{ writeres5keys['results'][0]['item']['output_data'] }}"

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with n as 5."
       vars:
         input_param: {
                 'Key': '*',
                 'Operation': 'read',
                 'OutfileName': 'RangeRead_output',
                 'NoofWrites': '5',
                 'seqNo': '',
                 'wait_for_outfile': True
                }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc."
       with_items:
         - "{{ ncpclird }}"
       register: readres5keys
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status and read status"
       debug:
        msg: "Check read outfile status and read status"
       no_log: true
       failed_when:
         (readres5keys['results'][0]['item']['outfile_status'] != 0) or
         (readres5keys['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

     - name: "{{ recipe_name }}: Compare write and read output with all the keys passed."
       vars:
         readall: "{{ readres5keys['results'][0]['item']['output_data'][0]['Response']['ResultMap']}}"
       debug:
         msg: "compare read and write output with all the keys passed"
       failed_when:  (item['Request']['Value'] | b64decode) != (readall[item['Request']['Key']] | b64decode)
       loop: "{{ writeres5keys['results'][0]['item']['output_data'] }}"

     - set_fact:
         firstkey: "{{ writeres5keys['results'][0]['item']['output_data'][0]['Request']['Key'] }}"

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead single key."
       vars:
         input_param: {
                'Key': '{{ firstkey }}',
                'Operation': 'read',
                'OutfileName': 'singleRangeRead_output',
                'NoofWrites': '5',
                'seqNo': '',
                'wait_for_outfile': True
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read single key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: singlereadres
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status and read status"
       debug:
        msg: "Check read outfile status and read status"
       failed_when:
         (singlereadres['results'][0]['item']['outfile_status'] != 0) or
         (singlereadres['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

     - name: "{{ recipe_name }}: Compare read output and write output for single key."
       vars:
          readsingle: "{{ singlereadres['results'][0]['item']['output_data'][0]['Response']['ResultMap'][writeres5keys['results'][0]['item']['output_data'][0]['Request']['Key']] }}"
          writesingle: "{{ writeres5keys['results'][0]['item']['output_data'][0]['Request']['Value'] }}"
       debug:
         msg: "compare read and write for single task"
       failed_when: (readsingle | b64decode) != (writesingle | b64decode)

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with prefix passed."
       vars:
         input_param: {
                'Key': 'v*',
                'Operation': 'read',
                'OutfileName': 'RangeRead_output_prefix',
                'NoofWrites': '5',
                'seqNo': '',
                'wait_for_outfile': True
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc with prefix passed."
       with_items:
          - "{{ ncpclird }}"
       register: readres
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status and read status"
       debug:
        msg: "Check read outfile status and read status"
       no_log: true
       failed_when:
         (singlereadres['results'][0]['item']['outfile_status'] != 0) or
         (singlereadres['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

     - name: "{{ recipe_name }}: Get the output as per prefix in write dictionary."
       vars:
         vPrefix: "{{ item['Request']['Key'] | regex_search('^v.+$', multiline=True, ignorecase=True) }}"
       set_fact:
         list1: "{{ list1|default([]) + [vPrefix] }}"
       loop: "{{ writeres5keys['results'][0]['item']['output_data'] }}"
       no_log: true

     - name: "{{ recipe_name }}: Get list of <v.> prefix key."
       set_fact:
         list2: "{{list2|default([]) + [item]}}"
       when: item != ""
       with_items:
        - "{{list1}}"
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with prefix passed till <v.UUID>."
       vars:
         vUUIDPrefix: "{{ list2[0] | truncate(39, True, '') }}"
         input_param: {
                'Key': '{{ vUUIDPrefix }}*',
                'Operation': 'read',
                'OutfileName': 'RangeRead_vUUIDprefix_output',
                'NoofWrites': '5',
                'seqNo': '',
                'wait_for_outfile': True
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc till v.uuid."
       with_items:
          - "{{ ncpclird }}"
       register: readWithPrefix_vUUID
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status and read status"
       debug:
        msg: "Check read outfile status and read status"
       no_log: true
       failed_when:
         (readWithPrefix_vUUID['results'][0]['item']['outfile_status'] != 0) or
         (readWithPrefix_vUUID['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

     - name: "{{ recipe_name }}: Compare read output with the v.UUID.prefix passed"
       include_role:
          name: common
          tasks_from: compare_uuid_prefix_value
       vars:
         wrRes: "{{ writeres5keys }}"
         rdRes: "{{ readWithPrefix_vUUID['results'][0]['item']['output_data'][0]['Response']['ResultMap'][item] }}"
       with_items: "{{ readWithPrefix_vUUID['results'][0]['item']['output_data'][0]['Response']['ResultMap']  | dict2items |  map(attribute='key')| list }}"

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with Invalid prefix passed."
       vars:
         input_param: {
                'Key': 'Welcome*',
                'Operation': 'read',
                'OutfileName': 'RangeRead_InvalidPrefix_output',
                'NoofWrites': '5',
                'seqNo': '',
                'wait_for_outfile': True
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc with invalid prefix passed."
       with_items:
          - "{{ ncpclird }}"
       register: readWithInvalidPrefix
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status and read status"
       debug:
        msg: "Check read outfile status"
       no_log: true
       failed_when:
         (readWithInvalidPrefix['results'][0]['item']['outfile_status'] != 0) or
         (readWithInvalidPrefix['results'][0]['item']['output_data'][0]['Response']['Status'] != -1)

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
