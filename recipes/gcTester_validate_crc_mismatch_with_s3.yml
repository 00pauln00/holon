- name: "gcTester_validate_crc_mismatc_with_s3"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "gcTester_validate_crc_mismatch_with_s3"
     parent: None

  tasks:
  - block:
    - name: "{{ recipe_name }}: Start minio server"
      vars:
        s3_dir: "minio_data"
      debug:
         msg:
          - "{{ lookup('s3_handler', 'start_s3', s3_dir, wantlist=True) }}"
      when: s3Support == "true"

    - name: "{{ recipe_name }}: Generate random DBI requests."
      include_role:
        name: common
        tasks_from: generate_pattern_dbis
      vars:
        Type: "0"     #You can pass different pattern value here.
        ChunkNum: "-1"
      register: chunk

    - name: "{{ recipe_name }}: Upload Corrupted File."
      vars:
        operation: "upload"
        Chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('s3_handler', 'performCorruptedFileOps', operation, Chunk, wantlist=True) }}"

    - name: "{{ recipe_name }}: Perform GC."
      vars:
        debugMode: false
        Chunk: "{{ chunk['msg'][0] }}"
        crcCheck: true
      debug:
         msg:
          - "{{ lookup('s3_handler', 'start_gc', debugMode, Chunk, crcCheck, wantlist=True) }}"

    - name: "{{ recipe_name }}: Marker file present or not."
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
        mType: "Both"
      debug:
         msg: "{{ lookup('s3_handler', 'GetSeqOfMarker', mType, Chunk, wantlist=True) }}"
      register: marker_check

    - name: "{{ recipe_name }}: Compare Gc And Nisd EndSeq"
      set_fact:
        gcMarkerEndSeq: "{{ marker_check.msg[0] }}"
        NisdMarkerEndSeq: "{{ marker_check.msg[1] }}"
      when: marker_check.msg is defined and marker_check.msg[0] | selectattr('!=', 'none') 

    - debug:
         msg: "{{gcMarkerEndSeq}} and {{NisdMarkerEndSeq}}"
      when: cMarkerEndSeq is defined and NisdMarkerEndSeq is defined
      failed_when: gcMarkerEndSeq != NisdMarkerEndSeq

    - name: "{{ recipe_name }}: Delete the corrupted file from s3."
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
        operation: "delete"
      debug:
         msg: "{{ lookup('s3_handler', 'performCorruptedFileOps', operation, Chunk, wantlist=True) }}"

    - name: "{{ recipe_name }}: Now upload original file to s3."
      vars:
        operation: "upload"
        Chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('s3_handler', 'pushOrigFileToS3', operation, Chunk, wantlist=True) }}"

    - name: "{{ recipe_name }}: After uploading the original file, perform GC operation."
      vars:
        debugMode: false
        Chunk: "{{ chunk['msg'][0] }}"
        crcCheck: true
      debug:
         msg: "{{ lookup('s3_handler', 'start_gc', debugMode, Chunk, crcCheck, wantlist=True) }}"

    - name: "{{ recipe_name }}: Marker file present or not."
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
        mType: "Both"
      debug:
         msg: "{{ lookup('s3_handler', 'GetSeqOfMarker', mType, Chunk, wantlist=True) }}"
      register: marker_check

    - name: "{{ recipe_name }}: Compare Gc and Nisd EndSeq"
      set_fact:
        gcMarkerEndSeq: "{{ marker_check.msg[0] }}"
        NisdMarkerEndSeq: "{{ marker_check.msg[1] }}"
      when: marker_check.msg is defined and marker_check.msg[0] | selectattr('!=', 'none') | length > 0

    - debug:
         msg: "{{gcMarkerEndSeq}} and {{NisdMarkerEndSeq}}"
      when: gcMarkerEndSeq is defined and NisdMarkerEndSeq is defined
      failed_when: (gcMarkerEndSeq != NisdMarkerEndSeq) or (gcMarkerEndSeq is none)

