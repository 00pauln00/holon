- name: "gcTester_validate_crc_mismatch_with_s3"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "gcTester_validate_crc_mismatch_with_s3"
     parent: None

  tasks:
  - block:
    - name: "{{ recipe_name }}: Start minio server"
      vars:
        s3_dir: "/local/minio_data"
      debug:
         msg:
          - "{{ lookup('obj_storage', 'minio', 'start', s3_dir, wantlist=True) }}"
      when: s3Support == "true"

    - name: "{{ recipe_name }}: Generate random DBI requests."
      include_role:
        name: common
        tasks_from: generate_pattern_dbis
      vars:
        Type: "0"     #You can pass different pattern value here.
        ChunkNum: "-1"
      register: chunk

    - name: "{{ recipe_name }}: corrupt last dbi file"
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('helper', 'corrupt_last_file', Chunk, wantlist=True) }}"
      register: paths

    - name: "{{ recipe_name }}: upload corrupted file"
      vars:
        formal_params: {
                "chunk" : "{{ chunk['msg'][0] }}",
                "path": "{{ paths['msg'][0] }}",
                }
      debug:
         msg: "{{ lookup('obj_storage', 'operation', 'upload', formal_params, wantlist=True) }}"

    - name: "{{ recipe_name }}: Perform GC."
      vars:
        input_params:
          debug_mode: "false"
          chunk: "{{ chunk['msg'][0] }}"
          crc_check: "true"
      debug:
         msg: "{{ lookup('garbage_collection', 'single_exec', 'start', input_params, wantlist=True) }}"

    - name: "{{ recipe_name }}: get gc and nisd markers"
      vars:
        formal_params: {
                "chunk" : "{{ chunk['msg'][0] }}",
                }
      debug:
         msg: "{{ lookup('obj_storage', 'get_markers', formal_params, wantlist=True) }}"
      register: marker_check

    - name: "{{ recipe_name }}: compare gc and nisd markers"
      set_fact:
        gc_marker: "{{ marker_check.msg[0] }}"
        nisd_marker: "{{ marker_check.msg[1] }}"
      when: marker_check.msg is defined and marker_check.msg[0] != 'none'

    - debug:
         msg: "{{gc_marker}} and {{nisd_marker}}"
      when: gc_marker is defined and nisd_marker is defined
      failed_when: gc_marker != nisd_marker
    
    - name: "{{ recipe_name }}: delete gc download folder"
      vars:
        gc_dir: "gc-download"
      debug:
         msg: "{{ lookup('helper', 'delete_dir', gc_dir, wantlist=True) }}"
    
    - name: "{{ recipe_name }}: delete corrupted file"
      vars:
        formal_params: {
                "chunk" : "{{ chunk['msg'][0] }}",
                "path": " {{ paths['msg'][0] }}",
                }

      debug:
         msg: "{{ lookup('obj_storage', 'operation', 'delete', formal_params, wantlist=True) }}"

    - name: "{{ recipe_name }}: upload original file"
      vars:
        formal_params: {
                 "chunk" : "{{ chunk['msg'][0] }}",
                 "path": "{{ paths['msg'][1] }}",
                 }
      debug:
         msg: "{{ lookup('obj_storage', 'operation', 'upload', formal_params, wantlist=True) }}"

    - name: "{{ recipe_name }}: After uploading the original file, perform GC operation."
      vars:
        input_params:
          debug_mode: "false"
          chunk: "{{ chunk['msg'][0] }}"
          crc_check: "true"
      debug:
         msg: "{{ lookup('garbage_collection', 'single_exec', 'start', input_params, wantlist=True) }}"

    - name: "{{ recipe_name }}: get gc and nisd markers"
      vars:
        formal_params: {
                "chunk" : "{{ chunk['msg'][0] }}",
                }
      debug:
         msg: "{{ lookup('obj_storage', 'get_markers', formal_params, wantlist=True) }}"
      register: marker_check

    - name: "{{ recipe_name }}: Compare Gc and Nisd EndSeq"
      set_fact:
        gc_marker: "{{ marker_check.msg[0] }}"
        nisd_marker: "{{ marker_check.msg[1] }}"
      when: marker_check.msg is defined and marker_check.msg[0] | selectattr('!=', 'none') | length > 0

    - debug:
         msg: "{{gc_marker}} and {{nisd_marker}}"
      when: gc_marker is defined and nisd_marker is defined
      failed_when: (gc_marker != nisd_marker) or (gc_marker is none)
    
    - name: "{{ recipe_name }}: Start data validation"
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('data_gen', 'validator', Chunk, wantlist=True) }}"

