- import_playbook: basic_raft_operation_with_client_activity.yml
  when: ClusterParams['ctype'] == "pumicedb"

- name: "Rebuild_by_committee"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "rebuild_by_committee"
     parent: "basic_raft_operation_with_client_activity"
     requirement: "pumicedb"
     rebuild_num_writes: 1000
     number_of_app_uuids: 1

  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Verify the holon started with pumicedb cluster"
      include_role:
        name: common
        tasks_from: recipe_compatibility_requirement

    - name: "{{ recipe_name }}: Get quorum value."
      include_role:
        name: common
        tasks_from: npeers_for_basic_leader_election

    - debug:
        msg: "Number of followers to be paused so that quorum will be intacted: {{ NRunningPeers | length - npeers_for_leader_elect | int }}"

    #Get the value of number_of_followers_to_pause so that quorum will be intacted.
    - name: "{{ recipe_name }}: Set number of followers to be paused."
      set_fact:
         number_of_followers_to_pause: "{{ NRunningPeers | length - npeers_for_leader_elect | int }}"

    - name: "{{ recipe_name }}: Get cluster information before pausing followers."
      include_role:
        name: common
        tasks_from: get_follower_stats

    #Get leader uuid.
    - set_fact:
         original_leader: "{{ LeaderUUID | dict2items | map(attribute='value') | list | first }}"

    - name: "{{ recipe_name }}: Get the list of peer UUIDs before pausing followers."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Pause number of followers."
      set_fact:
         pause_followers: "{{ lookup('niova_raftprocess', 'pause', FollowerUUIDs[item], wantlist=True) }}"
         inactive_followers: "{{ inactive_followers | default([]) + [FollowerUUIDs[item]] }}"
      loop: "{{ range(0, number_of_followers_to_pause | int) | list }}"

    - set_fact:
         unpaused_followers: "{{ FollowerUUIDs | difference(inactive_followers) }}"

    - name: "{{ recipe_name }}: Get the list of peer UUIDs after pausing followers."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    #Create set of required number of app_uuids.
    - name: "{{ recipe_name }}: Get set of required number of app_uuids."
      include_role:
        name: common
        tasks_from: create_app_uuid_set
      vars:
        number_of_apps: "{{ number_of_app_uuids }}"

    - name: "{{ recipe_name }}: Verify leader is viable."
      include_role:
        name: common
        tasks_from: verify_leader_viable
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    #Perform write operations for multiple clients. (passing one client at a time.)
    - name: "{{ recipe_name }}: Perform write operations for multiple clients."
      include_role:
         name: common
         tasks_from: perform_writes
      vars:
        pmdb_apps: "{{ pmdb_app_uuids }}"
        ClientUUID: "{{ client_uuid.stdout }}"
        constant_number_of_writes: "{{ rebuild_num_writes }}"

    #Unpause inactive followers.
    - name: "{{ recipe_name }}: Resume inactive followers."
      debug:
        msg: "Resuming inactive followers {{ lookup('niova_raftprocess', 'resume', inactive_followers[item], wantlist=True) }}"
      loop: "{{ range(0, inactive_followers | length) | list }}"

    #Set num_remaining = 5.
    - name: "{{ recipe_name }}: Set num remaining = 5 for unpaused followers."
      vars:
        stage: "set_num_remaining"
        cmd:  "num_remaining@5"
        where: "/fault_injection_points/name@raft_follower_ignores_non_hb_AE_request"
      set_fact:
         set_num_remaining: "{{ lookup('niova_ctlrequest', 'apply_cmd', unpaused_followers[item], cmd, where, wantlist=True) }}"
      loop: "{{ range(0, unpaused_followers | length) | list }}"

    #Apply fault injection on unpaused followers."
    - name: "{{ recipe_name }}: Ignore writes on unpaused_followers using fault injection."
      include_role:
        name: common
        tasks_from: set_fault_injection_and_verify
      vars:
        ServerUUID: "{{ unpaused_followers[item] }}"
        fault_injection_name: "raft_follower_ignores_non_hb_AE_request"
      loop: "{{ range(0, unpaused_followers | length) | list }}"

    #Set the value for fault_injected_peers.
    - set_fact:
         fault_injected_peers: "{{ unpaused_followers }}"

    - name: "{{ recipe_name }}: Get the list of peer UUIDs after unpausing followers."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get commit-idx values of unpaused followers after applying fault injection."
      vars:
        stage: "get_commit_idx"
        commit_idx_vals: "{{ lookup('niova_ctlrequest', 'lookup', unpaused_followers, '/raft_root_entry/0/commit-idx', wantlist=True) }}"
      debug:
        msg: "{{ commit_idx_vals }}"
      with_items:
          - "{{ commit_idx_vals }}"
      register: commit_idx_unpaused
      no_log: true
      loop: "{{ range(0, 10) | list }}"
      loop_control:
        pause: 1

    - name: "{{ recipe_name }}: Verifying if commit-idx of unpaused followers is greater than 101."
      vars:
        commit_idx0: "{{ commit_idx_unpaused['results'][item]['msg'][0]['/0/commit-idx'] }}"
        commit_idx1: "{{ commit_idx_unpaused['results'][item]['msg'][1]['/0/commit-idx'] }}"
      debug:
        msg: "Verifying if commit-idx of unpaused followers is greater than 101."
      failed_when: >
         (commit_idx0 |int < 101) or
         (commit_idx1 |int < 101)
      loop: "{{ range(0, 10) | list }}"

    - name: "{{ recipe_name }}: Compare commit-idx of unpaused followers and verify if they are not increasing."
      vars:
        commit_idx0: "{{ commit_idx_unpaused['results'][item]['msg'][0]['/0/commit-idx'] }}"
        commit_idx0_next: "{{ commit_idx_unpaused['results'][item+1]['msg'][0]['/0/commit-idx'] }}"
        commit_idx1: "{{ commit_idx_unpaused['results'][item]['msg'][1]['/0/commit-idx'] }}"
        commit_idx1_next: "{{ commit_idx_unpaused['results'][item+1]['msg'][1]['/0/commit-idx'] }}"
      debug:
        msg: "Comparing commit-idx of unpaused followers."
      failed_when: >
            (commit_idx0 != commit_idx0_next) or
            (commit_idx1 != commit_idx1_next)
      loop: "{{ range(0, 9) | list }}"

    #Kill original leader.
    - name: "{{ recipe_name }}: Kill original leader."
      debug:
        msg: "Killing original leader {{ lookup('niova_raftprocess', 'kill', original_leader, wantlist=True) }}"

    - name: "{{ recipe_name }}: Wait until leader election happens."
      include_role:
        name: common
        tasks_from: wait_until_leader_election

    - name: "{{ recipe_name }}: Get cluster information."
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Get the list of peer UUIDs."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Verify if num_remaining is 0."
      include_role:
        name: common
        tasks_from: verify_num_remaining
      vars:
        ServerUUID: "{{ unpaused_followers[item] }}"
        fault_injection_name: "raft_follower_ignores_non_hb_AE_request"
      loop: "{{ range(0, unpaused_followers | length) | list }}"

    #Remove previously applied fault injection.
    - name: "{{ recipe_name }}: Remove previously applied fault injection."
      include_role:
        name: common
        tasks_from: remove_fault_injection_and_verify
      vars:
        ServerUUID: "{{ fault_injected_peers[item] }}"
        fault_injection_name: "raft_follower_ignores_non_hb_AE_request"
      loop: "{{ range(0, fault_injected_peers | length) | list }}"

    #See if recovery happens with new leader.
    - name: "{{ recipe_name }}: Get commit-idx of all running peers and wait until all running peers show same commit idx."
      vars:
        stage: "get_commit_idx"
        raft_key:
          - "/raft_root_entry/0/commit-idx"
        get_commit_idx: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_key, wantlist=True) }}"
        commit_idx_has_unique_val: "{{ get_commit_idx | map(attribute='/0/commit-idx')| list | unique | length == 1 }}"
      debug:
        msg: "Waiting until all running peers show same commit idx"
      until: commit_idx_has_unique_val == true
      loop: "{{ range(0, 10) | list }}"
      loop_control:
          pause: 0.5

    - name: "{{ recipe_name }}: Wait until all running peers show same last-applied-cumulative-crc."
      include_role:
        name: common
        tasks_from: wait_until_all_peers_show_same_cum_crc

    #Verify whether quorum has recovered writes.
    - name: "{{ recipe_name }}: Verify last-applied-cumulative-crc and sync-entry-crc are same on all peers."
      include_role:
        name: common
        tasks_from: verify_crc_on_all_peers

    #Recipe cleanup.
    #Restart original leader.
    - name: "Start the previous leader."
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ original_leader }}"

    rescue:
      - name: "Recipe failed"
        set_fact:
          terminate_recipe: true
