- import_playbook: lease_basic_operations.yml

- name: "lease_verify_refresh_functionality"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "lease_verify_refresh_functionality"
    parent: "lease_basic_operations"
  vars_files:
    - ../leaseStateValue.yml

  tasks:
  - block:

    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: Generate new resource
      shell: "/usr/bin/uuid"
      register: resourceUUID

    - name: Generate new client
      shell: "/usr/bin/uuid"
      register: clientUUID

    - name: "{{ recipe_name }}: Perform 'GET' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_inprogress_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'GET', input_param, wantlist=True) }}"
      debug:
         msg: "GET operation"
      with_items:
          - "{{ leaseApp }}"
      register: getLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ getLease['results'][0]['item']['outfile_status'] }}"
      failed_when: >
         (getLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if 'GET' is successful."
      vars:
         wr_response: "{{ getLease['results'][0]['item']['output_data']['LeaseRes'] }}"
      debug:
         msg: "Check if GET is successful"
      failed_when: >
         (wr_response['Status'] != "Success") or
         (wr_response['Client'] != clientUUID.stdout|string) or
         (wr_response['Resource'] != resourceUUID.stdout|string) or
         (wr_response['TTL'] <= 0) or
         (wr_response['LeaseState'] != GRANTED)

    - name: "{{ recipe_name }}: Perform 'LOOKUP' operation."
      vars:
         input_param: {
                'client': '',
                'resource': '{{ resourceUUID.stdout }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_before_refresh_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP_VALIDATE', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: lookupLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ lookupLease['results'][0]['item']['outfile_status'] }}"
      failed_when: >
         (lookupLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if LOOKUP operation is successful."
      vars:
         rd_response: "{{ lookupLease['results'][0]['item']['output_data'] }}"
      debug:
         msg: "Check if lookup is successful."
      failed_when: >
         (rd_response['Status'] != "Success") or
         (rd_response['Client'] != clientUUID.stdout) or
         (rd_response['Resource'] != resourceUUID.stdout) or
         (rd_response['LeaseState'] != GRANTED)

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
