- name: "lease_basic_operations"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "lease_basic_operations"
     parent: None

  tasks:
  - block:
    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: "{{ recipe_name }}: Get the non-running peers list to select first peer to start"
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "Start 5 peers in the cluster"
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ NonRunningServers[item] }}"
      loop: "{{ range(0, NonRunningServers | length) | list }}"

    - name: Generate new resource
      shell: "/usr/bin/uuid"
      register: resourceUUID

    - name: Generate new client
      shell: "/usr/bin/uuid"
      register: clientUUID

    - name: "{{ recipe_name }}: Perform 'LOOKUP' operation on lease which is not taken by any client."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'outFileName': 'lookup_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: lookupLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check write outfile status: {{ lookupLease['results'][0]['item']['outfile_status'] }}"
       #no_log: true
      failed_when: >
         (lookupLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if 'LOOKUP' is successful."
      vars:
         rd_response: "{{ lookupLease['results'][0]['item']['output_data']['Response'] }}"
         operation: "{{ lookupLease['results'][0]['item']['output_data']['Request'] }}"
      debug:
         msg: "Check if LOOKUP is successful."
      failed_when: >
         (operation['Operation'] != "LOOKUP") or
         (rd_response['Client'] != clientUUID.stdout) or
         (rd_response['Resource'] != resourceUUID.stdout) or
         (rd_response['Status'] != 0) or
         (rd_response['LeaseState'] != "Expired") or
         (rd_response['TTL'] != 0)
         

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true

