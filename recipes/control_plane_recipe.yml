- name: "Controlplane_recipe"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "Controlplane_recipe"
    parent: None
    number_of_clients: 3


  tasks:
  - block:
      # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

       # start pmdb servers.
     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Get the leader and follower uuids."
       include_role:
         name: common
         tasks_from: get_follower_stats

      # Get multiple client uuids using common task.
     - name: "Get multiple client uuids."
       include_role:
        name: common
        tasks_from: get_multiple_client_uuids
       loop: "{{ range(0, number_of_clients) | list }}" 

     - name: "Prepare gossip node configs"
       set_fact: gossipCreation="{{lookup('niova_raftconfig', "controlplane", TotalNServersList, ClientUUIDS, wantlist=True)}}"

     # Start all PMDB servers.
     - name: "{{ recipe_name }}: Start 4 pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length - 1) | list }}"

      # Start proxyserver
     - name: "{{ recipe_name }}: Start proxy server."
       include_role:
          name: common
          tasks_from: start_proxy_server
       vars:
          ClientUUID: "{{ ClientUUIDS[item] }}"
       loop: "{{ range(0, ClientUUIDS | length) |list }}"

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         input_param: {
                  'Key': 'Country',
                  'Value': 'India',
                  'Operation': 'write',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'nkvc_write_output'
                  }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ ncpclires }}"
       register: writeres
       no_log : true

     - name: "{{ recipe_name }}: Starting controlplane_client to read the value."
       vars:
         input_param: {
                  'Key': 'Country',
                  'Value': 'India',
                  'Operation': 'read',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'nkvc_read_output'
                  }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ ncpclires }}"
       register: readres
       no_log : true

     - name: "{{ recipe_name }}: compare values after sucessful write/read operation."
       vars:
         wrval: "{{ writeres['results'][0]['item']['write'][0]['Request'] }}"
         rdval: "{{ readres['results'][0]['item']['read'][0]['Response'] }}"
       debug:
         msg: "Verifying parameter after read operation"
       failed_when: >
        (rdval['Status'] != 0) or 
        (rdval['Response'] != "India")

     - name: "{{ recipe_name }}: Store the UUID of one of the pmdb server."
       vars:
         peer: "{{ TotalNServersList[0] }}"
       debug:
         msg: "Get the new peer to start: {{ peer }}"
       with_items:
         - "{{ peer }}"
       register: Peer

     - name: "{{ recipe_name }}: Starting controlplane_client to get the config values."
       vars:
         input_param: {
                  'Key': '{{  Peer["results"][0]["item"] }}',
                  'Value': '',
                  'Operation': 'config',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'config_output'
                  }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ ncpclires }}"
       register: configres
       no_log: true  

       # get list if non-running servers.
     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info      
    
     # Start 5th PMDB servers.
     - name: "{{ recipe_name }}: Start  5th  pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers| length) | list }}"

     - name: "{{ recipe_name }}: Store the UUID of 5th pmdb server."
       vars:
         peer: "{{ TotalNServersList[4] }}"
       debug:
         msg: "Get the new peer to start: {{ peer }}"
       with_items:
         - "{{ peer }}"
       register: Peer5

     - name: "{{ recipe_name }}: Starting controlplane_client to get the config values after starting 5th pmdb server."
       vars:
         input_param: {
                  'Key': '{{  Peer5["results"][0]["item"] }}',
                  'Value': '',
                  'Operation': 'config',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'config_output_5th_pmdb'
                  }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ ncpclires }}"
       register: configres_after_5th_pmdbserver
       no_log : true 

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true



