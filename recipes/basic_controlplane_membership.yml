- name: "basic_controlplane_membership.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "basic_controlplane_membership"
    parent: None
    number_of_clients: 2

  tasks:
  - block:

    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     # Get multiple client uuids using common task.
     - name: "Get multiple client uuids."
       include_role:
        name: common
        tasks_from: get_multiple_client_uuids
       loop: "{{ range(0, number_of_clients) | list }}"

     - name: "Prepare gossip node configs"
       set_fact: gossipCreation="{{lookup('niova_raftconfig', "controlplane", TotalNServersList, ClientUUIDS, wantlist=True)}}"

     # Start 4 PMDB servers.
     - name: "{{ recipe_name }}: Start 4 pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length - 1) | list }}"

     # Start proxy servers
     - name: "{{ recipe_name }}: Start proxy servers."
       include_role:
          name: common
          tasks_from: start_proxy_server
       vars:
          ClientUUID: "{{ ClientUUIDS[item] }}"
       loop: "{{ range(0, ClientUUIDS | length) |list }}"

     - name: "{{ recipe_name }}: Starting controlplane_client to get membership details."
       vars:
         input_param: {
                'Operation': 'membership',
                'OutfileName': 'membership_output'
                 }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "get membership details of running servers."
       with_items:
          - "{{ ncpclires }}"
       register: membership
         #       no_log: true

     - name: "{{ recipe_name }}: Pause for 5 seconds to start pmdb and proxy servers properly."
       pause:
        seconds: 5

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         input_param: {
                'Key': 'Country',
                'Value': 'India',
                'Operation': 'write',
                'IP_addr': '',
                'Port': '',
                'OutfileName': 'write_output', 
                'NoofWrites': '',
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcliwr }}"
       register: writeres
       no_log: true

     - name: "{{ recipe_name }}: Check if write is successful."
       vars:
         wrstatus: "{{ writeres['results'][0]['item']['Response']['Status'] }}"
       debug:
         msg: "Check if write is successful."
       failed_when: >
         (wrstatus|int != 0)

     - name: "{{ recipe_name }}: Starting controlplane_client to read the value."
       vars:
         input_param: {
                'Key': 'Country',
                'Operation': 'read',
                'OutfileName': 'read_output',
                'NoofWrites': '', 
                'seqNo': '',
                'relaxed_consistency': False
                }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "read key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: readres
       no_log: true

     - name: "{{ recipe_name }}: compare values after sucessful write/read operation."
       vars:
         rdval: "{{ readres['results'][0]['item']['Response'] }}"
       debug:
         msg: "Verifying parameter after read operation"
       failed_when: >
         (rdval['Status'] != 0) or
         (rdval['Response'] != "India")

     - name: "{{ recipe_name }}: Starting controlplane_client to get the config values."
       vars:
         input_param: {
                'Operation': 'config',
                'OutfileName': 'config_output'
                 }
       debug:
         msg: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to get membership details."
       vars:
         input_param: {
                'Operation': 'membership',
                'OutfileName': 'pmdbServer_membership'
                 }
         pmdbGossip: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "get membership details of running servers."
       with_items:
          - "{{ pmdbGossip }}"
       register: pmdbMembership
       no_log: true

     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Verify gosssip details of 4 pmdb server."
       vars:
         verifyStatus: "{{ pmdbMembership['results'][0]['item']['membership'][NRunningPeers[item]]['Status'] }}"
       debug:
         msg: "Verifying status of the pmdbs servers."
       failed_when: verifyStatus != "alive"
       loop: "{{ range(0, NRunningPeers | length) | list }}"

     - name: "{{ recipe_name }}: Get the serf nodes from recipe JSON."
       set_fact:
          nodeList: "{{ nodeList | default([]) + [ 'Node_' ~ item ] }}"
       loop: "{{ ClientUUIDS }}"

     - debug:
         msg: "Node name list: {{ nodeList }}"

     - name: "{{ recipe_name }}: Get proxy server's status."
       vars:
         input_param: {
                  'Operation': 'membership',
                  'OutfileName': 'get_nodestatus'
                  }
         getNodeData: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Get node name"
       with_items:
          - "{{ getNodeData }}"
       register: nodeName
       no_log : true

     - name: "{{ recipe_name }}: Check if proxy node status is 'alive'."
       vars:
         verifyNodeStatus: "{{ nodeName['results'][0]['item']['membership'][nodeList[item]]['Status'] }}"
       debug:
         msg: "Verify proxy server's Status"
       failed_when: verifyNodeStatus != "alive"
       loop: "{{ range(0, nodeList | length) | list }}"

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
