- import_playbook: lease_basic_operations.yml

- name: "lease_basic_refresh_operation_on_valid_lease"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "lease_basic_refresh_operation_on_valid_lease"
    parent: "lease_basic_operations"


  tasks:
  - block:

    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: Generate new resource
      shell: "/usr/bin/uuid"
      register: resourceUUID

    - name: Generate new client
      shell: "/usr/bin/uuid"
      register: clientUUID

    - name: "{{ recipe_name }}: Perform 'GET' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_refresh_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'GET', input_param, wantlist=True) }}"
      debug:
         msg: "GET operation"
      with_items:
          - "{{ leaseApp }}"
      register: getLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check outfile status: {{ getLease['results'][0]['item']['outfile_status'] }}"
      no_log: true
      failed_when: >
         (getLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if 'GET' is successful."
      vars:
         wr_response: "{{ getLease['results'][0]['item']['output_data'][0]['LeaseRes'] }}"
      debug:
         msg: "Check if GET is successful"
      failed_when: >
         (wr_response['Status'] != 0) or
         (wr_response['Client'] != clientUUID.stdout|string) or
         (wr_response['Resource'] != resourceUUID.stdout|string) or
         (wr_response['TTL'] <= 0) or
         (wr_response['LeaseState'] != 4)

    - name: "{{ recipe_name }}: Perform 'LOOKUP_VALIDATE' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_before_refresh_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP_VALIDATE', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
          - "{{ leaseApp }}"
      register: lookupLease_before_refresh

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check outfile status: {{ lookupLease_before_refresh['results'][0]['item']['outfile_status'] }}"
      no_log: true
      failed_when: >
         (lookupLease_before_refresh['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if LOOKUP before REFRESH operation is successful."
      vars:
         rd_response: "{{ lookupLease_before_refresh['results'][0]['item']['output_data'][0]['LeaseRes'] }}"
      debug:
         msg: "Check if lookup is successful."
      failed_when: >
         (rd_response['Status'] != 0) or
         (rd_response['Client'] != clientUUID.stdout) or
         (rd_response['Resource'] != resourceUUID.stdout) or
         (rd_response['LeaseState'] != 4)

    - name: "{{ recipe_name }}: Pause for 20 seconds so that TTL value gets changed."
      pause:
        seconds: 20

    - name: "{{ recipe_name }}: Perform 'REFRESH' operation."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'refresh_lease_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'REFRESH', input_param, wantlist=True) }}"
      debug:
         msg: "refresh lease"
      with_items:
          - "{{ leaseApp }}"
      register: refreshLease

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check outfile status: {{ refreshLease['results'][0]['item']['outfile_status'] }}"
      no_log: true
      failed_when: >
         (refreshLease['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if REFRESH is successful."
      vars:
         rf_response: "{{ refreshLease['results'][0]['item']['output_data']['LeaseRes'] }}"
      debug:
         msg: "Check if refresh is successful."
      failed_when: >
        (rf_response['Status'] != 0) or
        (rf_response['LeaseState'] != 4) or
        (rf_response['TTL'] <= 0) or
        (rf_response['Client'] != clientUUID.stdout) or
        (rf_response['Resource'] != resourceUUID.stdout)

    - name: "{{ recipe_name }}: Perform 'LOOKUP_VALIDATE' operation again after refreshing the lease."
      vars:
         input_param: {
                'client': '{{ clientUUID.stdout }}',
                'resource': '{{ resourceUUID.stdout }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_after_refresh_{{ resourceUUID.stdout }}'
                 }
         leaseApp: "{{ lookup('lease_feature', 'LOOKUP_VALIDATE', input_param, wantlist=True) }}"
      debug:
         msg: "lookup lease operation"
      with_items:
        - "{{ leaseApp }}"
      register: lookupLease_after_refresh

    - name: "{{ recipe_name }}: Verify outfile status"
      debug:
        msg: "Check outfile status: {{ lookupLease_after_refresh['results'][0]['item']['outfile_status'] }}"
      no_log: true
      failed_when: >
         (lookupLease_after_refresh['results'][0]['item']['outfile_status'] != 0)

    - name: "{{ recipe_name }}: Check if LOOKUP_VALIDATE is successful."
      vars:
         rd_response: "{{ lookupLease_after_refresh['results'][0]['item']['output_data'][0]['LeaseRes'] }}"
      debug:
         msg: "Check if lookup is successful"
      failed_when: >
         (rd_response['Status'] != 0) or
         (rd_response['Client'] != clientUUID.stdout) or
         (rd_response['Resource'] != resourceUUID.stdout)

    - name: "{{ recipe_name }}: Compare values of lookup before performing refresh and after performing refresh."
      vars:
        leaseValues_before: "{{ lookupLease_before_refresh['results'][0]['item']['output_data'][0]['LeaseRes'] }}"
        leaseValues_after: "{{ lookupLease_after_refresh['results'][0]['item']['output_data'][0]['LeaseRes'] }}"
      debug:
        msg: "Check the value of TTL should be increased than the previous lookup as refresh operation is performed"
      failed_when: >
        (leaseValues_after['TTL'] <= 0) or
        (leaseValues_after['TimeStamp']['LeaderTerm'] < leaseValues_before['TimeStamp']['LeaderTerm']) or
        (leaseValues_after['Client'] != leaseValues_before['Client']) or
        (leaseValues_after['Resource'] != leaseValues_before['Resource'])

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true

