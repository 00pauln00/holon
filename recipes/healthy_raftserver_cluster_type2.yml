- import_playbook: healthy_raftserver_cluster_type1.yml
- name: "Healthy Raftserver Cluster Type-2"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "healthy_raftserver_cluster_type2"
     parent: "Healthy Raftserver Cluster Type-1"
     raft_values_after_restart: []

  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    #Stage0: Pre-restart
    - name: "Get cluster information"
      include_role:
        name: common
        tasks_from: get_server_uuid_info
  
    - name: "{{ recipe_name }}: Get leader_uuid and term value from all running peers before restart"
      vars:
         stage: "pre_restart"
         raft_keys:
            - "/raft_root_entry/0/leader-uuid"
            - "/raft_root_entry/0/term"
         pre_restart: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Get the leader-uuid and term before restarting the servers"
      no_log: true
      with_items:
        - "{{ pre_restart }}"
      register: pre_restart_vals

    - debug:
        msg: "{{ pre_restart_vals }}"
    - name: "{{ recipe_name }}: Get start_time of all peers before restarting the cluster"
      vars:
        stage: "pre_restart_start_time"
        raft_keys:
             - "/system_info/start_time"
        stime_prev: "{{ lookup('niova_ctlrequest','lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Get start time before restarting peers {{ stime_prev }}"
      no_log: true
      with_items:
        - "{{ stime_prev }}"
      register: start_time_prerestart
    
    - name: "{{ recipe_name }}: Get follower-stats from leader peer before restart."
      include_role:
           name: common
           tasks_from: get_follower_stats
  
    - name: "Assign follower-stats before reboot."
      vars:
        follower_stats: "{{ GetFollowerStatsInfo }}"
      debug:
        msg: "Get the follower stat before restart"
      no_log: true
      with_items:
        - "{{ follower_stats }}"
      register: fstats_before_restart

    #Stage1: Restart
    - name: "{{ recipe_name }}: Safe restart: Make peers idle before stopping them"
      vars:
        stage: "stage1_idle_on_before_Stop"
        cmd: "ignore_timer_events@true"
        where: "/raft_net_info/ignore_timer_events"
        wait_for_ofile: False
        idle_on: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      debug:
        msg: "making servers idle before stopping them"
      no_log: true

    - name: "{{ recipe_name }}: Safe_restart : Kill the processes."
      set_fact:
        type2_kill_peer: "{{ lookup('niova_raftprocess', 'kill', NRunningPeers[item], wantlist=True) }}"
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "Restart all peers in the cluster"
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ NRunningPeers[item] }}"
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Make sure peers are not in idle state"
      vars:
         stage: "stage2_idle_off"
         cmd: "ignore_timer_events@false"
         where: "/raft_net_info/ignore_timer_events"
      set_fact:
         type2_idle_off: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"

    - name: "{{ recipe_name }}: Wait until leader election happens"
      vars:
        stage: "stage2_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | string != "null"
      loop: "{{ range(0, NRunningPeers | length) | list }}"
      retries: 10
      delay: 1

    - name: "{{ recipe_name }}: Get start_time of peers after restart"
      vars:
        stage: "stage2_get_time"
        raft_keys:
             - "/system_info/start_time"
             - "/raft_root_entry/0/leader-uuid"
        stime_after: "{{ lookup('niova_ctlrequest','lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Get start time after restarting peers {{ stime_after }}"
      no_log: true
      with_items:
        - "{{ stime_after }}"
      register: start_time_after_restart

    #Stage2: Verification
    - name: "{{ recipe_name }}: Verify that restart timestamp has advanced"
      vars:
        prev_time: "{{ start_time_prerestart['results'][item]['item']['/system_info/start_time'] }}"
        after_time: "{{ start_time_after_restart['results'][item]['item']['/system_info/start_time'] }}"
      debug:
        msg: "Compare time stamp: {{ prev_time }} with {{ after_time }}"
      failed_when: prev_time >= after_time
      loop: "{{ range(0, NRunningPeers | length)| list }}"

    #Get new leader-uuid after restart
    - name: "{{ recipe_name }}: Obtaining the leader_uuid after leader election"
      vars:
         stage: "stage2_get_leader_uuid"
         raft_keys:
             - "/raft_root_entry/0/leader-uuid"
         after_restart: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Get new leader uuid after restart"
      no_log: true
      with_items:
        - "{{ after_restart }}"
      register: type2_vals_after_restart

    - name: "{{ recipe_name }}: Get follower-stats from leader peer after restart."
      include_role:
           name: common
           tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Assign follower-stats after reboot."
      vars:
        follower_stats: "{{ GetFollowerStatsInfo }}"
      debug:
        msg: "Get follower-stat after restart"
      no_log: true
      with_items:
        - "{{ follower_stats }}"
      register: follower_stats_after_restart

    - name: "{{ recipe_name }}: Wait until next-idx of all followers to converge."
      vars:
        stage: "next_idx_converge"
        next_idx_before: "{{ fstats_before_restart['results'][0]['item']['/0/follower-stats'][item]['next-idx'] }}"
        next_idx_after: "{{ follower_stats_after_restart['results'][0]['item']['/0/follower-stats'][item]['next-idx'] }}"
      debug:
        msg: "Waiting until next-idx of all followers to converge."
      until: next_idx_after > next_idx_before
      retries: 5
      delay: 1
      loop: "{{ range(0, FollowerUUIDs | length) | list }}"

    - name: "{{ recipe_name }}: Verify next-idx value before and after restart."
      vars:
        next_idx_before: "{{ fstats_before_restart['results'][0]['item']['/0/follower-stats'][item]['next-idx'] }}"
        next_idx_after: "{{ follower_stats_after_restart['results'][0]['item']['/0/follower-stats'][item]['next-idx'] }}"
      debug:
        msg: "Compare next_idx_before: {{ next_idx_before }} with next_idx_after {{ next_idx_after }}"
      failed_when: >
        next_idx_after < next_idx_before
      loop: "{{ range(0, FollowerUUIDs | length) | list }}"

    - name: "{{ recipe_name }}: Get values from all peers after restart and compare parameters"
      vars:
         stage: "stage2_after_restart"
         raft_keys:
             - "/raft_root_entry/0/term"
             - "/raft_root_entry/0/commit-idx"
             - "/raft_root_entry/0/last-applied"
             - "/raft_root_entry/0/last-applied-cumulative-crc"
             - "/raft_root_entry/0/sync-entry-idx"
             - "/raft_root_entry/0/sync-entry-term"
             - "/raft_root_entry/0/sync-entry-data-size"
             - "/raft_root_entry/0/sync-entry-crc"
         values_after_restart: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
        msg: "Get the values of the peers after restart"
      no_log: true
      with_items:
        - "{{ values_after_restart }}"
      register: peers_info_after_restart

    - name: "{{ recipe_name }}: Compare the values after restart with pre-restart."
      set_fact:
        type2_vals_after_restart: "{{ peers_info_after_restart['results'][item]['item'] }}"
        type2_vals_before_restart: "{{ pre_restart_vals['results'][item]['item']}}"
      failed_when: >
           (type2_vals_after_restart['/0/term'] <= type2_vals_before_restart['/0/term']) or
           (type2_vals_after_restart['/0/commit-idx'] < 1) or
           (type2_vals_after_restart['/0/last-applied'] < 1) or
           (type2_vals_after_restart['/0/sync-entry-idx'] < 1) or
           (type2_vals_after_restart['/0/sync-entry-term'] < type2_vals_before_restart['/0/term']) or
           (type2_vals_after_restart['/0/sync-entry-data-size'] != 0)
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Compare term, last_applied_cumulative_crc and sync_entry_crc of all peers"
      vars:
        term_prev: "{{ peers_info_after_restart['results'][item]['item']['/0/term'] }}"
        term_next: "{{ peers_info_after_restart['results'][item + 1]['item']['/0/term'] }}"
        last_applied_cumulative_crc_prev: "{{ peers_info_after_restart['results'][item]['item']['/0/last-applied-cumulative-crc'] }}"
        last_applied_cumulative_crc_next: "{{ peers_info_after_restart['results'][item + 1]['item']['/0/last-applied-cumulative-crc'] }}"
        sync_entry_crc_prev: "{{ peers_info_after_restart['results'][item]['item']['/0/sync-entry-crc'] }}"
        sync_entry_crc_next: "{{ peers_info_after_restart['results'][item + 1]['item']['/0/sync-entry-crc'] }}"
      debug:
         msg: "Compare term values of all peers"
      no_log: true
      failed_when: >
        term_prev != term_next or
        last_applied_cumulative_crc_prev != last_applied_cumulative_crc_next or
        sync_entry_crc_prev != sync_entry_crc_next
      loop: "{{ range(0, NRunningPeers | length-1) | list }}"

    - name: "{{ recipe_name }}: Compare Leaderâ€™s follower-stats for all followers"
      set_fact:
        type2_fstats_after_restart: "{{ follower_stats_after_restart['results'][0]['item'] }}"
        type2_term_after_restart: "{{ peers_info_after_restart['results'][item]['item'] }}"
      failed_when: >
        (type2_fstats_after_restart['/0/follower-stats'][item]['next-idx'] <= 1) or
        (type2_fstats_after_restart['/0/follower-stats'][item]['prev-idx-term'] != type2_term_after_restart['/0/term'])
      loop: "{{ range(0, FollowerUUIDs | length) | list }}"

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
           terminate_recipe: true
