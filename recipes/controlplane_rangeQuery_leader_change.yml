- import_playbook: basic_recipe_for_rangeQuery_controlplane.yml

- name: "controlplane_rangeQuery_overwrite_existing_key.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "RangeQuery_overwrite_existing_key"
    parent: "basic_recipe_for_rangeQuery"

  tasks:
  - block:

    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeWrite with n as 25."
       vars:
         input_param: {
                'Operation': 'write',
                'OutfileName': 'Rangewrite_LeaderChange',
                'NoofWrites': '25'
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcliwr }}"
       register: writeres25keys
       no_log: true

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with n as 25."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'RangeRead_LeaderChange',
                'NoofWrites': '25'
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: readres25keys
       no_log: true

     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Get the leader and follower uuids."
       include_role:
         name: common
         tasks_from: get_follower_stats

     - name: "{{ recipe_name }}: Kill the Leader."
       debug:
        msg: "{{lookup('niova_raftprocess', 'kill', LeaderUUID['/0/leader-uuid'], wantlist=True)}}"
       no_log: True

     - name: "{{ recipe_name }}: Wait until leader election happens."
       include_role:
         name: common
         tasks_from: wait_until_leader_election

       # check if read is successful
     - name: "{{ recipe_name }}: Check if read is successful"
       debug:
         msg: "Check if read is successful"
       failed_when: >
         ( readres25keys['results'][0]['item']['Response']['Status'] != 0)

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
