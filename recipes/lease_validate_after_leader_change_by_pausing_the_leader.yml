- import_playbook: lease_basic_operations.yml

- name: "lease_validate_after_leader_change_by_pausing_the_leader"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "lease_validate_after_leader_change_by_pausing_the_leader"
     parent: lease_basic_operations.yml
     no_of_leases: 4

  tasks:
  - block:

    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "Get multiple client uuids."
      include_role:
        name: common
        tasks_from: get_multiple_client_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "Get multiple resource uuids."
      include_role:
        name: common
        tasks_from: get_multiple_resource_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'GET' operation for {{ no_of_leases }} client-uuids and resource-uuids."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '0',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_disable_leader_perform_ops_{{ resourceUUIDS[item] }}'
                 }
      set_fact:
        getLeaseOps: "{{ getLeaseOps|default([]) + [lookup('lease_feature', 'GET', input_param, wantlist=True)] }}"
      failed_when: >
        (getLeaseOps[item]['outfile_status'] != 0) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Status'] != "Success") or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['LeaseState'] != 4)
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Get cluster information"
      include_role:
        name: common
        tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Store leader-1"
      vars:
         leader1: "{{ LeaderUUID['/0/leader-uuid'] }}"
      debug:
        msg: "Leader-1: {{ leader1 }}"
      no_log: true
      with_items:
         - "{{ leader1 }}"
      register: orig_leader

    - name: "{{ recipe_name }}: Disable send on all peers from the leader 1."
      vars:
         stage: "stage1_disable_net_send"
         cmd: "net_send_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Disable receive on all peers from the leader 1."
      vars:
         stage: "stage1_disable_net_recv"
         cmd: "net_recv_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Pause the Leader 1"
      debug:
       msg: "{{lookup('niova_raftprocess', 'pause', orig_leader['results'][0]['item'], wantlist=True)}}"
      no_log: True

    - name: "{{ recipe_name }}: Wait until leader election happens."
      include_role:
        name: common
        tasks_from: wait_until_leader_election

    - name: "{{ recipe_name }}: Verify already taken leases gets updated with new leader."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '0',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_after_new_leader_{{ item }}'
                 }
      set_fact:
        lookup_aftr_new_leader: "{{ lookup_aftr_new_leader|default([]) + [lookup('lease_feature', 'LOOKUP', input_param, wantlist=True)] }}"
      failed_when: >
        (lookup_aftr_new_leader[item]['outfile_status'] != 0) or
        (lookup_aftr_new_leader[item]['output_data'][0]['LeaseRes']['Status'] != "Success")
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Resume the Leader 1"
      debug:
       msg: "{{lookup('niova_raftprocess', 'resume', orig_leader['results'][0]['item'], wantlist=True)}}"
      no_log: True

    - name: "{{ recipe_name }}: Enable send on all peers from the leader 1."
      vars:
         stage: "enable_net_send"
         cmd: "net_send_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    - name: "{{ recipe_name }}: Enable receive on all peers from the leader 1."
      vars:
         stage: "enable_net_rcv"
         cmd: "net_recv_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ orig_leader['results'][0]['item'] }}"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', NRunningPeers, cmd, where, wantlist=True) }}"
      no_log: true

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
