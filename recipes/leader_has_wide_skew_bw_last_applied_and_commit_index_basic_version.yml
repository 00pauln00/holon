- import_playbook: healthy_raftserver_cluster_type1.yml
- name: "basic_version_of_leader_has_wide_skew_bw_last_applied_and_commit_index"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "basic_version_of_leader_skew_bw_last_app_and_commit_idx"
     parent: "healthy_raftserver_cluster_type1"
     requirement: "pumicedb"
     num_writes: 1
     server_keys:
              - "/raft_root_entry/0/leader-uuid"
              - "/raft_root_entry/0/commit-idx"
              - "/raft_root_entry/0/last-applied"
  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Verifying recipe compatibility requirements."
      include_role:
         name: common
         tasks_from: recipe_compatibility_requirement

    - name: "{{ recipe_name }}: Get the list of all running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get leader-uuid and follower-uuids."
      include_role:
         name: common
         tasks_from: get_follower_stats

    #Get all values from all peers before partitioning.
    - name: "{{ recipe_name }}: Get the server information for all running servers."
      include_role:
         name: common
         tasks_from: get_all_values_from_all_peers

    #Apply fault injection on all running peers.
    - name: "{{ recipe_name }}: Ignore writes on all running peers using fault injection."
      include_role:
        name: common
        tasks_from: set_fault_injection_and_verify
      vars:
        ServerUUID: "{{ NRunningPeers[item] }}"
        fault_injection_name: "raft_server_bypass_sm_apply"
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - debug:
        msg: "Leader UUID: {{ LeaderUUID['/0/leader-uuid'] }}"

    - name: "{{ recipe_name }}: Kill the Leader."
      debug:
       msg: "{{lookup('niova_raftprocess', 'kill', LeaderUUID['/0/leader-uuid'], wantlist=True)}}"
      no_log: True

    - name: "{{ recipe_name }}: Wait until the new leader gets  elected."
      include_role:
        name: common
        tasks_from: verify_new_leader_election
      vars:
        peer_list: "{{ FollowerUUIDs }}"
        old_leader: "{{ LeaderUUID['/0/leader-uuid'] }}"
      loop: "{{ range(0, peer_list | length) | list }}"
      loop_control:
          loop_var: itr

    - name: "{{ recipe_name}}: Get the server information from all followers."
      vars:
        stage: "followers_values_aftr_first_election"
      set_fact:
        verify_aftr_first_values: "{{ lookup('niova_ctlrequest', 'lookup', FollowerUUIDs, server_keys, wantlist=True) }}"
      failed_when: >
        (verify_aftr_first_values[item]['/0/commit-idx'] <= get_values_from_all[item]['/0/commit-idx']) or
        (verify_aftr_first_values[item]['/0/last-applied'] != get_values_from_all[item]['/0/last-applied'])
      loop: "{{ range(0, FollowerUUIDs | length)| list }}"

    #Remove fault injection on all running peers.
    - name: "{{ recipe_name }}: Remove fault injection."
      include_role:
        name: common
        tasks_from: remove_fault_injection_and_verify
      vars:
        ServerUUID: "{{ FollowerUUIDs[item] }}"
        fault_injection_name: "raft_server_bypass_sm_apply"
      loop: "{{ range(0, FollowerUUIDs| length) | list }}"

    - name: "{{ recipe_name }}: Get the list of all running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get leader-uuid and follower-uuids."
      include_role:
         name: common
         tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Kill the first Leader."
      debug:
       msg: "{{lookup('niova_raftprocess', 'kill', LeaderUUID['/0/leader-uuid'], wantlist=True)}}"
      no_log: True

    #This is temporary. This is workaround though.
    - name: "{{ recipe_name }}: Wait until second leader election happens"
      vars:
         stage: "wait_leader_election"
         previous_leader: "{{ LeaderUUID['/0/leader-uuid'] }}"
      debug:
        msg: "Waiting for second leader election"
      until: lookup('niova_ctlrequest', 'lookup', FollowerUUIDs[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != (previous_leader)
      retries: 60
      delay: 1
      loop: "{{ range(0, FollowerUUIDs | length) | list }}"

    - name: "{{ recipe_name}}: Get the server information from all followers."
      vars:
        stage: "last_verification"
      set_fact:
       last_verification_aftr_rm_fault_inject: "{{ lookup('niova_ctlrequest', 'lookup', FollowerUUIDs, server_keys, wantlist=True) }}"
      failed_when: >
        (last_verification_aftr_rm_fault_inject[item]['/0/commit-idx'] <= verify_aftr_first_values[item]['/0/commit-idx']) or
        (last_verification_aftr_rm_fault_inject[item]['/0/last-applied'] <= verify_aftr_first_values[item]['/0/last-applied']) or
        (last_verification_aftr_rm_fault_inject[item]['/0/last-applied'] != last_verification_aftr_rm_fault_inject[item]['/0/commit-idx'])
      loop: "{{ range(0, FollowerUUIDs | length)| list }}"
