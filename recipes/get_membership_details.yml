- import_playbook: get_leader_operation.yml
- name: "get_membership_details"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "get_membership_details"
    parent: "get_leader_operation"

  tasks:
  - block:
     - name: "Check if parent recipe failed"
       debug: msg="Check if parent recipe {{ parent }} failed"
       failed_when: terminate_recipe == true

      # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'niovakv'."
       vars:
         app_type: "{{ app_type}}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "niovakv")

     - name: "{{ recipe_name }}: Get unused client-uuid."
       include_role:
         name: common
         tasks_from: get_new_client_uuid
       register: client_uuid

     - debug:
        msg: "Client UUID: {{ client_uuid }}"

      #Start niovakv_server
     - name: "{{ recipe_name }}: Start new niovakv server which starts pmdb client."
       include_role:
         name: common
         tasks_from: start_client_golang
       vars:
         ClientUUID: "{{ client_uuid.stdout }}"

     - name: "{{ recipe_name }}: Pause for 5 seconds to build app cache."
       pause:
        seconds: 5

      # Write key-value before killing niovakv-server.
     - name: "{{ recipe_name }}: Write the key-value before killing the niovakv-server."
       vars:
         Operation: "write"
         Key: "China"
         Value: "population"
         OutfileName: "wrkey"
         NumRequest: 0
         MultiKey: False
         Sequential : False
         nkvclires: "{{ lookup('niova_kvclient', Operation, Key, Value, OutfileName, NumRequest, MultiKey, Sequential, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ nkvclires }}"
       register: writeres

       # check if write is successful
     - name: "{{ recipe_name }}: Check if write is successful"
       debug:
         msg: "Check if write is successful"
       failed_when: >
         (writeres['results'][0]['item']['write']['Response']['Status'] != 0)
       # Kill the niovakv-server.
     - name: "{{ recipe_name }}: Kill the niovakv-server."
       debug:
        msg: "killing the niovakv-server: {{ lookup('niova_raftprocess', 'kill', client_uuid.stdout, wantlist=True) }}"

     - name: "{{ recipe_name }}: prepare path to read recipe JSON file."
       shell: cat "{{base_dir}}"/"{{raft_uuid}}".json
       register: result

     - name: "{{ recipe_name }}: Convert output to JSON format."
       set_fact:
         getNodeDetails: "{{ result.stdout | from_json }}"

     - name: "{{ recipe_name }}: Get the serf nodes from recipe JSON."
       set_fact:
         getNodeName: "{{ getNodeDetails | json_query(jmesquery) }}"
       vars:
         jmesquery: 'serf_nodes."{{ client_uuid.stdout }}"'

     - debug:
         msg: "Killed node name is: {{ getNodeName }}"

     - name: "{{ recipe_name }}: Wait until node status gets changed."
       vars:
         Operation: "membership"
         Key: ""
         Value: ""
         OutfileName: "nodestatus"
         NumRequest: 0
         MultiKey: False
         Sequential: False
       debug:
         msg: "Verifying node status"
       until: lookup('niova_kvclient', Operation, Key, Value, OutfileName, NumRequest, MultiKey, Sequential, wantlist=True) | dict2items | map(attribute='value') | map(attribute=getNodeName) | map(attribute='Status') | list | first == "failed"
       loop: "{{ range(0, 10) | list }}"
       loop_control:
          pause: 1

     # Read key-value after killing node.
     - name: "{{ recipe_name }}: Read the value of requested key."
       vars:
         Operation: "read"
         Key: "China"
         Value: ""
         OutfileName: "rdval"
         NumRequest: 0
         MultiKey: False
         Sequential : False
         nkvclires: "{{ lookup('niova_kvclient', Operation, Key, Value, OutfileName, NumRequest, MultiKey, Sequential, wantlist=True) }}"
       debug:
         msg: "Read value from niovakv_client."
       with_items:
          - "{{ nkvclires }}"
       register: readres

     - name: "{{ recipe_name }}: compare values after successful read operation."
       vars:
         wrval: "{{ writeres['results'][0]['item']['write']['Request'] }}"
         rdval: "{{ readres['results'][0]['item']['read']['Response'] }}"
       debug:
         msg:
          - "Verifying parameter after read operation"
       failed_when: >
        (rdval['Status'] != 0) or
        (rdval['Response'] != wrval['Value'])
        
    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
