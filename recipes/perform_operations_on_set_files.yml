- name: "perform_operations_on_set_files"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "perform_operations_on_set_files"
     parent: None

  tasks:
  - block:

    - name: "{{ recipe_name }}: Start minio server"
      vars:
        s3_dir: "minio_data"
      debug:
         msg:
          - "{{ lookup('s3_handler', 'start_s3', s3_dir, wantlist=True) }}"
      when: s3Support == "true"

    - name: "Generate DBIs with overlap sequence range"
      vars:
         input_param: {
                  "chunk": "1",
                  "maxPunches": "100",
                  "maxVblks": "1000",
                  "punchAmount": "6000",
                  "punchesPer": "0",
                  "maxPunchSize": "100",
                  "seed": "1",
                  "seqStart": "0",
                  "vbAmount": "1000",
                  "vblkPer": "10",
                  "genType": "1",
                  "blockSize": "4",
                  "blockSizeMax": "32",
                  "startVblk": "0",
                  "strideWidth": "",
                  "overlapSeq": "5",
                  "numOfSet": "2",
                  "vdev": "643eef86-e42b-11ee-8678-22abb648e432",
                  "s3configPath": "",
                  "removeDBIDBO": "=true",
                  "punchwholechunk": "false",
                 }
      debug:
         msg:
          - "{{ lookup('s3_handler', 'example_params', input_param, wantlist=True) }}"

    - name: "{{ recipe_name }}: copy dbi set files into a new directory."
      vars:
        Chunk: "1"
      debug:
         msg: "{{ lookup('s3_handler', 'copyDBIset', Chunk, wantlist=True) }}"

    - name: "{{ recipe_name }}: delete file from the dbi set from s3."
      vars:
        operation: "delete"
        Chunk: "1"
      debug:
         msg: "{{ lookup('s3_handler', 'deleteSetFileS3', operation, Chunk, wantlist=True) }}"
      register: fileName

    - name: "{{ recipe_name }}: Perform GC."
      vars:
        debugMode: false
        Chunk: "1"
      debug:
         msg:
          - "{{ lookup('s3_handler', 'start_gc', debugMode, Chunk, wantlist=True) }}"

    - name: "{{ recipe_name }}: Marker file present or not."
      vars:
        Chunk: "1"
      debug:
        msg: "{{ lookup('s3_handler', 'isGCMarkerFilePresent', Chunk, wantlist=True) }}"
      register: marker_check

    - name: "{{ recipe_name }}: Wait until GC marker and NISD marker gets match here."
      vars:
        Chunk: "1"
        gcMarkerEndSeq: "{{ lookup('s3_handler', 'getGCMarkerFileSeq', Chunk, wantlist=True) }}"
        NisdMarkerEndSeq: "{{ lookup('s3_handler', 'getNISDMarkerFileSeq', Chunk, wantlist=True) }}"
      debug:
        msg: "GC Marker End Seq: {{ gcMarkerEndSeq }} | NISD Marker End Seq: {{ NisdMarkerEndSeq }}"
      until: gcMarkerEndSeq == NisdMarkerEndSeq
      retries: 10
      delay: 2
      when: marker_check.msg == true

    - name: "{{ recipe_name }}: Now upload original set file to s3."
      vars:
        operation: "upload"
        Chunk: "1"
        fileNameToUpload: "{{ fileName.msg }}"
      debug:
         msg: "{{ lookup('s3_handler', 'pushOrigSetFile', operation, Chunk, fileNameToUpload, wantlist=True) }}"

    - name: "{{ recipe_name }}: Perform GC."
      vars:
        debugMode: true
        Chunk: "1"
      debug:
         msg:
          - "{{ lookup('s3_handler', 'start_gc', debugMode, Chunk, wantlist=True) }}"

    - name: "{{ recipe_name }}: Marker file present or not."
      vars:
        Chunk: "1"
      debug:
        msg: "{{ lookup('s3_handler', 'isGCMarkerFilePresent', Chunk, wantlist=True) }}"
      register: get_markers

    - name: "{{ recipe_name }}: Initialize Chunk variable"
      set_fact:
        Chunk: "1"

    - name: "{{ recipe_name }}: Wait until GC marker and NISD marker gets not match here."
      vars:
        gcMarkerEndSeq: "{{ lookup('s3_handler', 'getGCMarkerFileSeq', Chunk, wantlist=True) }}"
        NisdMarkerEndSeq: "{{ lookup('s3_handler', 'getNISDMarkerFileSeq', Chunk, wantlist=True) }}"
      debug:
        msg: "GC Marker End Seq: {{ gcMarkerEndSeq }} | NISD Marker End Seq: {{ NisdMarkerEndSeq }}"
      until: gcMarkerEndSeq == NisdMarkerEndSeq
      retries: 10
      delay: 2
      when: get_markers.msg == true
