- name: "basic_recipe_for_controlplane"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "basic_recipe_for_controlplane"
    parent: None
    number_of_clients: 3

  tasks:
  - block:
      # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

       # start pmdb servers.
     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - debug:
        msg: "{{ TotalNServersList }}"

      #Get multiple client uuids using common task.
     - name: "Get multiple client uuids."
       include_role:
        name: common
        tasks_from: get_multiple_client_uuids
       loop: "{{ range(0, number_of_clients) | list }}"  #loop for no. of required client uuids.

     - debug:
        msg: "{{ ClientUUIDS }}"

     - name: "Prepare gossip node configs"
       set_fact: ClusterInfo="{{lookup('niova_raftconfig', "controlplane", TotalNServersList, ClientUUIDS, wantlist=True)}}"

     # Start all PMDB servers.
     - name: "{{ recipe_name }}: Start pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length) | list }}"

      #Start proxyserver
     - name: "{{ recipe_name }}: Start proxy server."
       include_role:
          name: common
          tasks_from: start_proxy_server
       vars:
          ClientUUID: "{{ ClientUUIDS[item] }}"
       loop: "{{ range(0, ClientUUIDS | length) |list }}"

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         Key: "Key"
         Value: "Value"
         Operation: "write"
         OutfileName : "nkvc_write_output"
         nkvclires: "{{ lookup('controlPane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ nkvclires }}"
       register: writeres

     - name: "{{ recipe_name }}: Starting controlplane_client to read the value."
       vars:
         Key: "Key"
         Value: ""
         Operation: "read"
         OutfileName : "read_output"
         nkvclires: "{{ lookup('controlPane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ nkvclires }}"
       register: readres

     - name: "{{ recipe_name }}: compare values after sucessful write/read operation."
       vars:
         wrval: "{{ writeres['results'][0]['item']['write'][0]['Request'] }}"
         rdval: "{{ readres['results'][0]['item']['read'][0]['Response'] }}"
       debug:
         msg: "Verifying parameter after read operation"
       failed_when: >
         (rdval['Status'] != 0) or
         (rdval['Response'] != wrval['Value'])

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true

