- name: "multiple_niovakvservers_with_higher_ops"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "multiple_niovakvservers_with_higher_ops"
    parent: None
    
  tasks:
  - block:
       # Check for the app_type.
     - name: "{{ recipe_name }}: Check if the app_type is 'niovakv'"
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "niovakv")

     - name: "{{ recipe_name }}: Start pmdb and proxy servers."
       include_role:
          name: common
          tasks_from: niovaKV_cluster_init
       vars:
         number_of_clients: 5
         number_of_PMDBServers: 5
              
      # Start lkvt_client to write the value.
     - name: "{{ recipe_name }}: Starting lkvt_client to write the value."
       vars: 
        parameters: {
                database_type: 0,
                size_of_key: 10,
                key_prefix: "Paro",
                seed_random_generator: 1,
                size_of_value: 20,
                no_of_operations: 1000,
                precent_put_get: 1,
                no_of_concurrent_req: 20,
                wait_for_outfile: false,
                choose_algorithm: 0,
                specific_server_name: "",
                outfileName: "write_result"  
               } 
        nkvclires: "{{ lookup('niovakv_client_handler', 'lkvt', parameters, wantlist=True) }}"
       debug:
         msg: "Write key-value from lkvt_client."
       with_items:
          - "{{ nkvclires }}"
       register: writeres
       no_log: true

     - name: "{{ recipe_name }}: Check for outfile."
       vars:
        outfile_parameters: {
          outfile_path: "{{ writeres['results'][0]['item'] }}",
          wait_for_outfile: True
          }
        nkvclires: "{{ lookup('niovakv_client_handler', 'lkvt', outfile_parameters , wantlist=True) }}"
       debug:
         msg: "Write key-value from lkvt_client."
       with_items:
          - "{{ nkvclires }}"
       register: write_op
       no_log: true

     - name: "{{ recipe_name }}: Get the information for number of request distributions across multiple niovakv servers."
       debug:
         msg: "{{ write_op['results'][0]['item']['NkvcClient']['RequestDistribution'] }}"
       no_log: true

      #Check if write is successful.
     - name: "{{ recipe_name }}: Check if Put is successful"
       debug:
         msg: "Check if write is successful"
       failed_when: >
         ( write_op['results'][0]['item']['Put_failures'] != 0 ) or
         ( write_op['results'][0]['item']['Get_count'] != 0 ) or
         ( write_op['results'][0]['item']['Get_failures'] != 0 ) or
         ( write_op['results'][0]['item']['Get_success'] != 0 ) or
         ( write_op['results'][0]['item']['Put_count'] != write_op['results'][0]['item']['Request_count'] ) or
         ( write_op['results'][0]['item']['Put_success'] != write_op['results'][0]['item']['Request_count']) 

     #Start lkvt_client to read the value.
     - name: "{{ recipe_name }}: Starting lkvt_client to read the value."
       vars:
         parameters: {
                database_type: 0,
                size_of_key: 10,
                key_prefix: "Paro",
                seed_random_generator: 1,
                size_of_value: 20,
                no_of_operations: 1000,
                precent_put_get: 0,
                no_of_concurrent_req: 20,
                wait_for_outfile: false,
                choose_algorithm: 0,
                specific_server_name: "",
                outfileName: "read_result" 
               }
         nkvclires: "{{ lookup('niovakv_client_handler', 'lkvt', parameters, wantlist=True) }}"
       debug:
         msg: "Read key-value from lkvt_client."
       with_items:
          - "{{ nkvclires }}"
       register: readres
       no_log: true

     - name: "{{ recipe_name }}: Check for outfile."
       vars:
         outfile_parameters: {
          outfile_path: "{{ readres['results'][0]['item']}}",
          wait_for_outfile: True
          }
         nkvclires: "{{ lookup('niovakv_client_handler', 'lkvt', outfile_parameters, wantlist=True) }}"
       debug:
         msg: "Write key-value from lkvt_client."
       with_items:
          - "{{ nkvclires }}"
       register: read_op
       no_log: true

     - name: "{{ recipe_name }}: Get the information for number of request distributions across multiple niovakv servers."
       debug:
         msg: "{{ read_op['results'][0]['item']['NkvcClient']['RequestDistribution'] }}"
       no_log: true

     #Check if read is successful.
     - name: "{{ recipe_name }}: Check if Get is successful"
       debug:
         msg: "Check if read is successful"
       failed_when: >
         ( read_op['results'][0]['item']['Get_failures'] != 0 ) or
         ( read_op['results'][0]['item']['Put_count'] != 0 ) or
         ( read_op['results'][0]['item']['Put_success'] != 0 ) or
         ( read_op['results'][0]['item']['Get_failures'] != 0 ) or
         ( read_op['results'][0]['item']['Get_count'] != read_op['results'][0]['item']['Request_count'] ) or
         ( read_op['results'][0]['item']['Get_success'] != read_op['results'][0]['item']['Request_count'])
            
    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
