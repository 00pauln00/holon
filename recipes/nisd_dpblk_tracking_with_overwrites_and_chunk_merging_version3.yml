- import_playbook: nisd_initialization_and_startup.yml
- name: "nisd_dpblk_tracking_with_overwrites_and_chunk_merging_version3"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "nisd_dpblk_tracking_with_overwrites_v3"
    parent: "nisd_initialization_and_startup"
    nisd_root_keys:
              - "/nisd_root_entry/0/uuid"
              - "/nisd_root_entry/0/instance-uuid"
              - "/nisd_root_entry/0/status"
              - "/nisd_root_entry/0/num-reserved-pblks"
              - "/nisd_root_entry/0/num-pblks"
              - "/nisd_root_entry/0/num-pblks-used"
              - "/nisd_root_entry/0/vblks-written"
              - "/nisd_root_entry/0/num-pblks-used"
              - "/nisd_root_entry/0/num-reserved-pblks-used"
    nisd_chunk_keys:
              - "/nisd_chunks/0/vdev-uuid"
              - "/nisd_chunks/0/number"
              - "/nisd_chunks/0/num-data-pblks"
              - "/nisd_root_entry/0/vblks-written"
              - "/nisd_chunks/0/num-meta-pblks"
              - "/nisd_chunks/0/num-reserved-meta-pblks"
              - "/nisd_chunks/0/metablock-seqno"
              - "/nisd_chunks/0/num-cme"
              - "/nisd_chunks/0/ref-cnt"
              - "/nisd_chunks/0/chunk-merge-cnt"
              - "/nisd_chunks/0/chunk-merge-status"

  tasks:
  - block:
     - name: "Check if parent recipe failed"
       debug: msg="Check if parent recipe {{ parent }} failed"
       failed_when: terminate_recipe == true

     #1 - Capture the /nisd_root_entry Values left by the parent
     - name: "{{ recipe_name }}: Capture the /nisd_root_entry Values left by the parent."
       vars:
         stage: "initial_value"
         lookout_uuid: ""
         origVal: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_root_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Get nisd root entry values: {{ origVal }}"
       no_log: True
       with_items:
        - "{{ origVal }}"
       register: initialValues

     - name: Generate new vdev-uuid
       shell: "/usr/bin/uuid"
       register: vdev

     - debug:
         msg: "{{ vdev.stdout }}"

     - name: Generate new client-uuid for niova-block-test
       shell: "/usr/bin/uuid"
       register: client_uuid

     - debug:
         msg: "{{ client_uuid.stdout }}"

     #2 - Perform a Number of Single Block Writes to the NISD
     - name: "{{ recipe_name }}: Perform some Writes to the NISD."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ vdev.stdout}}',
                 'read_operation_ratio_percentage' : '0',
                 'random_seed' : '1010101',
                 'client_uuid' : '{{ client_uuid.stdout }}',
                 'request_size_in_bytes' : '0',
                 'queue_depth' : '1',
                 'num_ops' : '1000',
                 'integrity_check' : True,
                 'sequential_writes' : False,
                 'lookout_uuid': ''
                 }
         wr_success: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"
       debug:
         msg: "get write's return code"
       no_log:  True
       with_items:
        - "{{ wr_success }}"
       register: get_wr

     - debug:
         msg: "Verify write is success"
       failed_when: (get_wr['results'][0]['item'] != "0")

     #3 - Issue a Merge on the Chunk
     - name: "{{ recipe_name}}: Wait until 'chunk-merge-status' : 'idle'"
       vars:
         stage: "wait_for_nisd_chunk"
         lookout_uuid: ""
       debug:
         msg: "Waiting for nisd to get 'idle'"
       until: lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, '/nisd_chunks/0/chunk-merge-status', 'nisd', lookout_uuid, wantlist=True) | dict2items | map(attribute='value') | list | first == "idle"
       retries: 10
       delay: 1

     - name: "{{ recipe_name }}: Capture the value of “chunk-merge-cnt”."
       vars:
         stage: "chunk_merge_cnt"
         lookout_uuid: ""
         getChunkCnt: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_chunk_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Get nisd root entry values: {{ getChunkCnt }}"
       no_log: True
       with_items:
        - "{{ getChunkCnt }}"
       register: origChunkCnt

     - name: "{{ recipe_name }}: Issue chunk merge cmd."
       vars:
         stage: "chunkMerge"
         cmd: "chunk-merge-status@merge"
         where: "/nisd_chunks/vdev-uuid@{{ vdev.stdout }}"
         lookout_uuid: ""
       debug:
         msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', nisdUUID.stdout, cmd, where, 'nisd', lookout_uuid, wantlist=True) }}"
       no_log: true

     - name: "{{ recipe_name}}: Wait until chunk cnt gets updated."
       vars:
         orig_merge_cnt: "{{ origChunkCnt['results'][0]['item']['/0/chunk-merge-cnt'] }}"
         stage: "wait_for_chunk_cnt"
         lookout_uuid: ""
       debug:
         msg: "Waiting for chunk-cnt to get updated"
       until: lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, '/nisd_chunks/0/chunk-merge-cnt', 'nisd', lookout_uuid, wantlist=True) | dict2items | map(attribute='value') | list | first == ((orig_merge_cnt | int) + 1)
       retries: 20
       delay: 1

     #Capture vblks-written
     - name: "{{ recipe_name }}: Capture vblks-written."
       vars:
         stage: "get_vblks-written"
         lookout_uuid: ""
         getVblksWritten: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, '/nisd_chunks/0/vblks-written', 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Store num-data-pblks: {{ getVblksWritten }}"
       no_log: True
       with_items:
        - "{{ getVblksWritten }}"
       register: origVblksWritten

     #4 - Verify Chunk Values.
     - name: "{{ recipe_name }}: Verify nisd chunk values."
       vars:
         old_VblksWritten: "{{ origVblksWritten['results'][0]['item']['/0/vblks-written'] }}"
         stage: "verify_nisd_chunk"
         lookout_uuid: ""
         getNiovaBlockTest: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_chunk_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify nisd values after writes: {{ getNiovaBlockTest }}"
       no_log: True
       failed_when: >
         (getNiovaBlockTest['/0/chunk-merge-status'] != "idle") or
         (getNiovaBlockTest['/0/vblks-written'] != (old_VblksWritten | int)) or
         (getNiovaBlockTest['/0/metablock-seqno'] != 999) or
         (getNiovaBlockTest['/0/ref-cnt'] != 1) or
         (getNiovaBlockTest['/0/num-meta-pblks'] != 1) or
         (getNiovaBlockTest['/0/num-reserved-meta-pblks'] != 1)

     #4a - Capture num-data-pblks
     - name: "{{ recipe_name }}: Capture num-data-pblks."
       vars:
         stage: "verify_nisd_chunk"
         lookout_uuid: ""
         getNumDataPblks: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, '/nisd_chunks/0/num-data-pblks', 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Store num-data-pblks: {{ getNumDataPblks }}"
       no_log: True
       with_items:
        - "{{ getNumDataPblks }}"
       register: origNumDataPblk

     #5 - Verify /nisd_root_entry Values against those taken in Step #1
     - name: "{{ recipe_name }}: Verify /nisd_root_entry Values against those taken in Step #1."
       vars:
         stage: "verify_nisd_root_keys"
         old_num_block_used: "{{ initialValues['results'][0]['item']['/0/num-pblks-used'] }}"
         old_num_reserved_block_used: "{{ initialValues['results'][0]['item']['/0/num-reserved-pblks-used'] }}"
         get_dpblk: "{{ origNumDataPblk['results'][0]['item']['/0/num-data-pblks'] }}"
         lookout_uuid: ""
         getNiovaBlockTest: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_root_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify /nisd_root_entry values: {{ getNiovaBlockTest }}, {{ old_num_block_used }}, {{ old_num_reserved_block_used }}"
       no_log: True
       failed_when: >
         (getNiovaBlockTest['/0/num-pblks-used'] != ((old_num_block_used | int) + (get_dpblk | int) + 1)) or
         (getNiovaBlockTest['/0/num-reserved-pblks-used'] != ((old_num_reserved_block_used | int) + 1))

      #6 - Issue a Read of the Vblks
     - name: "{{ recipe_name }}: Issue a Read of the Vblks."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ vdev.stdout}}',
                 'read_operation_ratio_percentage' : '100',
                 'random_seed' : '1010101',
                 'client_uuid' : '{{ client_uuid.stdout }}',
                 'request_size_in_bytes' : '0',
                 'queue_depth' : '1',
                 'num_ops' : '1000',
                 'integrity_check' : True,
                 'sequential_writes' : False,
                 'lookout_uuid': ''
                 }
         rd_success: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"
       debug:
         msg: "get read's return code"
       with_items:
        - "{{ rd_success }}"
       register: get_rd

     - debug:
         msg: "Verify read must pass"
       failed_when: (get_rd['results'][0]['item'] != "0")

     #7a - Overwrite the Vblks Using varying Queue Depths and Verifying the VBLKs after Each Iteration.
     - name: "{{ recipe_name }}: Overwrite the Vblks Using varying Queue Depths and Verifying the VBLKs after Each Iteration."
       include_role:
         name: common
         tasks_from: overwrite_and_verify_vblk_written
       vars:
        NisdUUID: "{{ nisdUUID.stdout }}"
        VdevUUID: "{{ vdev.stdout }}"
        ClientUUID: "{{ client_uuid.stdout }}"
        LookoutUUID: ""
        RequestVblk: 0
       with_items:
         - 2
         - 7
         - 17
         - 32
         - 63
         - 128
         - 255


     #7b - Read the Vblks Using varying Queue Depths
     - name: "{{ recipe_name }}: Perform Read to the NISD."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ vdev.stdout}}',
                 'read_operation_ratio_percentage' : '100',
                 'random_seed' : '1010101',
                 'client_uuid' : '{{ client_uuid.stdout }}',
                 'request_size_in_bytes' : '0',
                 'queue_depth' : '{{ item | string }}',
                 'num_ops' : '1000',
                 'integrity_check' : True,
                 'sequential_writes' : False,
                 'lookout_uuid': ''
                 }
       debug:
         msg: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"
       with_items:
         - 2
         - 7
         - 17
         - 32
         - 63
         - 128
         - 255

     - name: "{{ recipe_name }}: Issue chunk merge cmd."
       vars:
         stage: "chunkMerge"
         cmd: "chunk-merge-status@merge"
         where: "/nisd_chunks/vdev-uuid@{{ vdev.stdout }}"
         lookout_uuid: ""
       debug:
         msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', nisdUUID.stdout, cmd, where, 'nisd', lookout_uuid, wantlist=True) }}"
       no_log: true

     - name: "{{ recipe_name }}: Verify num-data-pblks is equal to the original value captured in Step #4."
       vars:
         old_value: "{{ origNumDataPblk['results'][0]['item']['/0/num-data-pblks'] }}"
         stage: "verify_numDataPblk"
         lookout_uuid: ""
         verifyNumDataPblks: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, '/nisd_chunks/0/num-data-pblks', 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify num-data-pblks is equal to the original value: {{ verifyNumDataPblks }}"
       no_log: true
       failed_when: >
         (verifyNumDataPblks['/0/num-data-pblks'] != (old_value | int))

     #7e - Re-Read the Vblks Using varying Queue Depths.
     - name: "{{ recipe_name }}: Perform Read to the NISD."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ vdev.stdout}}',
                 'read_operation_ratio_percentage' : '100',
                 'random_seed' : '1010101',
                 'client_uuid' : '{{ client_uuid.stdout }}',
                 'request_size_in_bytes' : '0',
                 'queue_depth' : '{{ item | string }}',
                 'num_ops' : '1000',
                 'integrity_check' : True,
                 'sequential_writes' : False,
                 'lookout_uuid': ''
                 }
       debug:
         msg: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"
       with_items:
         - 2
         - 7
         - 17
         - 32
         - 63
         - 128
         - 255

     #8 - (Re)Verify /nisd_root_entry Values against those taken in Step #1
     - name: "{{ recipe_name }}: (Re)Verify /nisd_root_entry Values against those taken in Step #1."
       vars:
         stage: "re-verify_nisd_root"
         old_num_block_used: "{{ initialValues['results'][0]['item']['/0/num-pblks-used'] }}"
         old_num_reserved_block_used: "{{ initialValues['results'][0]['item']['/0/num-reserved-pblks-used'] }}"
         get_dpblk: "{{ origNumDataPblk['results'][0]['item']['/0/num-data-pblks'] }}"
         lookout_uuid: ""
         reVerifyRootEntry: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_root_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Re-verify /nisd_root_entry values: {{ reVerifyRootEntry }}, {{ old_num_block_used }}, {{ old_num_reserved_block_used }}"
       no_log: True
       failed_when: >
         (reVerifyRootEntry['/0/num-pblks-used'] != ((old_num_block_used | int) + (get_dpblk | int) + 1)) or
         (reVerifyRootEntry['/0/num-reserved-pblks-used'] != ((old_num_reserved_block_used | int) + 1))

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
