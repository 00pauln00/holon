- import_playbook: lease_basic_operations.yml

- name: "lease_validate_after_expiry_after_cluster_reboot"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "lease_validate_after_expiry_after_cluster_reboot"
    parent: "lease_basic_operations"
    no_of_leases: 5
  vars_files:
    - ../leaseStateValue.yml

  tasks:
  - block:

    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    # check for the app_type
    - name: "{{ recipe_name }}: Check if the app_type is 'lease'"
      vars:
         app_type: "{{ app_type }}"
      debug:
         msg: "app_type is: {{ app_type }}"
      failed_when:
         (app_type != "lease")

    - name: "Get multiple client uuids."
      include_role:
        name: common
        tasks_from: get_multiple_client_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "Get multiple resource uuids."
      include_role:
        name: common
        tasks_from: get_multiple_resource_uuids
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'GET' operation for {{ no_of_leases }} client-uuids and resource-uuids."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'get_lease_{{ item }}'
                 }
      set_fact:
        getLeaseOps: "{{ getLeaseOps|default([]) + [lookup('lease_feature', 'GET', input_param, wantlist=True)] }}"
      failed_when: >
        (getLeaseOps[item]['outfile_status'] != 0) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Client'] != ClientUUIDS[item]) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['Resource'] != resourceUUIDS[item]) or
        (getLeaseOps[item]['output_data'][0]['LeaseRes']['LeaseState'] != GRANTED)
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Pause for 60 seconds so that all the leases gets expired."
      pause:
        seconds: 60

    - name: "{{ recipe_name }}: get the list of non-running servers."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Kill all the peers of the cluster."
      debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', NRunningPeers[item], wantlist=True) }}"
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Pause for 10 seconds."
      pause:
        seconds: 10

    - name: "{{ recipe_name }}: Start again all the peers of the killed cluster."
      debug:
         msg:  "{{ lookup('niova_raftprocess', 'start', NRunningPeers[item], wantlist=True) }}"
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Wait untill leaseState of all leases is expired."
      include_role:
        name: common
        tasks_from: wait_untill_leaseState_is_expired
      vars:
         clientuuid: "{{ ClientUUIDS[item] }}"
         resourceuuid: "{{ resourceUUIDS[item] }}"
         leaseState: "{{ EXPIRED }}"
      loop: "{{ range(0, no_of_leases) | list }}"

    - name: "{{ recipe_name }}: Perform 'LOOKUP' operation for {{ no_of_leases }} client-uuids and resource-uuids and validate that all the lease have status as stale."
      vars:
         input_param: {
                'client': '{{ ClientUUIDS[item] }}',
                'resource': '{{ resourceUUIDS[item] }}',
                'numOfLeases': '1',
                'getLeaseOutfile': '',
                'outFileName': 'lookup_lease_{{ item }}'
                 }
      set_fact:
        lookupLeaseOps: "{{ lookupLeaseOps|default([]) + [lookup('lease_feature', 'LOOKUP_VALIDATE', input_param, wantlist=True)] }}"
      failed_when: >
        (lookupLeaseOps[item]['outfile_status'] != 0) or
        (lookupLeaseOps[item]['output_data'][0]['LeaseRes']['Status'] != 0) or
        (lookupLeaseOps[item]['output_data'][0]['LeaseRes']['Client'] != getLeaseOps[item]['output_data'][0]['LeaseRes']['Client']) or
        (lookupLeaseOps[item]['output_data'][0]['LeaseRes']['Resource'] != getLeaseOps[item]['output_data'][0]['LeaseRes']['Resource']) or
        (lookupLeaseOps[item]['output_data'][0]['LeaseRes']['LeaseState'] != EXPIRED)
      loop: "{{ range(0, no_of_leases) | list }}"

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true

