- name: "control_plane_multiple_proxyservers"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "control_plane_multiple_proxyservers"
    number_of_clients: 5
    number_of_app_uuids: 1
    parent: None

  tasks:
  - block:
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     # start pmdb servers.
     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - debug:
        msg: "{{ TotalNServersList }}"

      #Create set of required number of app_uuids.
     - name: "Get set of required number of app_uuids."
       include_role:
        name: common
        tasks_from: create_app_uuid_set
       vars:
        number_of_apps: "{{ number_of_app_uuids }}"

     #Get multiple client uuids using common task.
     - name: "Get multiple client uuids."
       include_role:
        name: common
        tasks_from: get_multiple_client_uuids
       loop: "{{ range(0, number_of_clients) | list }}"

     - debug:
        msg: "{{ ClientUUIDS }}"

     - name: "Prepare gossip node configs"
       set_fact: ClusterInfo="{{lookup('niova_raftconfig', "controlplane", TotalNServersList, ClientUUIDS, wantlist=True)}}"

     # Start all PMDB servers.
     - name: "{{ recipe_name }}: Start pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length) | list }}"

      #Start proxyserver
     - name: "{{ recipe_name }}: Start multiple proxy servers."
       include_role:
          name: common
          tasks_from: start_proxy_server
       vars:
          ClientUUID: "{{ ClientUUIDS[item] }}"
       loop: "{{ range(0, ClientUUIDS | length) |list }}"

     - name: "{{ recipe_name }}: Store the UUID of pmdb server."
       vars:
         peer: "{{ TotalNServersList[0] }}"
       debug:
         msg: "Get the new peer to start: {{ peer }}"
       with_items:
         - "{{ peer }}"
       register: Peer

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         Key: "Key"
         Value: "Value"
         Operation: "write"
         OutfileName : "cpc_write_output"
         ncpcclires: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc client."
       with_items:
          - "{{ ncpcclires }}"
       register: writeres

     - name: "{{ recipe_name }}: Check if write is successful."
       vars:
         wrstatus: "{{ writeres['results'][0]['item']['write'][0]['Response']['Status'] }}"
       debug:
         msg: "Check if write is successful."
       failed_when: >
         (wrstatus|int != 0)

     - name: "{{ recipe_name }}: Starting controlplane_client to read the value."
       vars:
         Key: "Key"
         Value: ""
         Operation: "read"
         OutfileName : "read_output"
         ncpclires: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Reading through ncpc client."
       with_items:
          - "{{ ncpclires }}"
       register: readres
       no_log: true

     - name: "{{ recipe_name }}: Compare values after successful read operation."
       vars:
         rdval: "{{ readres['results'][0]['item']['read'][0]['Response'] }}"
       debug:
         msg: "Verifying parameter after read operation"
       failed_when: >
         (rdval['Status'] | int != 0) or
         (rdval['Response'] != "Value")

     - name: "{{ recipe_name }}: Starting controlplane_client to get the config values."
       vars:
         Key: "{{ Peer['results'][0]['item'] }}"
         Value: ""
         Operation: "config"
         OutfileName : "config_output"
         ncpclires: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Get config from ncpc_client."
       with_items:
          - "{{ ncpclires }}"
       register: configres
       no_log: true

     - name: "{{ recipe_name }}: Kill one of the proxy server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', ClientUUIDS[0], wantlist=True) }}"

     - name: "{{ recipe_name }}: prepare path to read recipe JSON file."
       shell: cat "{{base_dir}}"/"{{raft_uuid}}".json
       register: result

     - name: "{{ recipe_name }}: Convert output to JSON format."
       set_fact:
         getNodeDetails: "{{ result.stdout | from_json }}"

     - name: "{{ recipe_name }}: Get the serf nodes from recipe JSON."
       set_fact:
         getNodeName: "{{ getNodeDetails | json_query(jmesquery) }}"
       vars:
         jmesquery: 'serf_nodes."{{ ClientUUIDS[0] }}"'

     - debug:
         msg: "Killed node name is: {{ getNodeName }}"

     - name: "{{ recipe_name }}: Wait until killed proxy server's status gets changed."
       vars:
         Operation: "membership"
         Key: ""
         Value: ""
         OutfileName: "wait_for_nodeStatus"
       debug:
         msg: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       no_log: true
       loop: "{{ range(0, 10) | list }}"
       loop_control:
          pause: 1

     - name: "{{ recipe_name }}: Get proxy server's status."
       vars:
         Operation: "membership"
         Key: ""
         Value: ""
         OutfileName: "get_nodestatus"
         getNodeData: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Get node name"
       with_items:
          - "{{ getNodeData }}"
       register: nodeName

     - name: "{{ recipe_name }}: Check if killed node status gets changed."
       vars:
         verifyNodeStatus: "{{ nodeName['results'][0]['item'][getNodeName]['Status'] }}"
       debug:
         msg: "Verify Killed proxy server's Status"
       failed_when: verifyNodeStatus != "failed"

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         Key: "Key"
         Value: "Value"
         Operation: "write"
         OutfileName : "cpc_write_output"
         ncpcclires: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc client."
       with_items:
          - "{{ ncpcclires }}"
       register: writeres2

     - name: "{{ recipe_name }}: Check if write is successful."
       vars:
         wrstatus: "{{ writeres2['results'][0]['item']['write'][0]['Response']['Status'] }}"
       debug:
         msg: "Check if write is successful."
       failed_when: >
         (wrstatus|int != 0)

     - name: "{{ recipe_name }}: Starting controlplane_client to read the value."
       vars:
         Key: "Key"
         Value: ""
         Operation: "read"
         OutfileName : "read_output"
         ncpclires: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Reading through ncpc client."
       with_items:
          - "{{ ncpclires }}"
       register: readres
       no_log: true

     - name: "{{ recipe_name }}: Compare values after sucessful read operation."
       vars:
         rdval: "{{ readres['results'][0]['item']['read'][0]['Response'] }}"
       debug:
         msg: "Verifying parameter after read operation"
       failed_when: >
         (rdval['Status'] | int != 0) or
         (rdval['Response'] != "Value")

     - name: "{{ recipe_name }}: Starting controlplane_client to get the config values."
       vars:
         Key: "{{ Peer['results'][0]['item'] }}"
         Value: ""
         Operation: "config"
         OutfileName : "config_output"
         ncpclires: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Get config from ncpc_client."
       with_items:
          - "{{ ncpclires }}"
       register: configres2
       no_log: true

     - name: "{{ recipe_name }}: Kill one of the pmdb server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', Peer['results'][0]['item'], wantlist=True) }}"

     - name: "{{ recipe_name }}: Wait until killed pmdb server's status gets changed."
       vars:
         Operation: "membership"
         Key: ""
         Value: ""
         OutfileName: "wait_for_pmdbServerStatus"
       debug:
         msg: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       loop: "{{ range(0, 20) | list }}"
       loop_control:
          pause: 1

     - name: "{{ recipe_name }}: Get pmdb server's status."
       vars:
         Operation: "membership"
         Key: ""
         Value: ""
         OutfileName: "get_nodestatus"
         getPmdbServerData: "{{ lookup('controlplane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Get pmdb server status"
       with_items:
          - "{{ getPmdbServerData }}"
       register: pmdbServerStatus

     - set_fact:
         killedPmdbServer: "{{ Peer['results'][0]['item'] }}"

     - name: "{{ recipe_name }}: Check if killed pmdb server's status gets changed."
       vars:
         verifyPmdbServerStatus: "{{ pmdbServerStatus['results'][0]['item'][killedPmdbServer]['Status'] }}"
       debug:
         msg: "Verify Killed pmdb server's Status"
       failed_when: verifyPmdbServerStatus != "failed"

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
