- name: "control_plane_multiple_proxyservers"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "control_plane_multiple_proxyservers"
    number_of_clients: 5
    number_of_app_uuids: 1
    parent: None

  tasks:
  - block:
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     # start pmdb servers.
     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - debug:
        msg: "{{ TotalNServersList }}"

      #Create set of required number of app_uuids.
     - name: "Get set of required number of app_uuids."
       include_role:
        name: common
        tasks_from: create_app_uuid_set
       vars:
        number_of_apps: "{{ number_of_app_uuids }}"

     #Get multiple client uuids using common task.
     - name: "Get multiple client uuids."
       include_role:
        name: common
        tasks_from: get_multiple_client_uuids
       loop: "{{ range(0, number_of_clients) | list }}"

     - debug:
        msg: "{{ ClientUUIDS }}"

     - name: "Prepare gossip node configs"
       set_fact: ClusterInfo="{{lookup('niova_raftconfig', "controlplane", TotalNServersList, ClientUUIDS, wantlist=True)}}"

     # Start all PMDB servers.
     - name: "{{ recipe_name }}: Start pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length) | list }}"

      #Start proxyserver
     - name: "{{ recipe_name }}: Start multiple proxy servers."
       include_role:
          name: common
          tasks_from: start_proxy_server
       vars:
          ClientUUID: "{{ ClientUUIDS[item] }}"
       loop: "{{ range(0, ClientUUIDS | length) |list }}"

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         Key: "Key"
         Value: "Value"
         Operation: "write"
         OutfileName : "cpc_write_output"
         ncpcclires: "{{ lookup('controlPlane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc client."
       with_items:
          - "{{ ncpcclires }}"
       register: writeres

     - name: "{{ recipe_name }}: Check if write is successful."
       vars:
         wrstatus: "{{ writeres['results'][0]['item']['write'][0]['Response']['Status'] }}"
       debug:
         msg: "Check if write is successful."
       failed_when: >
         (wrstatus|int != 0)

     - name: "{{ recipe_name }}: Get config details for gossip nodes information."
       vars:
         Operation: "config"
         Key: ""
         Value: ""
         OutfileName: "nodestatus"
       debug:
         msg: "{{ lookup('controlPlane_client', Operation, Key, Value, OutfileName, wantlist=True) }}"

     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Kill one of the proxy server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', ClientUUIDS[0], wantlist=True) }}"

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         Key: "Key"
         Value: "Value"
         Operation: "write"
         OutfileName : "cpc_write_output"
         ncpcclires: "{{ lookup('controlPlane_client', Key, Value, Operation, OutfileName, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc client."
       with_items:
          - "{{ ncpcclires }}"
       register: writeres2

     - name: "{{ recipe_name }}: Check if write is successful."
       vars:
         wrstatus: "{{ writeres2['results'][0]['item']['write'][0]['Response']['Status'] }}"
       debug:
         msg: "Check if write is successful."
       failed_when: >
         (wrstatus|int != 0)

     - name: "{{ recipe_name }}: Get config details for gossip nodes information."
       vars:
         Operation: "config"
         Key: ""
         Value: ""
         OutfileName: "nodestatus"
       debug:
         msg: "{{ lookup('controlPlane_client', Operation, Key, Value, OutfileName, wantlist=True) }}"

     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Kill one of the pmdb server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', NRunningPeers[0], wantlist=True) }}"

     - name: "{{ recipe_name }}: Get config details for gossip nodes information."
       vars:
         Operation: "config"
         Key: ""
         Value: ""
         OutfileName: "nodestatus"
       debug:
         msg: "{{ lookup('controlPlane_client', Operation, Key, Value, OutfileName, wantlist=True) }}"

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
