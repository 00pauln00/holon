- import_playbook: basic_recipe_for_niovakv.yml
- name: "get_leader_operation"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "get_leader_operation"
    parent: "basic_recipe_for_niovakv"

  tasks:
  - block:
     - name: "Check if parent recipe failed"
       debug: msg="Check if parent recipe {{ parent }} failed"
       failed_when: terminate_recipe == true

      # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'niovakv'."
       vars:
         app_type: "{{ app_type}}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "niovakv")

      # Write key-value before killing leader.
     - name: "{{ recipe_name }}: Write the key-value before killing the leader."
       vars:
         Operation: "write"
         Key: "Country"
         Value: "India"
         OutfileName: "beforeWrite"
         NumRequest: 0
         MultiKey: False
         Sequential : False
         nkvclires: "{{ lookup('niova_kvclient', Operation, Key, Value, OutfileName, NumRequest, MultiKey, Sequential, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ nkvclires }}"
       register: writeres

       # check if write is successful
     - name: "{{ recipe_name }}: Check if write is successful"
       debug:
         msg: "Check if write is successful"
       failed_when: >
         (writeres['results'][0]['item']['write']['Response']['Status'] != 0)

       # Get leader.
     - name: "{{ recipe_name}}: Get Leader UUID"
       vars:
         Operation: "getLeader"
         Key: ""
         Value: ""
         OutfileName: "getLeader"
         NumRequest: 0
         MultiKey: False
         Sequential: False
         getLeader_values: "{{ lookup('niova_kvclient', Operation, Key, Value, OutfileName, NumRequest, MultiKey, Sequential, wantlist=True) }}"
       debug:
         msg: "Get the Old Leader UUID {{ getLeader_values }}"
       with_items:
         - "{{ getLeader_values }}"
       register: OldLeaderUUID

     - debug:
        msg: "{{ OldLeaderUUID}}"

       # Kill the leader.
     - name: "{{ recipe_name }}: Kill the leader."
       vars:
         old_leader: "{{ OldLeaderUUID['results'][0]['item']['getLeader']['Response']['Response'] }}"
       debug:
        msg: "killing the leader {{ lookup('niova_raftprocess', 'kill', old_leader, wantlist=True) }}"

     - name: "{{ recipe_name }}: Printing the list of all server"
       include_role:
          name: common
          tasks_from: get_server_uuid_info

       # verify new leader is elected
     - name: "{{ recipe_name }}: Verify new leader is elected successfully"
       include_role:
         name: common
         tasks_from: verify_new_leader_election
       vars:
         old_leader: "{{ OldLeaderUUID['results'][0]['item']['getLeader']['Response']['Response'] }}"
         peer_list: "{{ NRunningPeers }}"
       loop: "{{ range(0, peer_list | length) | list }}"
       loop_control:
          loop_var: itr

      # Get newly elected leader.
     - name: "{{ recipe_name}}: Get New Leader UUID"
       vars:
         Operation: "getLeader"
         Key: ""
         Value: ""
         OutfileName: "getLeader"
         NumRequest: 0
         MultiKey: False
         Sequential: False
         getLeader_values: "{{ lookup('niova_kvclient', Operation, Key, Value, OutfileName, NumRequest, MultiKey, Sequential, wantlist=True) }}"
       debug:
         msg: "Get the New Leader UUID {{ getLeader_values }}"
       with_items:
         - "{{ getLeader_values }}"
       register: NewLeaderUUID

      # check if new leader is elected
     - name: "{{ recipe_name}}: Check if new leader is elected"
       debug:
         msg: "Old leader : {{ OldLeaderUUID }} and New leader : {{ NewLeaderUUID }}"
       failed_when: OldLeaderUUID == NewLeaderUUID

      # Read back value after electing new leader
     - name: "{{ recipe_name }}: Read the value after electing new leader."
       vars:
         Operation: "read"
         Key: "Country"
         Value: ""
         OutfileName: "afterRead"
         NumRequest: 0
         MultiKey: False
         Sequential : False
         nkvclires: "{{ lookup('niova_kvclient', Operation, Key, Value, OutfileName, NumRequest, MultiKey, Sequential, wantlist=True) }}"
       debug:
         msg: "Read value from niovakv_client."
       with_items:
          - "{{ nkvclires }}"
       register: readres

     - name: "{{ recipe_name }}: compare values after successful read operation."
       vars:
         wrval: "{{ writeres['results'][0]['item']['write']['Request'] }}"
         rdval: "{{ readres['results'][0]['item']['read']['Response'] }}"
       debug:
         msg:
          - "Verifying parameter after read operation"
       failed_when: >
        (rdval['Status'] != 0) or
        (rdval['Response'] != wrval['Value'])

     rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true



