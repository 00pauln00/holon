- import_playbook: healthy_raftserver_cluster_type2.yml
  when: ClusterParams['ctype'] == "pumicedb"

- name: "Rollback during startup"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "rb_during_start"
     parent: "Healthy Raftserver Cluster Type2"
     requirement: "pumicedb"
     peer_raft_keys:
           - "/raft_root_entry/0/term"
           - "/raft_root_entry/0/commit-idx"
           - "/raft_root_entry/0/last-applied"
           - "/raft_root_entry/0/last-applied-cumulative-crc"
           - "/raft_root_entry/0/sync-entry-idx"
           - "/raft_root_entry/0/sync-entry-term"
           - "/raft_root_entry/0/sync-entry-data-size"
           - "/raft_root_entry/0/sync-entry-crc"

  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Verifying recipe compatibility requirements."
      include_role:
         name: common
         tasks_from: recipe_compatibility_requirement

    #Recipe-Preparation and step 1 to step 3.
    - name: "{{ recipe_name }}: Perform step1 to step3 from commmon task."
      include_role:
         name: common
         tasks_from: recipe_preparation_write_and_stop_servers

    #Step 4 - Poll for the Client Request to Timeout.
    - name: "{{ recipe_name }}: Get values for pmdb-test-apps, pmdb-request-history."
      vars:
        stage: "pmdb_tapps"
        raft_keys:
            - "/pumice_db_test_client"
        pmdb_client_values: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_keys) }}"
      debug:
        msg: "Getting values for pmdb-test-apps, pmdb-request-history."
      no_log: true
      with_items:
          - "{{ pmdb_client_values }}"
      register: pmdb_client_vals

    - name: "{{ recipe_name }}: Validate paramters for pmdb-test-apps and pmdb-request-history."
      vars:
        rncui: "{{ app_uuid.stdout }}:0:0:0:0"
        pmdb_test_apps: "{{ pmdb_client_vals['results'][0]['item']['//pumice_db_test_client']['pmdb-test-apps'][0] }}"
        pmdb_request_history: "{{ pmdb_client_vals['results'][0]['item']['//pumice_db_test_client']['pmdb-request-history'][0] }}"
      debug:
        msg: "Validating paramters for pmdb-test-apps and pmdb-request-history."
      failed_when: >
             (pmdb_test_apps['app-user-id'] != rncui) or
             (pmdb_test_apps['status'] != "Connection timed out") or
             (pmdb_test_apps['app-sync'] != false) or
             (pmdb_test_apps['last-request-tag'] != pmdb_request_history['last-request-tag']) or
             (pmdb_request_history['status'] !=  "Connection timed out")

    #Step 5 - Start all peers except leader.
    - name: "{{ recipe_name }}: Starting all followers."
      include_role:
        name: common
        tasks_from: start_server
      vars:
        follower_uuids: "{{ NRunningPeers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
        ServerUUID: "{{ follower_uuids[item] }}"
      loop: "{{ range(0, follower_uuids | length) | list }}"

    - name: "{{ recipe_name }}: Activate Raft timer thread on all started peers."
      vars:
        stage: "idle_off"
        cmd: "ignore_timer_events@false"
        where: "/raft_net_info/ignore_timer_events"
        follower_uuids: "{{ NRunningPeers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
        idle_off: "{{ lookup('niova_ctlrequest', 'apply_cmd', follower_uuids, cmd, where, wantlist=True) }}"
      debug:
        msg: "Activating Raft timer thread on all started peers."
      no_log: true

    #Wait for an election to complete.
    - name: "{{ recipe_name }}: Wait until leader election happens."
      vars:
        stage: "lea_elect"
        follower_uuids: "{{ NRunningPeers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', follower_uuids[item], '/raft_root_entry/0/leader-uuid')['/0/leader-uuid'] != "null"
      retries: 20
      delay: 1
      loop: "{{ range(0, follower_uuids | length) | list }}"

    #Get new leader_uuid and term value after step 5.
    - name: "{{ recipe_name }}: Get new leader_uuid and term value."
      vars:
        stage: "get_lea_vals"
        raft_keys:
               - "/raft_root_entry/0/leader-uuid"
               - "/raft_root_entry/0/term"
        follower_uuids: "{{ NRunningPeers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
        raft_values_leader_after_vals: "{{ lookup('niova_ctlrequest', 'lookup', follower_uuids[0], raft_keys) }}"
      debug:
        msg: "Getting new leader_uuid and term value."
      with_items:
          - "{{ raft_values_leader_after_vals }}"
      register: raft_values_leader_after

    #Verify that the cluster is in a same state.
    - name: "{{ recipe_name }}: Get raft_root_entry values after starting all followers."
      vars:
        stage: "get_clstate"
        follower_uuids: "{{ NRunningPeers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
        raft_root_entry: "{{ lookup('niova_ctlrequest', 'lookup', follower_uuids, peer_raft_keys) }}"
      debug:
         msg: "Getting raft_root_entry for all servers."
      no_log: true
      with_items:
         - "{{ raft_root_entry }}"
      register: raft_root_entry_all

    - name: "{{ recipe_name }}: Compare raft_root_entry values of all started peers."
      vars:
        term: "{{ raft_root_entry_all['results'][item]['item']['/0/term'] }}"
        term_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/term'] }}"
        commit_idx: "{{ raft_root_entry_all['results'][item]['item']['/0/commit-idx'] }}"
        commit_idx_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/commit-idx'] }}"
        last_applied: "{{ raft_root_entry_all['results'][item]['item']['/0/last-applied'] }}"
        last_applied_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/last-applied'] }}"
        last_applied_cum_crc: "{{ raft_root_entry_all['results'][item]['item']['/0/last-applied-cumulative-crc'] }}"
        last_applied_cum_crc_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/last-applied-cumulative-crc'] }}"
        sync_entry_idx: "{{ raft_root_entry_all['results'][item]['item']['/0/sync-entry-idx'] }}"
        sync_entry_idx_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/sync-entry-idx'] }}"
        sync_entry_term: "{{ raft_root_entry_all['results'][item]['item']['/0/sync-entry-term'] }}"
        sync_entry_term_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/sync-entry-term'] }}"
        sync_entry_data_size: "{{ raft_root_entry_all['results'][item]['item']['/0/sync-entry-data-size'] }}"
        sync_entry_data_size_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/sync-entry-data-size'] }}"
        sync_entry_crc: "{{ raft_root_entry_all['results'][item]['item']['/0/sync-entry-crc'] }}"
        sync_entry_crc_next: "{{ raft_root_entry_all['results'][item +1]['item']['/0/sync-entry-crc'] }}"
        follower_uuids: "{{ NRunningPeers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
      debug:
        msg: "Compare raft_root_entry values of all started peers."
      failed_when: >
           (term != term_next) or
           (commit_idx != commit_idx_next) or
           (last_applied != last_applied_next) or
           (last_applied_cum_crc != last_applied_cum_crc_next) or
           (sync_entry_idx != sync_entry_idx_next) or
           (sync_entry_term != sync_entry_term_next) or
           (sync_entry_data_size != sync_entry_data_size_next) or
           (sync_entry_crc != sync_entry_crc_next)
      loop: "{{ range(0, follower_uuids | length-1) | list }}"

    #Step 6 - Start remaining peer (which was leader previously).
    - name: "{{ recipe_name }}: Starting remaining peer."
      include_role:
        name: common
        tasks_from: start_server
      vars:
        leader_uuid_before: "{{ rb_during_start_raft_values['/0/leader-uuid'] }}"
        ServerUUID: "{{ leader_uuid_before }}"

    - name: "{{ recipe_name }}: Get commit-idx of leader after new leader election."
      vars:
        stage: "get_lea_commit_idx"
        peer_raft_keys:
            - "/raft_root_entry/0/commit-idx"
        leader_uuid_before: "{{ rb_during_start_raft_values['/0/leader-uuid'] }}"
        leader_values: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid_before, peer_raft_keys) }}"
      debug:
        msg: "Getting commit-idx of leader after new leader election."
      no_log: true
      with_items:
          - "{{ leader_values }}"
      register: leader_values_after_election

    - name: "{{ recipe_name }}: Wait for previous leader to become follower and it's commit-idx should be greater than previous commit-idx by 1."
      vars:
        stage: "poll_leader_vals"
        leader_uuid_before: "{{ rb_during_start_raft_values['/0/leader-uuid'] }}"
      debug:
        msg: "Waiting for previous leader to become follower and it's commit-idx should be greater than previous commit-idx by 1."
      no_log: true
      until: (lookup('niova_ctlrequest', 'lookup', leader_uuid_before, '/raft_root_entry/0/state')['/0/state'] != "follower") and (leader_values_after_election['results'][0]['item']['/0/commit-idx'] - rb_during_start_leader_values_before_election['/0/commit-idx'] == 1)
      retries: 10
      delay: 2

    - name: "{{ recipe_name }}: Get raft_root_entry values for previous leader."
      vars:
        stage: "get_clvalues"
        raft_keys:
            - "/raft_root_entry/0/state"
            - "/raft_root_entry/0/commit-idx"
            - "/raft_root_entry/0/follower-reason"
            - "/raft_root_entry/0/client-requests"
        leader_uuid_before: "{{ rb_during_start_raft_values['/0/leader-uuid'] }}"
        prev_leader_vals: "{{ lookup('niova_ctlrequest', 'lookup', leader_uuid_before, raft_keys) }}"
      debug:
        msg: "Getting raft_root_entry values for previous leader."
      no_log: true
      with_items:
          - "{{ prev_leader_vals }}"
      register: prev_leader

    - name: "{{ recipe_name }}: Validate parameters for previous leader."
      vars:
        prev_leader_vals: "{{ prev_leader['results'][0]['item'] }}"
      debug:
        msg: "Validating parameters for previous leader."
      no_log: true
      failed_when: >
            (prev_leader_vals['/0/state'] != "follower") or
            (prev_leader_vals['/0/commit-idx'] - rb_during_start_leader_values_before_election['/0/commit-idx'] != 1) or
            (prev_leader_vals['/0/follower-reason'] != "leader-already-present") or
            (prev_leader_vals['/0/client-requests'] != "redirect-to-leader")

    - name: "{{ recipe_name }}: Get cluster information."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    #6a- Verify that the cluster is in a same state after starting all peers.
    - name: "{{ recipe_name }}: Get raft_root_entry values for all peers."
      vars:
        num_running_servers: "{{ NRunningPeers }}"
        stage: "get_clstate"
        raft_root_entry: "{{ lookup('niova_ctlrequest', 'lookup', num_running_servers, peer_raft_keys) }}"
      debug:
         msg: "Getting raft_root_entry for all servers."
      no_log: true
      with_items:
         - "{{ raft_root_entry }}"
      register: raft_root_entry_vals

    - name: "{{ recipe_name }}: Compare raft_root_entry values of all peers."
      vars:
        num_running_servers: "{{ NRunningPeers }}"
        term: "{{ raft_root_entry_vals['results'][item]['item']['/0/term'] }}"
        term_next: "{{ raft_root_entry_vals['results'][item +1]['item']['/0/term'] }}"
        commit_idx: "{{ raft_root_entry_vals['results'][item]['item']['/0/commit-idx'] }}"
        commit_idx_next: "{{ raft_root_entry_vals['results'][item +1]['item']['/0/commit-idx'] }}"
        last_applied: "{{ raft_root_entry_vals['results'][item]['item']['/0/last-applied'] }}"
        last_applied_next: "{{ raft_root_entry_vals['results'][item +1]['item']['/0/last-applied'] }}"
        last_applied_cum_crc: "{{ raft_root_entry_vals['results'][item]['item']['/0/last-applied-cumulative-crc'] }}"
        last_applied_cum_crc_next: "{{ raft_root_entry_vals['results'][item +1]['item']['/0/last-applied-cumulative-crc'] }}"
        sync_entry_idx: "{{ raft_root_entry_vals['results'][item]['item']['/0/sync-entry-idx'] }}"
        sync_entry_idx_next: "{{ raft_root_entry_vals['results'][item +1]['item']['/0/sync-entry-idx'] }}"
        sync_entry_term: "{{ raft_root_entry_vals['results'][item]['item']['/0/sync-entry-term'] }}"
        sync_entry_term_next: "{{ raft_root_entry_vals['results'][item +1]['item']['/0/sync-entry-term'] }}"
        sync_entry_data_size: "{{ raft_root_entry_vals['results'][item]['item']['/0/sync-entry-data-size'] }}"
        sync_entry_data_size_next: "{{ raft_root_entry_vals['results'][item +1]['item']['/0/sync-entry-data-size'] }}"
        sync_entry_crc: "{{ raft_root_entry_vals['results'][item]['item']['/0/sync-entry-crc'] }}"
        sync_entry_crc_next: "{{ raft_root_entry_vals['results'][item +1]['item']['/0/sync-entry-crc'] }}"
      debug:
        msg: "Compare raft_root_entry values of all peers."
      no_log: true
      failed_when: >
           (term != term_next) or
           (commit_idx != commit_idx_next) or
           (last_applied != last_applied_next) or
           (last_applied_cum_crc != last_applied_cum_crc_next) or
           (sync_entry_idx != sync_entry_idx_next) or
           (sync_entry_term != sync_entry_term_next) or
           (sync_entry_data_size != sync_entry_data_size_next) or
           (sync_entry_crc != sync_entry_crc_next)
      loop: "{{ range(0, num_running_servers | length-1) | list }}"

    #6b - Ensure that the leader and term from step #5 have not changed.
    - name: "{{ recipe_name }}: Get leader_uuid and term value."
      vars:
        stage: "get_lea_values"
        raft_keys:
               - "/raft_root_entry/0/leader-uuid"
               - "/raft_root_entry/0/term"
        follower_uuids: "{{ NRunningPeers | difference(rb_during_start_raft_values['/0/leader-uuid']) }}"
        raft_values_leader: "{{ lookup('niova_ctlrequest', 'lookup', follower_uuids[0], raft_keys, wantlist=True) }}"
      debug:
        msg: "Getting leader_uuid and term value."
      no_log: true
      with_items:
          - "{{ raft_values_leader }}"
      register: raft_values_leader_after_reboot

    - name: "{{ recipe_name }}: Ensure that the leader and term from step #5 have not changed."
      vars:
        raft_vals_leader_after: "{{ raft_values_leader_after['results'][0]['item'] }}"
        raft_vals_leader_after_reboot: "{{ raft_values_leader_after_reboot['results'][0]['item'] }}"
      failed_when: >
            (raft_vals_leader_after['/0/leader-uuid'] != raft_vals_leader_after_reboot['/0/leader-uuid']) or
            (raft_vals_leader_after['/0/term'] != raft_vals_leader_after_reboot['/0/term'])
      debug:
        msg: "Verifying that leader and term value are same after step 5 and step 6."

    #7 - Issue a Read on the RNCUI used in Timed-Out Write Operation.
    - name: "{{ recipe_name }}: Perform read on the same object."
      vars:
        stage: "read"
        cmd: "input@{{ app_uuid.stdout }}:0:0:0:0.read"
        where: "/pumice_db_test_client/input"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"
      no_log: true

    #7a - Verifications.
    - name: "{{ recipe_name }}: Get values for pmdb-request-history."
      vars:
        stage: "get_pmdbrh"
        raft_keys:
             - "/pumice_db_test_client/pmdb-request-history"
        pmdb_request_history_values: "{{ lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_keys, wantlist=True) }}"
      debug:
        msg: "Getting values for pmdb-request-history."
      no_log: true
      with_items:
          - "{{ pmdb_request_history_values }}"
      register: pmdb_request_history_values_after_reboot

    - name: "{{ recipe_name }}: Validate parameters for pmdb-request-history."
      vars:
        rncui: "{{ app_uuid.stdout }}:0:0:0:0"
        pmdb_request_history: "{{ pmdb_request_history_values_after_reboot['results'][0]['item']['/pumice_db_test_client/pmdb-request-history'][0] }}"
      debug:
        msg: "Validating parameters for  pmdb-request-history."
      failed_when: >
            (pmdb_request_history['pmdb-seqno'] != 0) or
            (pmdb_request_history['app-user-id'] != rncui) or
            (pmdb_request_history['op'] != "read") or
            (pmdb_request_history['status'] != "No such file or directory")

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
           terminate_recipe: true
