- import_playbook: nisd_initialization_and_startup.yml
- name: "nisd_merge_yields_to_read_operation"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "nisd_merge_yields_to_read_operation"
    parent: "nisd_initialization_and_startup"
    num_of_remaining: 4
    no_of_ops: 85
    nisd_keys:
              - "/nisd_chunks/0/vblks-written"
              - "/nisd_chunks/0/metablock-seqno"
              - "/nisd_chunks/0/chunk-merge-status"
              - "/nisd_chunks/0/chunk-merge-cnt"
              - "/nisd_chunks/0/read-op-seqno"
              - "/nisd_chunks/0/merge-read-op-seqno"
              - "/nisd_chunks/0/vblks-read"
              - "/nisd_chunks/0/num-data-pblks"
              - "/nisd_chunks/0/num-meta-pblks"
              - "/nisd_chunks/0/num-reserved-meta-pblks"
              - "/conns/0/num-pending"
              - "/conns/0/vblks-pending"

  tasks:
  - block:
     - name: "Check if parent recipe failed"
       debug: msg="Check if parent recipe {{ parent }} failed"
       failed_when: terminate_recipe == true

     - name: Generate new vdev-uuid
       shell: "/usr/bin/uuid"
       register: mergeVdev

     - name: Generate new client-uuid for niova-block-test
       shell: "/usr/bin/uuid"
       register: mergeClient

     #1 - Perform Writes to a new Chunk/Fill Entire Reserved Pblk
     - name: "{{ recipe_name }}: Perform some Writes to the NISD."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ mergeVdev.stdout }}',
                 'read_operation_ratio_percentage' : '0',
                 'random_seed' : Null,
                 'client_uuid' : '{{ mergeClient.stdout }}',
                 'request_size_in_bytes' : '32',
                 'queue_depth' : '1',
                 'num_ops' : '{{ no_of_ops | string }}',
                 'integrity_check' : False,
                 'sequential_writes' : True,
                 'blocking_process' : False,
                 'lookout_uuid': ''
                 }
         wr_success: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"
       debug:
         msg: "get write's return code"
       failed_when: wr_success != "0"

     - name: "{{ recipe_name }}: Get nisd_chunk info."
       vars:
         stage: "verifyAftrWr"
         lookout_uuid: ""
         aftrWrNisdChunk: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify nisd values after writes: {{ aftrWrNisdChunk }}"
       #no_log: True
       failed_when: >
         (aftrWrNisdChunk['/0/vblks-written'] != (no_of_ops | int) * 32) or
         (aftrWrNisdChunk['/0/metablock-seqno'] != ((no_of_ops | int) - 1)) or
         (aftrWrNisdChunk['/0/chunk-merge-cnt'] != 0) or
         (aftrWrNisdChunk['/0/num-meta-pblks'] != 0) or
         (aftrWrNisdChunk['/0/num-data-pblks'] != (no_of_ops | int)) or
         (aftrWrNisdChunk['/0/num-reserved-meta-pblks'] != 1)

     - name: "{{ recipe_name }}: Capture values after 1st write."
       vars:
         stage: "verify_nisd_chunk"
         lookout_uuid: ""
         getPrevValues: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Store num-data-pblks: {{ getPrevValues }}"
       no_log: True
       with_items:
        - "{{ getPrevValues }}"
       register: origValues

     #2 - Apply the Fault Injection “read_preempts_merge”
     - name: "{{ recipe_name }}: Apply the Fault Injection “read_preempts_merge”"
       include_role:
         name: common
         tasks_from: apply_fi_on_nisd
       vars:
         numRemaining: "{{ num_of_remaining }}"
         NisdUUID: "{{ nisdUUID.stdout }}"
         LookoutUUID: ""
         fault_injection_name: "read_preempts_merge"

     - name: "{{ recipe_name }}: Apply the Fault Injection “read_preempts_merge”."
       include_role:
         name: common
         tasks_from: enable_fi_on_nisd
       vars:
         NisdUUID: "{{ nisdUUID.stdout }}"
         LookoutUUID: ""
         fault_injection_name: "read_preempts_merge"

     - pause:
         seconds: 2

     #3 -  Launch Reads (num_remaining - 1)
     - name: "{{ recipe_name }}: Launch Reads (num_remaining - 1)."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ mergeVdev.stdout }}',
                 'read_operation_ratio_percentage' : '100',
                 'random_seed' : Null,
                 'client_uuid' : '{{ mergeClient.stdout }}',
                 'request_size_in_bytes' : '32',
                 'queue_depth' : '3',
                 'num_ops' : '3',
                 'integrity_check' : False,
                 'sequential_writes' : False,
                 'blocking_process' : True,
                 'lookout_uuid': ''
                 }
       debug:
         msg: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"

     - name: "{{ recipe_name }}: Verify conns, tasks and nisd_chunk."
       vars:
         stage: "verfyAftrRd"
         lookout_uuid: ""
         aftrRdNisdChunk: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify nisd values after read: {{ aftrRdNisdChunk }}"
       #no_log: True
       failed_when: >
         (aftrRdNisdChunk['/0/vblks-read'] != 0) or
         (aftrRdNisdChunk['/0/read-op-seqno'] != 2) or
         (aftrRdNisdChunk['/0/merge-read-op-seqno'] != -1) or
         (aftrRdNisdChunk['/0/num-pending'] != 3) or
         (aftrRdNisdChunk['/0/vblks-pending'] != 96)

     - name: "{{ recipe_name }}: Get list of '/tasks'."
       vars:
        stage: "wait-fault-inject"
        lookout_uuid: ""
        task_key:
         - '/tasks'
       set_fact:
         getFaultInject: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, task_key, 'nisd', lookout_uuid, wantlist=True) }}"

     - name: "{{ recipe_name }}: Verify 'wait-fault-inject'."
       set_fact:
         wait_fault_inject: "{{ getFaultInject['//tasks'][item]['wait-fault-inject'] }}"
       when: (getFaultInject['//tasks'][item]['type'] == "vblk-read")
       loop: "{{  range(0, getFaultInject['//tasks'] |length) | list }}"

     - debug:
        msg: "{{ recipe_name }}: Verify wait-fault-inject has been configured."
       failed_when: >
         ((wait_fault_inject | int) != 3)

     #4 - Pause Compaction on the Chunk
     - name: "{{ recipe_name }}: Pause Compaction on the Chunk."
       vars:
         stage: "chunkPause"
         cmd: "chunk-merge-status@pause"
         where: "/nisd_chunks/vdev-uuid@{{ mergeVdev.stdout }}"
         lookout_uuid: ""
       debug:
         msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', nisdUUID.stdout, cmd, where, 'nisd', lookout_uuid, wantlist=True) }}"
       no_log: true

     - name: "{{ recipe_name }}: Verify after pause compaction."
       vars:
         stage: "verifyAftrPause"
         lookout_uuid: ""
         aftrPause: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify after pause compaction: {{ aftrPause }}"
       no_log: True
       failed_when: >
         (aftrPause['/0/chunk-merge-status'] != "paused")

     #5 - Overwrite the VBLKS from Step #1 using a new CLIENT_UUID
     - name: Generate new client-uuid for niova-block-test
       shell: "/usr/bin/uuid"
       register: newMergeClient

     - name: "{{ recipe_name }}: Overwrite the VBLKS from Step #1 using a new CLIENT_UUID."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ mergeVdev.stdout }}',
                 'read_operation_ratio_percentage' : '0',
                 'random_seed' : Null,
                 'client_uuid' : '{{ newMergeClient.stdout }}',
                 'request_size_in_bytes' : '32',
                 'queue_depth' : '1',
                 'num_ops' : '{{ no_of_ops | string }}',
                 'integrity_check' : False,
                 'sequential_writes' : True,
                 'blocking_process' : False,
                 'lookout_uuid': ''
                 }
         wr_success: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"
       debug:
         msg: "get write's return code"
       failed_when: wr_success != "0"

     - name: "{{ recipe_name }}: Verify after overwrite."
       vars:
         stage: "verfyAftr2ndWr"
         old_values: "{{ origValues['results'][0]['item'] }}"
         lookout_uuid: ""
         aftrWr: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify compaction has NOT occurred: {{ aftrWr }}"
       no_log: True
       failed_when: >
         (aftrWr['/0/vblks-written'] != ((old_values['/0/vblks-written'] | int) * 2)) or
         (aftrWr['/0/num-reserved-meta-pblks'] != ((old_values['/0/num-reserved-meta-pblks'] | int) + 1)) or
         (aftrWr['/0/chunk-merge-status'] != "paused")

     #6 - Resume and Force Compaction
     - name: "{{ recipe_name }}: Resume Compaction."
       vars:
         stage: "chunkResume"
         cmd: "chunk-merge-status@resume"
         where: "/nisd_chunks/vdev-uuid@{{ mergeVdev.stdout }}"
         lookout_uuid: ""
       debug:
         msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', nisdUUID.stdout, cmd, where, 'nisd', lookout_uuid, wantlist=True) }}"
       no_log: true

     - name: "{{ recipe_name }}: Force Compaction."
       vars:
         stage: "chunkForce"
         cmd: "chunk-merge-status@merge"
         where: "/nisd_chunks/vdev-uuid@{{ mergeVdev.stdout }}"
         lookout_uuid: ""
       debug:
         msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', nisdUUID.stdout, cmd, where, 'nisd', lookout_uuid, wantlist=True) }}"
       no_log: true

     - name: "{{ recipe_name }}: Verify after unpause compaction."
       vars:
         stage: "aftrForceCompaction"
         lookout_uuid: ""
         aftrForceCompct: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify after pause compaction: {{ aftrForceCompct }}"
       no_log: True
       failed_when: >
         (aftrForceCompct['/0/num-meta-pblks'] != 1) or
         (aftrForceCompct['/0/num-reserved-meta-pblks'] != 2) or
         (aftrForceCompct['/0/num-data-pblks'] != ((no_of_ops | int) * 2)) or
         (aftrForceCompct['/0/chunk-merge-status'] != "merging") or
         (aftrForceCompct['/0/chunk-merge-cnt'] != 1) or
         (aftrForceCompct['/0/merge-read-op-seqno'] != 2)

     - name: "{{ recipe_name }}: Get list of '/tasks'."
       vars:
        stage: "wait-merge-preempted"
        lookout_uuid: ""
        task_key:
              - '/tasks'
       set_fact:
         getTaskValue: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, task_key, 'nisd', lookout_uuid, wantlist=True) }}"

     - name: "{{ recipe_name }}: Verify 'wait-merge-preempted'."
       set_fact:
         wait_merge_preempted: "{{ getTaskValue['//tasks'][item]['wait-merge-preempted'] }}"
       when: (getTaskValue['//tasks'][item]['type'] == "compaction")
       loop: "{{  range(0, getTaskValue['//tasks'] |length) | list }}"

     - debug:
        msg: "{{ recipe_name }}: Verify wait-merge-preempted has been configured."
       failed_when: >
         ((wait_merge_preempted | int) != 1)

     #7 - Enqueue Reads from the Client Used in Step #5
     - name: "{{ recipe_name }}: Enqueue Reads from the Client Used in Step #5"
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ mergeVdev.stdout }}',
                 'read_operation_ratio_percentage' : '100',
                 'random_seed' : Null,
                 'client_uuid' : '{{ newMergeClient.stdout }}',
                 'request_size_in_bytes' : '32',
                 'queue_depth' : '1',
                 'num_ops' : '{{ no_of_ops | string }}',
                 'integrity_check' : False,
                 'sequential_writes' : False,
                 'blocking_process' : True,
                 'lookout_uuid': ''
                 }
       debug:
         msg: "{{ lookup('nisd_handler', 'niova-block-test', input_param, wantlist=True) }}"

     - pause:
         seconds: 2

     - name: "{{ recipe_name }}: Verify nisd_chunks Checks"
       vars:
         stage: "aftrRead"
         old_values: "{{ origValues['results'][0]['item'] }}"
         lookout_uuid: ""
         aftrRead: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify nisd_chunks Checks: {{ aftrRead }}"
       no_log: True
       failed_when: >
         (aftrRead['/0/vblks-read'] != 2816) or
         (aftrRead['/0/vblks-written'] != ((old_values['/0/vblks-written'] | int) * 2)) or
         (aftrRead['/0/num-data-pblks'] != (no_of_ops | int)) or
         (aftrRead['/0/num-meta-pblks'] != 1) or
         (aftrRead['/0/num-reserved-meta-pblks'] != 1) or
         (aftrRead['/0/metablock-seqno'] != (((no_of_ops | int) * 2) - 1)) or
         (aftrRead['/0/read-op-seqno'] != ((no_of_ops | int) + 2)) or
         (aftrRead['/0/merge-read-op-seqno'] != -1) or
         (aftrRead['/0/chunk-merge-cnt'] != 1) or
         (aftrRead['/0/chunk-merge-status'] != "idle")

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
