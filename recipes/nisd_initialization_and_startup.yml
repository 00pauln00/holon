- name: "nisd_initialization_and_startup"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "nisd_initialization_and_startup"
    parent: None
    nisd_root_keys:
              - "/nisd_root_entry/0/uuid"
              - "/nisd_root_entry/0/instance-uuid"
              - "/nisd_root_entry/0/status"
              - "/nisd_root_entry/0/num-reserved-pblks"
              - "/nisd_root_entry/0/num-pblks"
              - "/nisd_root_entry/0/num-pblks-used"
              - "/nisd_root_entry/0/vblks-written"
              - "/nisd_root_entry/0/vblks-written"
              - "/nisd_root_entry/0/num-pblks-used"
              - "/nisd_root_entry/0/num-reserved-pblks-used"
    nisd_chunk_keys:
              - "/nisd_chunks/0/vdev-uuid"
              - "/nisd_chunks/0/number"
              - "/nisd_chunks/0/num-data-pblks"
              - "/nisd_chunks/0/num-meta-pblks"
              - "/nisd_chunks/0/num-reserved-meta-pblks"
              - "/nisd_chunks/0/metablock-seqno"
              - "/nisd_chunks/0/read-op-seqno"
              - "/nisd_chunks/0/merge-read-op-seqno"
              - "/nisd_chunks/0/vblks-read"
              - "/nisd_chunks/0/num-cme"
              - "/nisd_chunks/0/ref-cnt"
              - "/nisd_chunks/0/chunk-merge-cnt"
              - "/nisd_chunks/0/chunk-merge-status"

  tasks:
  - block:
     - name: generate new uuid
       shell: "/usr/bin/uuid"
       register: nisdUUID

     - debug:
         msg:
          - "Nisd UUID: {{ nisdUUID.stdout }}"

     - name: "{{ recipe_name }}: Start niova-block-ctl process."
       vars:
          input_param: {
             'nisd_uuid': '{{ nisdUUID.stdout }}',
             'nisd_dev_size': '68719476736'
              }
       debug:
         msg: "{{ lookup('nisd_standalone', 'niova-block-ctl', input_param, wantlist=True) }}"
       #no_log: True

     - name: "{{ recipe_name }}: Start nisd process."
       vars:
         input_param: {
                  'nisd_uuid' : '{{ nisdUUID.stdout }}',
                  'uport' : '1053'
                  }
       debug:
         msg: "{{ lookup('nisd_standalone', 'nisd', input_param, wantlist=True) }}"
       no_log: True

     - pause:
         seconds: 2

     - name: "{{ recipe_name}}: Wait until nisd_root_entry gets updated"
       vars:
         stage: "wait_for_nisd_root_entry"
         lookout_uuid: ""
       debug:
         msg: "Waiting for nisd to get updated"
       until: lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, '/nisd_root_entry/0/status', 'nisd', lookout_uuid, wantlist=True) | dict2items | map(attribute='value') | list | first == "running"
       retries: 10
       delay: 1

     - name: "{{ recipe_name }}: Get nisd_root_entry info."
       vars:
         stage: "get_nisd_root_entry"
         lookout_uuid: ""
         nisdRootEntryVal: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_root_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Get nisd root entry values"
       with_items:
        - "{{ nisdRootEntryVal }}"
       register: getNisdVal

     - name: "{{ recipe_name }}: prepare path to read recipe JSON file."
       vars:
         base_dir: "{{ ClusterInfo | json_query('base_dir_path')}}"
         raft_uuid: "{{ ClusterInfo | json_query('raft_uuid')}}"
       shell: cat "{{base_dir}}"/"{{raft_uuid}}".json
       register: result

     - name: "{{ recipe_name }}: Convert output to JSON format."
       set_fact:
         getRaftProcessDetails: "{{ result.stdout | from_json }}"

     - name: "{{ recipe_name }}: Get the IMG_FILE_NAME."
       set_fact:
         getDeviceFile: "{{ getRaftProcessDetails | json_query(jmesquery) }}"
       vars:
         jmesquery: 'raft_process."{{ nisdUUID.stdout }}".img_file_name'

     - name: "{{ recipe_name }}: Verify nisd_root_entry info."
       vars:
         verifyNisd: "{{ getNisdVal['results'][0]['item'] }}"
       debug:
         msg: "verify nisd root entry values: {{ verifyNisd }}"
       no_log: True
       failed_when: >
         (verifyNisd['/0/uuid'] != nisdUUID.stdout) or
         (verifyNisd['/0/status'] != "running")

     - name: "{{ recipe_name }}: Get niorq_mgr_root_entry info."
       vars:
         stage: "get_nisd_root_entry"
         verifyNisd: "{{ getNisdVal['results'][0]['item']['/0/num-reserved-pblks'] }}"
         nisd_keys:
              - "/niorq_mgr_root_entry/0/uuid"
              - "/niorq_mgr_root_entry/0/dev-path"
              - "/niorq_mgr_root_entry/0/status"
              - "/niorq_mgr_root_entry/0/dev-bytes-read"
              - "/niorq_mgr_root_entry/0/dev-rd-size"
         lookout_uuid: ""
         niorq_mgr_entry: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify niorq_mgr_root_entry info: {{ niorq_mgr_entry }}"
       no_log: True
       failed_when: >
         (niorq_mgr_entry['/0/uuid'] != nisdUUID.stdout) or
         (niorq_mgr_entry['/0/status'] != "running") or
         (niorq_mgr_entry['/0/dev-path'] != getDeviceFile) or
         (niorq_mgr_entry['/0/dev-rd-size']['512'] != 3) or
         (niorq_mgr_entry['/0/dev-rd-size']['4096'] != (verifyNisd | int)) or
         (niorq_mgr_entry['/0/dev-bytes-read'] != ((verifyNisd | int) * 4096) + (3 * 512))

     - name: "Verify 'tasks' items are idle."
       include_role:
         name: common
         tasks_from: verify_nisd_tasks_parameters
       vars:
         NisdUUID: "{{ nisdUUID.stdout }}"
         LookoutUUID: ""

     - name: "{{ recipe_name }}: Kill the nisd process."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', nisdUUID.stdout, wantlist=True) }}"
       no_log: True

     - pause:
        seconds: 2

     - name: "{{ recipe_name }}: Restart same nisd process."
       vars:
          input_param: {
                  'nisd_uuid' : '{{ nisdUUID.stdout }}',
                  'uport' : '1053'
                  }
       debug:
         msg: "{{ lookup('nisd_standalone', 'nisd', input_param, wantlist=True) }}"
       no_log: True

     - pause:
         seconds: 2

     - name: "{{ recipe_name}}: Wait until nisd_root_entry gets updated"
       vars:
         stage: "wait_for_nisd_root_entry"
         lookout_uuid: ""
       debug:
         msg: "Waiting for nisd to get updated"
       until: lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, "/nisd_root_entry/0/status", 'nisd', lookout_uuid, wantlist=True) | dict2items | map(attribute='value') | list | first == "running"
       retries: 10
       delay: 1

     - name: "{{ recipe_name }}: Get nisd_root_entry info."
       vars:
         stage: "afterRestart_nisd_root_entry"
         lookout_uuid: ""
         nisdRootEntryVal: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_root_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Get nisd root entry values"
       no_log: True
       with_items:
        - "{{ nisdRootEntryVal }}"
       register: aftrRestartNisd

     - name: "{{ recipe_name }}: Verify nisd_root_entry info."
       vars:
         prev_instance_uuid: "{{ getNisdVal['results'][0]['item'] }}"
         verifyNisd: "{{ aftrRestartNisd['results'][0]['item'] }}"
       debug:
         msg: "verify nisd root entry values"
       no_log: True
       failed_when: >
         (verifyNisd['/0/uuid'] != nisdUUID.stdout) or
         (verifyNisd['/0/status'] != "running") or
         (verifyNisd['/0/instance-uuid'] == prev_instance_uuid['/0/instance-uuid'])

     - name: Generate new vdev-uuid
       shell: "/usr/bin/uuid"
       register: vdevUUID

     - name: Generate new client-uuid for niova-block-test
       shell: "/usr/bin/uuid"
       register: blockTestClientUUID

     - name: "{{ recipe_name }}: Perform some Writes to the NISD."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ vdevUUID.stdout }}',
                 'read_operation_ratio_percentage' : '0',
                 'random_seed' : '123',
                 'client_uuid' : '{{ blockTestClientUUID.stdout }}',
                 'request_size_in_bytes' : '32',
                 'queue_depth' : '1',
                 'num_ops' : '50',
                 'integrity_check' : True,
                 'sequential_writes' : False,
                 'blocking_process' : False
                 }
         wr_success: "{{ lookup('nisd_standalone', 'niova-block-test', input_param, wantlist=True) }}"
       debug:
         msg: "get write's return code"
       #no_log:  True
       with_items:
        - "{{ wr_success }}"
       register: get_wr

     - debug:
         msg: "Verify write is success"
       failed_when: (get_wr['results'][0]['item'] != "0")

     - name: "{{ recipe_name}}: Wait until nisd_root_entry gets updated"
       vars:
         stage: "wait_for_nisd_root_entry"
         lookout_uuid: ""
       debug:
         msg: "Waiting for nisd to get updated"
       no_log: True
       until: lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, "/nisd_root_entry/0/status", 'nisd', lookout_uuid, wantlist=True) | dict2items | map(attribute='value') | list | first == "running"
       retries: 10
       delay: 1

     - name: "{{ recipe_name }}: Get nisd_chunk info."
       vars:
         stage: "get_nisd_chunk"
         old_num_block_used: "{{ aftrRestartNisd['results'][0]['item']['/0/num-pblks-used'] }}"
         nisd_keys:
              - "/nisd_root_entry/0/vblks-written"
              - "/nisd_root_entry/0/num-pblks-used"
              - "/nisd_root_entry/0/num-reserved-pblks-used"
              - "/nisd_chunks/0/vdev-uuid"
              - "/nisd_chunks/0/num-data-pblks"
              - "/nisd_chunks/0/num-meta-pblks"
              - "/nisd_chunks/0/num-reserved-meta-pblks"
         lookout_uuid: ""
         getNiovaBlockTest: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify nisd values after writes: {{ getNiovaBlockTest }}"
       no_log: True
       failed_when: >
         (getNiovaBlockTest['/0/num-pblks-used'] != ((old_num_block_used | int) + 50)) or
         (getNiovaBlockTest['/0/vblks-written'] != 1600) or
         (getNiovaBlockTest['/0/num-reserved-pblks-used'] != 1) or
         (getNiovaBlockTest['/0/vdev-uuid'] != vdevUUID.stdout) or
         (getNiovaBlockTest['/0/num-data-pblks'] != 50) or
         (getNiovaBlockTest['/0/num-meta-pblks'] != 0) or
         (getNiovaBlockTest['/0/num-reserved-meta-pblks'] != 1)

     - name: "{{ recipe_name }}: Store the metablock-seqno."
       vars:
         stage: "get_metablock_seqno"
         lookout_uuid: ""
         getMetablockSeqNo: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, '/nisd_chunks/0/metablock-seqno', 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Get metablock-seqno"
       with_items:
        - "{{ getMetablockSeqNo }}"
       register: oldMetablockSeqNo

     - name: "{{ recipe_name }}: Kill the nisd process."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', nisdUUID.stdout, wantlist=True) }}"
       no_log: True

     - pause:
        seconds: 2

     #- name: "{{ recipe_name }}: Wait until killed nisd's status gets changed."
     #  vars:
     #    getNisd: "{{ nisdUUID.stdout }}"
     #    input_param: {
     #             'Operation': 'NISDGossip',
     #             'OutfileName': 'wait_for_killed_nisdStatus'
     #             }
     #  debug:
     #    msg: "Verifying NISD's Status"
     #  until: lookup('nisd_standalone', 'ncpc', input_param, wantlist=True) | dict2items | map(attribute='value') | map(attribute=getNisd) | map(attribute='Status') | list | first == "Dead"
     #  retries: 10
     #  delay: 1

     - name: "{{ recipe_name }}: Restart same nisd process."
       vars:
          input_param: {
                  'nisd_uuid' : '{{ nisdUUID.stdout }}',
                  'uport' : '1053'
                  }
       debug:
         msg: "{{ lookup('nisd_standalone', 'nisd', input_param, wantlist=True) }}"
       no_log: True

     - pause:
         seconds: 2

     #- name: "{{ recipe_name }}: Wait until restarted nisd's status gets changed."
     #  vars:
     #    getNisd: "{{ nisdUUID.stdout }}"
     #    input_param: {
     #             'Operation': 'NISDGossip',
     #             'OutfileName': 'restarted_nisdGossip'
     #             }
     #  debug:
     #    msg: "Verifying NISD's Status"
     #  until: lookup('nisd_standalone', 'ncpc', input_param, wantlist=True) | dict2items | map(attribute='value') | map(attribute=getNisd) | map(attribute='Status') | list | first == "Alive"
     #  retries: 20
     #  delay: 1

     - name: "{{ recipe_name}}: Wait until nisd_root_entry gets updated"
       vars:
         stage: "wait_for_nisd_root_entry"
         lookout_uuid: ""
       debug:
         msg: "Waiting for nisd to get updated"
       until: lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, "/nisd_root_entry/0/status", 'nisd', lookout_uuid, wantlist=True) | dict2items | map(attribute='value') | list | first == "running"
       retries: 10
       delay: 1

     - name: "{{ recipe_name }}: Verify nisd_root_entry."
       vars:
         stage: "aftrRestart_nisd_info"
         old_num_block_used: "{{ aftrRestartNisd['results'][0]['item']['/0/num-pblks-used'] }}"
         lookout_uuid: ""
         aftrRestart: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_root_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify nisd_root_entry"
       no_log: True
       failed_when: >
         (aftrRestart['/0/uuid'] != nisdUUID.stdout) or
         (aftrRestart['/0/status'] != "running") or
         (aftrRestart['/0/vblks-written'] != 0) or
         (aftrRestart['/0/num-reserved-pblks-used'] != 1) or
         (aftrRestart['/0/num-pblks-used'] != ((old_num_block_used | int) + 50))

     - name: "{{ recipe_name }}: Verify nisd_chunks Checks"
       vars:
         stage: "aftrRestart_nisd_chunks"
         old_metablock: "{{ oldMetablockSeqNo['results'][0]['item']['/0/metablock-seqno'] }}"
         lookout_uuid: ""
         aftrRestart: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_chunk_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify nisd_chunks Checks: {{ old_metablock }}, {{ aftrRestart }}"
       no_log: True
       failed_when: >
         (aftrRestart['/0/vdev-uuid'] != vdevUUID.stdout) or
         (aftrRestart['/0/number'] != 0) or
         (aftrRestart['/0/num-data-pblks'] != 50) or
         (aftrRestart['/0/num-meta-pblks'] != 0) or
         (aftrRestart['/0/num-reserved-meta-pblks'] != 1) or
         (aftrRestart['/0/metablock-seqno'] != (old_metablock | int)) or
         (aftrRestart['/0/read-op-seqno'] != -1) or
         (aftrRestart['/0/merge-read-op-seqno'] != -1) or
         (aftrRestart['/0/chunk-merge-cnt'] != 0) or
         (aftrRestart['/0/chunk-merge-status'] != "idle")

     - name: "{{ recipe_name }}: Perform a Read of the Previously Written VBLKS."
       vars:
         input_param: {
                 'uuid_to_write' : 'unix:{{ nisdUUID.stdout }}',
                 'vdev' : '{{ vdevUUID.stdout }}',
                 'read_operation_ratio_percentage' : '100',
                 'random_seed' : '123',
                 'client_uuid' : '{{ blockTestClientUUID.stdout }}',
                 'request_size_in_bytes' : '32',
                 'queue_depth' : '1',
                 'num_ops' : '50',
                 'integrity_check' : True,
                 'sequential_writes' : False,
                 'blocking_process' : False
                 }
         rd_success: "{{ lookup('nisd_standalone', 'niova-block-test', input_param, wantlist=True) }}"
       debug:
         msg: "get read's return code"
       with_items:
        - "{{ rd_success }}"
       register: get_rd

     - debug:
         msg: "Verify read must pass"
       failed_when: (get_rd['results'][0]['item'] != "0")

     - name: "Verify 'tasks' items are idle."
       include_role:
         name: common
         tasks_from: verify_nisd_tasks_parameters
       vars:
         NisdUUID: "{{ nisdUUID.stdout }}"
         LookoutUUID: ""

     - name: "{{ recipe_name }}: Verify nisd_root_entry."
       vars:
         stage: "aftrRead_nisd_info"
         nisd_keys:
              - "/nisd_root_entry/0/vblks-read"
              - "/nisd_root_entry/0/vblks-hole-read"
         lookout_uuid: ""
         aftrRead: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify nisd_root_entry: {{ aftrRead }}"
       no_log: True
       failed_when: >
         (aftrRead['/0/vblks-read'] != 1600) or
         (aftrRead['/0/vblks-hole-read'] != 0)

     - name: "{{ recipe_name }}: Verify nisd_chunk checks."
       vars:
         stage: "aftrRead_nisd_chunk"
         lookout_uuid: ""
         aftrRead: "{{ lookup('niova_ctlrequest', 'lookup', nisdUUID.stdout, nisd_chunk_keys, 'nisd', lookout_uuid, wantlist=True) }}"
       debug:
         msg: "Verify nisd_chunks: {{ aftrRead }}"
       no_log: True
       failed_when: >
         (aftrRead['/0/vblks-read'] != 1600) or
         (aftrRead['/0/read-op-seqno'] != 49) or
         (aftrRead['/0/ref-cnt'] != ((aftrRead['/0/num-cme'] | int) + 1))

    rescue:
     - name: "Recipe: {{ recipe_name }} failed"
       set_fact:
         terminate_recipe: true
