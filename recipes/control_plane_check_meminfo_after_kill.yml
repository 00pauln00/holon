- import_playbook: basic_controlplane_membership.yml

- name: "Controlplane_recipe"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "Controlplane_recipe"
    parent: basic_controlplane_membership 

  tasks:
  - block:
      # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Get the leader and follower uuids."
       include_role:
         name: common
         tasks_from: get_follower_stats
    
     # Start 5th PMDB servers.
     - name: "{{ recipe_name }}: Start  5th  pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers| length) | list }}"

     - name: "{{ recipe_name }}: Store the UUID of 5th pmdb server."
       vars:
         peer: "{{ TotalNServersList[4] }}"
       debug:
         msg: "Get the new peer to start: {{ peer }}"
       with_items:
         - "{{ peer }}"
       register: Peer5

     - name: "{{ recipe_name }}: Starting controlplane_client to get the config values after starting 5th pmdb server."
       vars:
         input_param: {
                  'Key': '{{  Peer5["results"][0]["item"] }}',
                  'Value': '',
                  'Operation': 'config',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'config_output_5th_pmdb'
                  }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from niovakv_client."
       with_items:
          - "{{ ncpclires }}"
       register: configres_after_5th_pmdbserver
       no_log : true 

     - name: "{{ recipe_name }}: Starting controlplane_client to write the value."
       vars:
         input_param: {
                'Key': 'Country',
                'Value': 'India',
                'Operation': 'write',
                'IP_addr': '',
                'Port': '',
                'OutfileName': 'write_output_controlplane'
                 }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpclires }}"
       register: writeres
       no_log: true

     - name: "{{ recipe_name }}: Check if write is successful."
       vars:
         wrstatus: "{{ writeres['results'][0]['item']['write'][0]['Response']['Status'] }}"
       debug:
         msg: "Check if write is successful."
       failed_when: >
         (wrstatus|int != 0)

     - name: "{{ recipe_name }}: Kill one of the proxy server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', ClientUUIDS[0], wantlist=True) }}"

     - name: "{{ recipe_name }}: prepare path to read recipe JSON file."
       shell: cat "{{base_dir}}"/"{{raft_uuid}}".json
       register: result

     - name: "{{ recipe_name }}: Convert output to JSON format."
       set_fact:
         getNodeDetails: "{{ result.stdout | from_json }}"

     - name: "{{ recipe_name }}: Get the serf nodes from recipe JSON."
       set_fact:
         getNodeName: "{{ getNodeDetails | json_query(jmesquery) }}"
       vars:
         jmesquery: 'serf_nodes."{{ ClientUUIDS[0] }}"'

     - debug:
         msg: "Killed node name is: {{ getNodeName }}"

     - name: "{{ recipe_name }}: Wait until killed proxy server's status gets changed."
       vars:
         input_param: {
                  'Key': '',
                  'Value': '',
                  'Operation': 'membership',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'wait_for_nodeStatus_{{ item }}'
                  }
       debug:
         msg: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       no_log : true
       loop: "{{ range(0, 10) | list }}"
       loop_control:
          pause: 1

     - name: "{{ recipe_name }}: Get proxy server's status."
       vars:
         input_param: {
                  'Key': '',
                  'Value': '',
                  'Operation': 'membership',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'get_proxyServerStatus'
                  }
         getProxyServerData: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Get proxy server status"
       with_items:
          - "{{ getProxyServerData }}"
       register: proxyServerStatus
     
     - name: "{{ recipe_name }}: Check if killed node status gets changed."
       vars:
         verifyNodeStatus: "{{ proxyServerStatus['results'][0]['item'][getNodeName]['Status'] }}"
       debug:
         msg: "Verify Killed proxy server's Status"
       failed_when: verifyNodeStatus != "failed"
    
     - name: "{{ recipe_name }}: Starting controlplane_client to read the value."
       vars:
         input_param: {
                  'Key': 'Country',
                  'Value': '',
                  'Operation': 'read',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'read_outputControlplane_recipe'
                  }
         ncpclires: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Reading through ncpc client."
       with_items:
          - "{{ ncpclires }}"
       register: readresControlplane_recipe
       no_log: true

     - name: "{{ recipe_name }}: Compare values after sucessful read operation."
       vars:
         rdval: "{{ readresControlplane_recipe['results'][0]['item']['read'][0]['Response'] }}"
       debug:
         msg: "Verifying parameter after read operation"
       failed_when: >
         (rdval['Status'] | int != 0) or
         (rdval['Response'] != "India") 
    
     - name: "{{ recipe_name }}: Kill one of the pmdb server."
       debug:
         msg:  "{{ lookup('niova_raftprocess', 'kill', Peer5['results'][0]['item'], wantlist=True) }}"

     - name: "{{ recipe_name }}: Wait until killed pmdb server's status gets changed."
       vars:
         input_param: {
                  'Key': '',
                  'Value': '',
                  'Operation': 'membership',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'wait_for_pmdbServerStatus_{{ item }}'
                  }
       debug:
         msg: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       no_log : true
       loop: "{{ range(0, 10) | list }}"
       loop_control:
          pause: 1

     - name: "{{ recipe_name }}: Get pmdb server's status."
       vars:
         input_param: {
                  'Key': '',
                  'Value': '',
                  'Operation': 'membership',
                  'IP_addr': '',
                  'Port': '',
                  'OutfileName': 'get_pmdbServerStatus'
                  }
         getPmdbServerData: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Get pmdb server status"
       with_items:
          - "{{ getPmdbServerData }}"
       register: pmdbServerStatus
       no_log : true

     - set_fact:
         killedPmdbServer: "{{ Peer5['results'][0]['item'] }}"

     - name: "{{ recipe_name }}: Check if killed pmdb server's status gets changed."
       vars:
         verifyPmdbServerStatus: "{{ pmdbServerStatus['results'][0]['item'][killedPmdbServer]['Status'] }}"
       debug:
         msg: "Verify Killed pmdb server's Status"
       failed_when: verifyPmdbServerStatus != "failed"

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true

