- name: "failed_to_upload_dbi_set_dbifile_with_s3"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "failed_to_upload_dbi_set_dbifile_with_s3"
     parent: None

  tasks:
  - block:
    - name: "{{ recipe_name }}: Start minio server"
      vars:
        s3_dir: "/local/minio_data"
      debug:
         msg:
          - "{{ lookup('obj_storage', 'minio', 'start', s3_dir, wantlist=True) }}"
      when: s3Support == "true"

    - name: "{{ recipe_name }}: Generate overlapping seq range and unique DBIs."
      include_role:
        name: common
        tasks_from: generate_overlapping_dbi_set
      vars:
        Type: "0"
        VblkNum: "1000"
        VblkPer: "8"
        DBIPerSet: "5"
        ChunkNum: "-1"
      register: chunk

    - name: "{{ recipe_name }}: copy dbi set files into a dbisetfiles directory"
      vars:
        Chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('helper', 'clone_dbi_set', Chunk, wantlist=True) }}"

    - name: "{{ recipe_name }}: delete any dbi set file from s3."
      vars:
        input_params:
          chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('obj_storage', 'delete_set_file', input_params, wantlist=True) }}"

    - name: "{{ recipe_name }}: Perform GC."
      vars:
        input_params:
          debug_mode: "false"
          chunk: "{{ chunk['msg'][0] }}"
      debug:
         msg: "{{ lookup('garbage_collection', 'single_exec', 'start', input_params, wantlist=True) }}"

    - name: "{{ recipe_name }}: Marker file present or not."
      vars:
        formal_params: {
                "chunk" : "{{ chunk['msg'][0] }}",
                }
      debug:
        msg: "{{ lookup('obj_storage', 'get_markers', formal_params, wantlist=True) }}"
      register: marker_check

    - name: "{{ recipe_name }}: Validate GC and Nisd Marker "
      vars:
        gc_marker: "{{ marker_check.msg[0] }}"
        nisd_marker: "{{ marker_check.msg[1] }}"
      debug:
        msg: "GC Marker : {{ gc_marker }} | NISD Marker : {{ nisd_marker }}"
      failed_when: (gc_marker != nisd_marker) or (gc_marker is none)
    
    # - name: "{{ recipe_name }}: Start data validation"
    #   vars:
    #     Chunk: "{{ chunk['msg'][0] }}"
    #   debug:
    #      msg: "{{ lookup('data_gen', 'validator', Chunk, wantlist=True) }}"
