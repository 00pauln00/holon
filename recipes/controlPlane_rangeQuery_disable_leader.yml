- import_playbook: controlPlane_operation_all.yml

- name: "controlplane_rangeQuery_disable_leader.yml"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "controlplane_rangeQuery_disable_leader"
    parent: "controlPlane_operation_all.yml"

  tasks:
  - block:
     - name: "Check if parent recipe failed"
       debug: msg="Check if parent recipe {{ parent }} failed"
       failed_when: terminate_recipe == true

    # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is 'controlplane'."
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "controlplane")

     - name: "{{ recipe_name }}: Get the leader and follower uuids."
       include_role:
         name: common
         tasks_from: get_follower_stats

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeWrite with n as 5."
       vars:
         input_param: {
                'Operation': 'write',
                'OutfileName': 'Rangewrite_LeaderChange',
                'NoofWrites': '5',
                'wait_for_outfile': True
                 }
         ncpcliwr: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Write key-value from ncpc."
       with_items:
          - "{{ ncpcliwr }}"
       register: writeres5keys
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status"
       debug:
         msg:
           - "Check write outfile status: {{ writeres5keys['results'][0]['item']['outfile_status'] }}"
       no_log: true
       failed_when: >
         (writeres5keys['results'][0]['item']['outfile_status'] != 0)

     - name: "{{ recipe_name }}: Verify write status"
       debug:
         msg: "Check write response status"
       no_log: true
       failed_when: >
         (item['Response']['Status'] != 0)
       loop: "{{ writeres5keys['results'][0]['item']['output_data'] }}"

     - name: "{{ recipe_name }}: Apply fault injection on leader and verify."
       include_role:
         name: common
         tasks_from: set_fault_injection_and_verify
       vars:
         ServerUUID: "{{ LeaderUUID['/0/leader-uuid'] }}"
         fault_injection_name: "pmdb_range_read_keep_snapshot"

     - name: "{{ recipe_name }}: Apply fault injection on leader and verify."
       include_role:
         name: common
         tasks_from: set_fault_injection_and_verify
       vars:
         ServerUUID: "{{ LeaderUUID['/0/leader-uuid'] }}"
         fault_injection_name: "pmdb_range_read_keep_old_snapshot"

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with n as 5."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'RangeRead_LeaderChange',
                'NoofWrites': '5',
                'seqNo': '',
                'wait_for_outfile': True
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: readres5keys
       no_log: true

     - name: "{{ recipe_name }}: Verify outfile status and read status"
       debug:
        msg:
         - "Check read outfile status: {{ readres5keys['results'][0]['item']['outfile_status'] }}"
       no_log: true
       failed_when:
         (readres5keys['results'][0]['item']['outfile_status'] != 0) or
         (readres5keys['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

     - name: "{{ recipe_name }}: Compare write and read output with all the keys passed."
       vars:
         readall: "{{ readres5keys['results'][0]['item']['output_data'][0]['Response']['ResultMap']}}"
       debug:
         msg: "compare read and write output with all the keys passed"
       failed_when:  item['Request']['Value'] != readall[item['Request']['Key']]
       loop: "{{ writeres5keys['results'][0]['item']['output_data'] }}"

     - name: "{{ recipe_name }}: Get the sequence no from the read result of the existing keys."
       vars:
          seq_no: "{{ readres5keys['results'][0]['item']['output_data'][0]['Response']['SeqNum'] }}"
       debug:
         msg: "Get the seq no"
       with_items:
           - "{{ seq_no }}"
       register: seqNo
       no_log: true

     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Get the leader and follower uuids."
       include_role:
         name: common
         tasks_from: get_follower_stats

     - name: "{{ recipe_name }}: Get leaderUUID."
       vars:
         oldLeader: "{{ LeaderUUID['/0/leader-uuid'] }}"
       debug:
        msg: "Get the leaderUUID"
       with_items:
        - "{{ oldLeader }}"
       register: oldLeaderUUID

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead with seq no passed."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'seqnoPassed_RangeRead_output',
                'NoofWrites': '5',
                'seqNo': '{{ seqNo["results"][0]["item"] }}',
                'wait_for_outfile': False
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "Read key-value from ncpc."
       with_items:
          - "{{ ncpclird }}"
       register: seqnoPassed_rangereadres
       no_log: true

     - name: "{{ recipe_name }}: Get the updated list of runing peers."
       include_role:
         name: common
         tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Disable Msg(Recv) net_recv_enabled from leader to the cluster."
       vars:
         stage: "disable_peers_mode"
         cmd: "net_recv_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ LeaderUUID['/0/leader-uuid'] }}"
         disable_net_rcv: "{{ lookup('niova_ctlrequest', 'apply_cmd', FollowerUUIDs[item], cmd, where, wantlist=True) }}"
       debug:
         msg: "{{ disable_net_rcv }}"
       loop: "{{ range(0, FollowerUUIDs | length) | list }}"
       loop_control:
         pause: 1
       no_log: True

     - name: "{{ recipe_name }}: Disable Msg(Send) net_send_enabled from leader to the cluster."
       vars:
         stage: "disable_peers_mode"
         cmd: "net_send_enabled@false"
         where: "/ctl_svc_nodes/uuid@{{ LeaderUUID['/0/leader-uuid'] }}"
         disable_send: "{{ lookup('niova_ctlrequest', 'apply_cmd', FollowerUUIDs[item], cmd, where, wantlist=True) }}"
       debug:
         msg: "{{ disable_send }}"
       loop: "{{ range(0, FollowerUUIDs | length) | list }}"
       loop_control:
         pause: 1
       no_log: True

     - name: "{{ recipe_name }}: Sleep for 3 sec to elect new leader"
       pause:
         seconds: 3

     - name: "{{ recipe_name }}: Get 'ctl_svc_nodes' list for all peers."
       vars:
        stage: "after_disable_all"
        raft_keys:
             - "/ctl_svc_nodes"
       set_fact:
         ctl_svc_nodes: "{{ lookup('niova_ctlrequest', 'lookup', FollowerUUIDs, raft_keys, wantlist=True) }}"

     - name: "{{ recipe_name }}: Verify ctl_svc_nodes/net_recv_enabled and ctl_svc_nodes/net_send_enabled on all peers for leader."
       include_role:
         name: common
         tasks_from: verify_net_send_rcv_disabled_against_leader
       vars:
        ctl_svc_nodes_arr: "{{ ctl_svc_nodes[idx]['//ctl_svc_nodes'] }}"
        old_leader: "{{ LeaderUUID['/0/leader-uuid'] }}"
       loop: "{{ range(0, ctl_svc_nodes | length) | list }}"
       loop_control:
         loop_var: idx

     - name: "{{ recipe_name }}: Wait until the new leader gets  elected."
       include_role:
         name: common
         tasks_from: verify_new_leader_election
       vars:
        peer_list: "{{ FollowerUUIDs }}"
        old_leader: "{{ LeaderUUID['/0/leader-uuid'] }}"
       loop: "{{ range(0, peer_list | length) | list }}"
       loop_control:
          loop_var: itr

     - name: "{{ recipe_name }}: Get the leader and follower uuids."
       include_role:
         name: common
         tasks_from: get_follower_stats

     - name: "{{ recipe_name }}: Get leaderUUID."
       vars:
         newLeader: "{{ LeaderUUID['/0/leader-uuid'] }}"
       debug:
         msg: "Get the leaderUUID"
       with_items:
         - "{{ newLeader }}"
       register: newLeaderUUID

      # Verify if new leader is elected.
     - name: "{{ recipe_name }}: Check if new leader is elected."
       debug:
         msg: "Check if new leader is elected."
       failed_when: >
         (oldLeaderUUID == newLeaderUUID )

     - name: "{{ recipe_name }}: Get outfile exists."
       stat:
         path: "{{ seqnoPassed_rangereadres['results'][0]['item'] + '.json' }}"
       register: file_status

     - debug:
         msg: "Outfile not exist"
       failed_when: file_status.stat.exists == False

     - name: "{{ recipe_name }}: Display the JSON file content"
       shell: cat {{seqnoPassed_rangereadres['results'][0]['item'] + '.json'}}
       register: result

     - name: save the Json data to a Variable as a Fact
       set_fact:
          jsondata: "{{ result.stdout | from_json }}"

       # check if read is successful
     - name: "{{ recipe_name }}: Check if read is successful"
       debug:
         msg: "Check if read is successful"
       failed_when: >
         (jsondata[0]['Response']['Status'] != 0)

     - name: "{{ recipe_name }}: Starting controlplane_client to do rangeRead."
       vars:
         input_param: {
                'Key': '*',
                'Operation': 'read',
                'OutfileName': 'seqno_RangeRead_output',
                'NoofWrites': '5',
                'seqNo': '{{ seqNo["results"][0]["item"] }}',
                'wait_for_outfile': True
                 }
         ncpclird: "{{ lookup('controlplane', 'ncpc', input_param, wantlist=True) }}"
       debug:
         msg: "read the result after removing fault injection with same seq no"
       with_items:
          - "{{ ncpclird }}"
       register: seqno_rangereadres

     - name: "{{ recipe_name }}: Verify outfile status and read status"
       debug:
        msg:
         - "Check read outfile status: {{ seqno_rangereadres['results'][0]['item']['outfile_status'] }}"
       no_log: true
       failed_when:
         (seqno_rangereadres['results'][0]['item']['outfile_status'] != 0) or
         (seqno_rangereadres['results'][0]['item']['output_data'][0]['Response']['Status'] != 0)

     - name: "{{ recipe_name }}: Get the sequence no from the read result after removing fault injection."
       vars:
          seq_no: "{{ seqno_rangereadres['results'][0]['item']['output_data'][0]['Response']['SeqNum'] }}"
       debug:
         msg: "Get the seq no"
       with_items:
           - "{{ seq_no }}"
       register: seqNo_latest

     - name: "{{ recipe_name }}: Validate that we should see updated seq no."
       vars:
          seqNo_earlier: "{{ seqNo['results'][0]['item'] }}"
          seqNo_new: "{{ seqNo_latest['results'][0]['item'] }}"
       debug:
         msg: "compare earlier seqno with old seq no."
       failed_when: seqNo_earlier == seqNo_new

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
