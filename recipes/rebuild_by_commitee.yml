- import_playbook: basic_raft_operation_with_client_activity.yml
  when: ClusterParams['ctype'] == "pumicedb"

- name: "Rebuild_by_commitee"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "rebuild_by_commitee"
     parent: "basic_raft_operation_with_client_activity"
     requirement: "pumicedb"
     client_obj: {}
     num_writes: 100
     number_of_app_uuids: 1
     peer_raft_keys:
          - "/raft_root_entry/0/term"
          - "/raft_root_entry/0/commit-idx"
          - "/raft_root_entry/0/last-applied"
          - "/raft_root_entry/0/last-applied-cumulative-crc"
          - "/raft_root_entry/0/sync-entry-idx"
          - "/raft_root_entry/0/sync-entry-term"
          - "/raft_root_entry/0/sync-entry-data-size"
          - "/raft_root_entry/0/sync-entry-crc"

  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Verify the holon started with pumicedb cluster"
      include_role:
        name: common
        tasks_from: recipe_compatibility_requirement

    - name: "{{ recipe_name }}: Get quorum value."
      include_role:
        name: common
        tasks_from: npeers_for_basic_leader_election

    - debug:
        msg: "Number of followers to be paused so that quorum will be intacted: {{ NRunningPeers | length - npeers_for_leader_elect | int }}"

    #Get the value of number_of_followers_to_pause so that quorum will be intacted.
    - name: "{{ recipe_name }}: Set number of followers to be paused."
      set_fact:
         number_of_followers_to_pause: "{{ NRunningPeers | length - npeers_for_leader_elect | int }}"

    - name: "{{ recipe_name }}: Get cluster information before pausing followers."
      include_role:
        name: common
        tasks_from: get_follower_stats

    #Get leader uuid.
    - set_fact:
         original_leader: "{{ LeaderUUID | dict2items | map(attribute='value') | list | first }}"

    - name: "{{ recipe_name }}: Pause number of followers."
      set_fact:
         pause_followers: "{{ lookup('niova_raftprocess', 'pause', FollowerUUIDs[item], wantlist=True) }}"
         inactive_followers: "{{ inactive_followers | default([]) + [FollowerUUIDs[item]] }}"
      loop: "{{ range(0, number_of_followers_to_pause | int) | list }}"

    - name: "{{ recipe_name }}: Get the list of peer UUIDs after pausing followers."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    #Create set of required number of app_uuids.
    - name: "{{ recipe_name }}: Get set of required number of app_uuids."
      include_role:
        name: common
        tasks_from: create_app_uuid_set
      vars:
        number_of_apps: "{{ number_of_app_uuids }}"

    - name: "{{ recipe_name }}: Verify leader is viable."
      include_role:
        name: common
        tasks_from: verify_leader_viable
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    #Perform write operations for multiple clients. (passing one client at a time.)
    - name: "{{ recipe_name }}: Perform write operations for multiple clients."
      include_role:
         name: common
         tasks_from: perform_writes
      vars:
        pmdb_apps: "{{ pmdb_app_uuids }}"
        ClientUUID: "{{ client_uuid.stdout }}"
        constant_number_of_writes: 100

    #wait for write operations to complete.
    - name: "{{ recipe_name }}: wait for write completion."
      include_role:
        name: common
        tasks_from: wait_for_write_completion
      vars:
        Client_UUID: "{{ client_uuid.stdout }}"

    #Verify client parameters after successful write operations.
    - name: "{{ recipe_name }}: Verify client parameters."
      include_role:
        name: common
        tasks_from: verify_client_parameters
      vars:
        Client_UUID: "{{ client_uuid.stdout }}"

    #Apply fault injection on all running peers.
    - name: "{{ recipe_name }}: Ignore writes on all running peers using fault injection."
      include_role:
        name: common
        tasks_from: set_fault_injection_and_verify
      vars:
        ServerUUID: "{{ NRunningPeers[item] }}"
        fault_injection_name: "raft_follower_ignores_non_hb_AE_request"
      loop: "{{ range(0, NRunningPeers | length) | list }}"

    #Set the value for fault_injected_peers.
    - set_fact:
         fault_injected_peers: "{{ NRunningPeers }}"

    #Unpause inactive followers.
    - name: "{{ recipe_name }}: Resume inactive followers."
      debug:
        msg: "Resuming inactive followers {{ lookup('niova_raftprocess', 'resume', inactive_followers[item], wantlist=True) }}"
      loop: "{{ range(0, inactive_followers | length) | list }}"

    #Pause original leader.
    - name: "{{ recipe_name }}: Pause original leader."
      debug:
        msg: "Pausing original leader {{ lookup('niova_raftprocess', 'pause', original_leader, wantlist=True) }}"

    - name: "{{ recipe_name }}: Wait until leader election happens."
      include_role:
        name: common
        tasks_from: wait_until_leader_election

    - name: "{{ recipe_name }}: Get cluster information before pausing followers."
      include_role:
        name: common
        tasks_from: get_follower_stats

    #Get leader uuid.
    - set_fact:
         leader_uuid_1: "{{ LeaderUUID | dict2items | map(attribute='value') | list | first }}"

    #Resume original leader.
    - name: "{{ recipe_name }}: Resume original leader."
      debug:
        msg: "Resuming original leader {{ lookup('niova_raftprocess', 'resume', original_leader, wantlist=True) }}"

    #Pause newly elected leader.
    - name: "{{ recipe_name }}: Pause newly elected leader."
      debug:
        msg: "Pausing newly elected leader {{ lookup('niova_raftprocess', 'pause', leader_uuid_1, wantlist=True) }}"

    - name: "{{ recipe_name }}: Wait until leader election happens."
      include_role:
        name: common
        tasks_from: wait_until_leader_election

    #Resume leader_1.
    - name: "{{ recipe_name }}: Resume leader_1."
      debug:
        msg: "Resuming previously paused leader {{ lookup('niova_raftprocess', 'resume', leader_uuid_1, wantlist=True) }}"

    - name: "{{ recipe_name }}: Get the list of peer UUIDs after resuming leader_1."
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    #Remove previously applied fault injection.
    - name: "{{ recipe_name }}: Remove previously applied fault injection."
      include_role:
        name: common
        tasks_from: remove_fault_injection_and_verify
      vars:
        ServerUUID: "{{ fault_injected_peers[item] }}"
        fault_injection_name: "raft_follower_ignores_non_hb_AE_request"
      loop: "{{ range(0, fault_injected_peers | length) | list }}"

    - name: "{{ recipe_name }}: Wait until all running peers show same last-applied-cumulative-crc."
      include_role:
        name: common
        tasks_from: wait_until_all_peers_show_same_cum_crc

    #Verify whether quorum has recovered writes.
    - name: "{{ recipe_name }}: Verify last-applied-cumulative-crc and sync-entry-crc are same on all peers."
      include_role:
        name: common
        tasks_from: verify_crc_on_all_peers

    rescue:
      - name: "Recipe failed"
        set_fact:
          terminate_recipe: true
