- import_playbook: basic_leader_election.yml
- name: "prevote_corner_case2"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "prevote_corner_case2"
     parent: "basic_leader_election"
     num_writes: 5
     raft_keys:
              - "/raft_root_entry/0/peer-uuid"
              - "/raft_root_entry/0/leader-uuid"
              - "/raft_root_entry/0/term"
              - "/raft_root_entry/0/commit-idx"
              - "/raft_root_entry/0/sync-entry-idx"
              - "/raft_root_entry/0/sync-entry-term"
              - "/raft_root_entry/0/sync-entry-crc"
              - "/raft_root_entry/0/sync-entry-data-size"
              - "/raft_root_entry/0/state"
              - "/raft_root_entry/0/last-applied"
              - "/raft_root_entry/0/last-applied-cumulative-crc"

  tasks:
  - block:
    - name: "Check if parent recipe failed."
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Get the latest list of running peer UUIDs"
      include_role:
        name: common
        tasks_from: get_server_uuid_info

    # Steps 1 to 4.
    - name: "{{ recipe_name }}: Disable net-send recv, apply fault injection, check for term value."
      include_role:
         name: common
         tasks_from: prevote_corner_case

    # check raft values on all the peers
    - name: "{{ recipe_name }}: Get Commit index value from all servers before single write."
      vars:
         stage: "verify_commit_index_before_write"
         peer_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeersBefore, raft_keys, wantlist=true) }}"
      debug:
        msg: "{{ peer_values }} "
      with_items:
        - "{{ peer_values }}"
      register: running_peers_info_before_write

    # start the client and perform writes 
    - name: "{{ recipe_name }}: Get unused client uuid for starting the client."
      include_role:
        name: common
        tasks_from: get_new_client_uuid
      register: client_uuid

    - debug:
        msg: "Client UUID: {{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Generate App UUID."
      shell: "/usr/bin/uuid"
      register: app_uuid1

    - name: "{{ recipe_name }}: Start the client."
      include_role:
         name: common
         tasks_from: start_client
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    #Perform write.
    - name: "{{ recipe_name}}: Write at seqno 0 and perform the write."
      vars:
        stage: "write"
        cmd: "input@{{ app_uuid1.stdout }}:0:0:0:0.write:0.{{ num_writes }}"
        where: "/pumice_db_test_client/input"
      set_fact:
         write_ops: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where, wantlist=True) }}"

    - name: "{{ recipe_name}}: Wait until write completes from client"
      vars:
        stage: "wait_for_write_op"
        raft_key: "/pumice_db_test_client/pmdb-test-apps/0/pmdb-seqno"
      debug:
        msg: "Waiting for client to finish writing"
      until: ((lookup('niova_ctlrequest', 'lookup', client_uuid.stdout, raft_key, wantlist=True) | dict2items | map(attribute='value') | list) != (num_writes - 1))
      loop: "{{ range(0, 10) | list }}"
      loop_control:
        pause: 1

    - name: Pause for 20 seconds to reflect the write on all peers.
      pause:
        seconds: 20

    # check raft values on all the peers
    - name: "{{ recipe_name }}: Get Commit index value from all servers after single write."
      vars:
         stage: "verify_commit_index_after_write"
         peer_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeersBefore, raft_keys, wantlist=true) }}"
      debug:
        msg: "Getting raft_root_entry for all servers after single write."
      with_items:
        - "{{ peer_values }}"
      register: running_peers_info_after_write

    #TODO verify commit index on all running peers.
    - name: "{{ recipe_name }}: Verify commit index before and after write operation."
      vars:
        term_prev: "{{ running_peers_info_before_write['results'][item]['item']['/0/commit-idx'] }}"
        term_next: "{{ running_peers_info_after_write['results'][item]['item']['/0/commit-idx'] }}"
      debug:
        msg: "Verify values for peer."
      failed_when: >
          (term_prev == term_next)
      loop: "{{ range(0, NRunningPeersBefore | length) | list }}"
    
    #Enabling Msg(Recv) from peer4 to the cluster.
    - name: "{{ recipe_name }}: Enable Msg(Recv) from peer4 to the cluster."
      vars:
        stage: "enable_peers_mode"
        cmd: "net_recv_enabled@true"
        where: "/ctl_svc_nodes/uuid@{{ NRunningPeersBefore[item] }}"
        enable_mode: "{{ lookup('niova_ctlrequest', 'apply_cmd', peer4, cmd, where, wantlist=True) }}"
      debug:
        msg: "{{ enable_mode }}"
      loop: "{{ range(0, NRunningPeersBefore | length) | list }}"
      no_log: True

    - name: "{{ recipe_name }}: Wait until leader election happens."
      vars:
         stage: "wait_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', NRunningPeers[item], '/raft_root_entry/0/leader-uuid', wantlist=True)| dict2items | map(attribute='value') | list | first != "null"
      retries: 4
      delay: 1
      loop: "{{ range(0, NRunningPeers | length) | list }}"
      loop_control:
        pause: 2

    - name: "{{ recipe_name }}: Get the leader and follower uuids."
      include_role:
         name: common
         tasks_from: get_follower_stats

    - set_fact: LeaderUUID_after="{{ LeaderUUID['/0/leader-uuid'] }}"
    - name: "{{ recipe_name }}: Check if new leader is elected."
      debug:
        msg: "Check if new leader is elected."
      failed_when: >
        ( peer4 == "leader" )

    - name: "{{ recipe_name }}: Get raft_root_entry values of all peers."
      vars:
        stage: "stage0"
        raft_root_entry: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
      debug:
         msg: "Getting raft_root_entry for all servers."
      no_log: true
      with_items:
         - "{{ raft_root_entry }}"
         

    - set_fact:
       peer_info: []

   #TODO Check if all peers have same commit index 
  - name: "{{ recipe_name }}: Verify commit-idx , term remains same  on all peers."
    vars:
      stage: "verify_raft_values"
      raft_keys:
              - "/raft_root_entry/0/commit-idx"
              - "/raft_root_entry/0/term"
    set_fact:
      peer_info: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys, wantlist=True) }}"
    failed_when: >
      (peer_info[itr]['/0/commit-idx'] != peer_info[itr+1]['/0/commit-idx']) or
      (peer_info[itr]['/0/term'] != peer_info[itr+1]['/0/term']) 
    loop: "{{ range(0, NRunningPeers | length - 1)| list }}"
    loop_control:
       loop_var: itr