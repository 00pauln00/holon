- name: "basic_recipe_for_covid_goapp"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "basic_recipe_for_covid_goapp"
    parent: None
    uid: "{{ app_uuid.stdout }}:0:0:0:0"

  tasks:
  - block:
       # start the servers
     - name: "{{ recipe_name }}: Print the UUIDs of all the servers"
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Start all the servers in the cluster"
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length) | list }}"

       # start the client
     - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
       include_role:
         name: common
         tasks_from: get_new_client_uuid
       register: client_uuid

     - debug:
        msg: "Client UUID: {{ client_uuid }}"

     - name: "{{ recipe_name}}: Start the client for {{ app_type}} Application"
       include_role:
         name: common
         tasks_from: start_client_golang
       vars:
         ClientUUID: "{{ client_uuid.stdout }}"

       # generate rncui
     - name: "{{ recipe_name }}: Generate App UUID"
       shell: "/usr/bin/uuid"
       register: app_uuid

       # write single entry
     - name: "{{ recipe_name}}: Write the single key-value pair to COVID Application"
       vars:
         stage: "CovidWriteOne"
         cmd: "WriteOne#{{ app_uuid.stdout }}:0:0:0:0#Africa#OWID_AFR#5000#2000#{{ recipe_name }}_{{ stage }}"
         WriteOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "write single entry"
       with_items:
         - "{{ WriteOneValue }}"
       register: WriteOne

       # check if write is successful
     - name: "{{ recipe_name }}: Check if write is successful"
       debug:
         msg: "{{ WriteOne }}"
       failed_when: >
         (WriteOne['results'][0]['item']['status'] != 0) and
         (WriteOne['results'][0]['item']['response'][uid]['Status'] != 0)

       # read single entry
     - name: "{{ recipe_name}}: Read value for key: Africa(location) from COVID application"
       vars:
         stage: "CovidReadOne"
         cmd: "ReadOne#Africa#{{ app_uuid.stdout }}:0:0:0:0#{{ recipe_name }}_{{ stage }}"
         ReadOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "read single entry"
       with_items:
         - "{{ ReadOneValue }}"
       register: ReadOne

     - name: "{{ recipe_name }}: Check if read is successful"
       debug:
        msg: "check if read is successful"
       failed_when:
         ReadOne['results'][0]['item']['status'] != 0

       # compare read and write
     - name: "{{ recipe_name }}: Comparing read and write "
       vars:
        Readrequest: "{{ ReadOne['results'][0]['item']['response'][uid] }}"
       debug:
        msg: "compare read and write"
       failed_when: >
         (Readrequest['Location'] != "Africa") and
         (Readrequest['Iso_code'] != "OWID_AFR") and
         (Readrequest['People_vaccinated'] != "2000") and
         (Readrequest['Total_vaccinations'] != "5000")

       # Get the path for csv file
     - name: "{{ recipe_name }}: Get the path for csv file"
       set_fact:
        NIOVA_BIN_PATH: "{{ lookup('env','NIOVA_BIN_PATH') }}"

        # write multiple entries
     - name: "{{ recipe_name}}: Write all entries from csv file to COVID application"
       vars:
         stage: "CovidWriteMulti"
         cmd: "WriteMulti#{{ NIOVA_BIN_PATH }}/vaccinations.csv#{{ recipe_name }}_{{ stage }}"
         WriteMultiValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "write all entries"
       with_items:
         - "{{ WriteMultiValue }}"
       register: WriteMulti
       no_log: True

        # read multiple entries
     - name: "{{ recipe_name}}: Read all entry to the COVID application through csv file"
       vars:
         stage: "CovidReadMulti"
         cmd: "ReadMulti#{{ recipe_name }}_{{ stage }}"
         ReadMultiValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
        debug:
         msg: "read all entries"
       with_items:
         - "{{ ReadMultiValue }}"
       register: ReadMulti  
       no_log: True

        # get leader
     - name: "{{ recipe_name}}: Get Leader UUID"
       vars:
         stage: 'getLeader'
         cmd: "get_leader#{{ recipe_name }}_{{ stage }}"
         getLeader_values: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "Get the Old Leader UUID {{ getLeader_values }}"
       with_items:
         - "{{ getLeader_values }}"
       register: OldLeaderUUID

       # pause the leader
     - name: "{{ recipe_name }}: Pause  leader process."
       debug:
        msg: "Pausing leader process {{ lookup('niova_raftprocess', 'pause', OldLeaderUUID['results'][0]['item']['response'], wantlist=True) }}"

     - name: "{{ recipe_name }}: Printing the list of all server"
       include_role:
          name: common
          tasks_from: get_server_uuid_info

       # verify new leader is elected
     - name: "{{ recipe_name }}: Verify new leader is elected successfully"
       include_role:
         name: common
         tasks_from: verify_new_leader_election
       vars:
         old_leader: "{{ OldLeaderUUID['results'][0]['item']['response'] }}"
         peer_list: "{{ NRunningPeers }}"
       loop: "{{ range(0, peer_list | length) | list }}"
       loop_control:
          loop_var: itr

       # get new leader
     - name: "{{ recipe_name }}: Get new leader uuid value"
       vars:
        stage: "getLeaderNew"
        cmd: "get_leader#{{ recipe_name }}_{{ stage }}"
        getNewLeader_values: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "Get the Old Leader UUID {{ getNewLeader_values }}"
       with_items:
         - "{{ getNewLeader_values }}"
       register: NewLeaderUUID     

       # check if new leader is elected
     - name: "{{ recipe_name}}: Check if new leader is elected"
       debug:
         msg: "Old leader : {{ OldLeaderUUID }} and New leader : {{ NewLeaderUUID }}"
       failed_when: OldLeaderUUID == NewLeaderUUID

       # read single entry
     - name: "{{ recipe_name}}: Read value for key: Africa(location) from COVID application"
       vars:
         stage: "CovidReadTwo"
         cmd: "ReadOne#Africa#{{ app_uuid.stdout }}:0:0:0:0#{{ recipe_name }}_{{ stage }}"
         ReadOneNewValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "read single entry"
       with_items:
         - "{{ ReadOneNewValue }}"
       register: ReadOneNew

       # comparing read entry of old and new leader
     - name: "{{ recipe_name }}: Comparing read single entry of the old leader with new leader"
       vars:
        uid: "{{ app_uuid.stdout }}:0:0:0:0"
        Readrequest: "{{ ReadOneNew['results'][0]['item']['response'][uid] }}"
       debug:
        msg: "Compare read request of old and new leader"
       failed_when: >
         (Readrequest['Location'] != "Africa") and
         (Readrequest['Iso_code'] != "OWID_AFR") and
         (Readrequest['People_vaccinated'] != "2000") and
         (Readrequest['Total_vaccinations'] != "5000")

       # generate rncui
     - name: "{{ recipe_name }}: Generate App UUID"
       shell: "/usr/bin/uuid"
       register: app_uuid_new

        # write single entry
     - name: "{{ recipe_name}}: Write single key-value pair to Covid Application"
       vars:
          stage: "CovidWriteTwo"
          cmd: "WriteOne#{{ app_uuid_new.stdout }}:0:0:0:0#NewYork#NYC#5000#5000#{{ recipe_name }}_{{ stage }}"
          WriteOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "write single entry"
       with_items:
         - "{{ WriteOneValue }}"
       register: WriteOne
       no_log: True

        # check if write is successful
     - name: "{{ recipe_name }}: Check if write is successful"
       vars:
         uid: "{{ app_uuid.stdout }}:0:0:0:0"
       debug:
         msg: "{{ WriteOne }}"
       failed_when: >
         (WriteOne['results'][0]['item']['status'] != 0) and
         (WriteOne['results'][0]['item']['response'][uid]['Status'] != 0)

        # read single entry
     - name: "{{ recipe_name}}:Read value for key: NewYork(location) from COVID application"
       vars:
          stage: "CovidReadThree"
          cmd: "ReadOne#NewYork#{{ app_uuid.stdout }}:0:0:0:0#{{ recipe_name }}_{{ stage }}"
          ReadOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "Read single entry"
       with_items:
         - "{{ ReadOneValue }}"
       register: ReadOne
       no_log: True

        # comparing read entry
     - name: "{{ recipe_name }}: Comparing read single entry of the COVID Application form json output"
       vars:
        Readrequest: "{{ ReadOne['results'][0]['item']['response'][uid] }}"
       debug:
        msg: "Compare {{ Readrequest }}"
       failed_when: >
         (Readrequest['Location'] != "NewYork") and
         (Readrequest['Iso_code'] != "NYC") and
         (Readrequest['People_vaccinated'] != "5000") and
         (Readrequest['Total_vaccinations'] != "5000")