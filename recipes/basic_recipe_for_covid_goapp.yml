- name: "basic_recipe_for_covid_goapp"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "basic_recipe_for_covid_goapp"
    parent: None
    uid: "{{ app_uuid.stdout }}:0:0:0:0"

  tasks:
  - block:
      # check for the app_type
     - name: "{{ recipe_name }}: Check if the app_type is covid"
       vars:
         app_type: "{{ app_type}}"
       debug:
         msg: "app_type should be covid"
       failed_when:
         (app_type != "covid")

       # start the servers
     - name: "{{ recipe_name }}: Print the UUIDs of all the servers"
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Start all the servers in the cluster"
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length) | list }}"

       # start the client
     - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
       include_role:
         name: common
         tasks_from: get_new_client_uuid
       register: client_uuid

     - debug:
        msg: "Client UUID: {{ client_uuid }}"

     - name: "{{ recipe_name }}: Pause for 3 seconds"
       pause:
         seconds: 3

       # generate rncui
     - name: "{{ recipe_name }}: Generate App UUID"
       shell: "/usr/bin/uuid"
       register: app_uuid

       # write single entry
     - name: "{{ recipe_name}}: Write the single key-value pair to COVID Application"
       vars:
         stage: "CovidWriteOne"
         cmd: "WriteOne#{{ app_uuid.stdout }}:0:0:0:0#Africa#OWID_AFR#5000#2000#{{ recipe_name }}_{{ stage }}"
         WriteOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "write single entry: {{ WriteOneValue }}"
       with_items:
         - "{{ WriteOneValue }}"
       register: WriteOne
       #no_log: True

       # check if write is successful
     - name: "{{ recipe_name }}: Check if write is successful"
       debug:
         msg: "check if write is successful"
       failed_when: >
         (WriteOne['results'][0]['item']['status'] != 0) or
         (WriteOne['results'][0]['item']['response'][uid]['Status'] != '0')

       # read single entry
     - name: "{{ recipe_name}}: Read value for key: Africa(location) from COVID application"
       vars:
         stage: "CovidReadOne"
         cmd: "ReadOne#Africa#{{ app_uuid.stdout }}:0:0:0:0#{{ recipe_name }}_{{ stage }}"
         ReadOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "read single entry"
       with_items:
         - "{{ ReadOneValue }}"
       register: ReadOne
       no_log: True

     - name: "{{ recipe_name }}: Check if read is successful"
       debug:
        msg: "check if read is successful"
       failed_when:
         ReadOne['results'][0]['item']['status'] != 0

       # compare read and write
     - name: "{{ recipe_name }}: Comparing read and write "
       vars:
        OldLeader_rdrqst: "{{ ReadOne['results'][0]['item']['response'][uid] }}"
       debug:
        msg: "compare read and write"
       failed_when: >
         (OldLeader_rdrqst['Location'] != "Africa") or
         (OldLeader_rdrqst['IsoCode'] != "OWID_AFR") or
         (OldLeader_rdrqst['PeopleVaccinated'] != "2000") or
         (OldLeader_rdrqst['TotalVaccinations'] != "5000")

       # Get the path for csv file
     - name: "{{ recipe_name }}: Get the path for csv file"
       set_fact:
        NIOVA_BIN_PATH: "{{ lookup('env','NIOVA_BIN_PATH') }}"

        # write multiple entries
     - name: "{{ recipe_name}}: Write all entries from csv file to COVID application"
       vars:
         stage: "CovidWriteMulti"
         cmd: "WriteMulti#{{ NIOVA_BIN_PATH }}/vaccinations.csv#{{ recipe_name }}_{{ stage }}"
         WriteMultiValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "write all entries "
       with_items:
         - "{{ WriteMultiValue }}"
       register: WriteMulti
       no_log: True

        # read multiple entries
     - name: "{{ recipe_name}}: Read all entry to the COVID application through csv file"
       vars:
         stage: "CovidReadMulti"
         cmd: "ReadMulti#{{ recipe_name }}_{{ stage }}"
         ReadMultiValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "read all entries  {{ ReadMultiValue }}"
       with_items:
         - "{{ ReadMultiValue }}"
       register: ReadMulti
       no_log: True

    # convert csv file into json format.
     - name: Read data from CSV file and return a dictionary
       read_csv:
        path: "{{ NIOVA_BIN_PATH }}/vaccinations.csv"
        key: location
       register: values

      # compare read multiple entries and csv file entries
     - name: "{{ recipe_name }}: Comparing Read multiple entries and csv file entries of COVID Application "
       vars:
        ReadMultiValue : "{{ReadMulti['results'][0]['item']['response']}}"
        Location : "{{ReadMultiValue[item]['Location']}}"
       debug:
        msg: "compare read entries with csv file entries"
       failed_when: >
         (ReadMultiValue[item]['Location'] != values['dict'][Location]['location']) or
         (ReadMultiValue[item]['IsoCode'] != values['dict'][Location]['iso_code']) or
         (ReadMultiValue[item]['PeopleVaccinated'] != values['dict'][Location]['people_vaccinated']) and
         (ReadMultiValue[item]['PeopleVaccinated'] < values['dict'][Location]['people_vaccinated']) or
         (ReadMultiValue[item]['TotalVaccinations'] != values['dict'][Location]['total_vaccinations']) and
         (ReadMultiValue[item]['TotalVaccinations'] < values['dict'][Location]['total_vaccinations'])
       loop: "{{ ReadMultiValue.keys()|sort }}"
       register: Readmulti_values

       # get leader
     - name: "{{ recipe_name}}: Get Leader UUID"
       vars:
         stage: 'getLeader'
         cmd: "GetLeader#{{ recipe_name }}_{{ stage }}"
         getLeader_values: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "Get the Old Leader UUID {{ getLeader_values }}"
       with_items:
         - "{{ getLeader_values }}"
       register: OldLeaderUUID
       #no_log: True

       # pause the leader
     - name: "{{ recipe_name }}: Pause  leader process."
       debug:
        msg: "Pausing leader process {{ lookup('niova_raftprocess', 'pause', OldLeaderUUID['results'][0]['item']['response'], wantlist=True) }}"

     - name: "{{ recipe_name }}: Printing the list of all server"
       include_role:
          name: common
          tasks_from: get_server_uuid_info

     - name: "{{ recipe_name }}: Pause for 3 seconds"
       pause:
         seconds: 3

       # verify new leader is elected
     - name: "{{ recipe_name }}: Verify new leader is elected successfully"
       include_role:
         name: common
         tasks_from: verify_new_leader_election
       vars:
         old_leader: "{{ OldLeaderUUID['results'][0]['item']['response'] }}"
         peer_list: "{{ NRunningPeers }}"
       loop: "{{ range(0, peer_list | length) | list }}"
       loop_control:
          loop_var: itr

       # get new leader
     - name: "{{ recipe_name }}: Get new leader uuid value"
       vars:
        stage: "GetLeaderNew"
        cmd: "GetLeader#{{ recipe_name }}_{{ stage }}"
        getNewLeader_values: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "Get the Old Leader UUID {{ getNewLeader_values }}"
       with_items:
         - "{{ getNewLeader_values }}"
       register: NewLeaderUUID
       no_log: True

       # check if new leader is elected
     - name: "{{ recipe_name}}: Check if new leader is elected"
       debug:
         msg: "Old leader : {{ OldLeaderUUID }} and New leader : {{ NewLeaderUUID }}"
       failed_when: OldLeaderUUID == NewLeaderUUID
       no_log: True

     - name: "{{ recipe_name }}: Resume previous  leader process."
       debug:
        msg: "Resuming leader process {{ lookup('niova_raftprocess', 'resume', OldLeaderUUID['results'][0]['item']['response'], wantlist=True) }}"

     - name: "{{ recipe_name }}: Pause for 4 seconds"
       pause:
         seconds: 4

     - name: "{{ recipe_name }}: Printing the list of all server"
       include_role:
          name: common
          tasks_from: get_server_uuid_info

       # read single entry
     - name: "{{ recipe_name}}: Read value for key: Africa(location) from COVID application"
       vars:
         stage: "CovidReadTwo"
         cmd: "ReadOne#Africa#{{ app_uuid.stdout }}:0:0:0:0#{{ recipe_name }}_{{ stage }}"
         ReadOneNewValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "read single entry"
       with_items:
         - "{{ ReadOneNewValue }}"
       register: ReadOneNew
       no_log: True

        # comparing read entry of old and new leader
     - name: "{{ recipe_name }}: Comparing read single entry of the golang app form json output file "
       vars:
        uid: "{{ app_uuid.stdout }}:0:0:0:0"
        prev_val: "{{ ReadOne['results'][0]['item']['response'][uid] }}"
        NewLeader_rdreqst: "{{ ReadOneNew['results'][0]['item']['response'][uid] }}"
       debug:
        msg: "Compare read request of old and new leader"
       failed_when: >
         (NewLeader_rdreqst['Location'] != prev_val['Location']) or
         (NewLeader_rdreqst['IsoCode'] != prev_val['IsoCode']) or
         (NewLeader_rdreqst['PeopleVaccinated'] < prev_val['PeopleVaccinated'])

       # generate rncui
     - name: "{{ recipe_name }}: Generate App UUID"
       shell: "/usr/bin/uuid"
       register: app_uuid_new

        # write single entry
     - name: "{{ recipe_name}}: Write single key-value pair to Covid Application"
       vars:
          stage: "CovidWriteTwo"
          cmd: "WriteOne#{{ app_uuid_new.stdout }}:0:0:0:0#Africa#OWID_AFR#5000#2000#{{ recipe_name }}_{{ stage }}"
          WriteOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "write single entry"
       with_items:
         - "{{ WriteOneValue }}"
       register: WriteOne
       no_log: True

        # check if write is successful
     - name: "{{ recipe_name }}: Check if write is successful"
       vars:
         uid: "{{ app_uuid_new.stdout }}:0:0:0:0"
       debug:
         msg: "{{ WriteOne }}"
       failed_when: >
         (WriteOne['results'][0]['item']['status'] != 0) or
         (WriteOne['results'][0]['item']['response'][uid]['Status'] != '0')
       no_log: True

        # read single entry
     - name: "{{ recipe_name}}:Read value for key: Africa(location) from COVID application"
       vars:
          stage: "CovidReadThree"
          cmd: "ReadOne#Africa#{{ app_uuid_new.stdout }}:0:0:0:0#{{ recipe_name }}_{{ stage }}"
          ReadOneValue: "{{ lookup('app_cmd', cmd, client_uuid.stdout, wantlist=True) }}"
       debug:
         msg: "Read single entry"
       with_items:
         - "{{ ReadOneValue }}"
       register: ReadTwo
       no_log: True

        # comparing read entry
     - name: "{{ recipe_name }}: Comparing read single entry of the COVID Application form json output"
       vars:
        uid1: "{{ app_uuid_new.stdout }}:0:0:0:0"
        Old_rdreqst: "{{ ReadOneNew['results'][0]['item']['response'][uid] }}"
        Readrequest: "{{ ReadTwo['results'][0]['item']['response'][uid1] }}"
       debug:
        msg: "Compare read values with previous read value"
       failed_when: >
         (Readrequest['Location'] != Old_rdreqst['Location']) or
         (Readrequest['IsoCode'] != Old_rdreqst['IsoCode']) or
         (Readrequest['PeopleVaccinated'] <= Old_rdreqst['PeopleVaccinated']) or
         (Readrequest['TotalVaccinations'] <= Old_rdreqst['TotalVaccinations'])

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
