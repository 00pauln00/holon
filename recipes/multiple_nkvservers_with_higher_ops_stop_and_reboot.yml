- name: "multiple_nkvservers_with_higher_ops_stop_and_reboot"
  hosts: localhost
  connection: local
  vars:
    recipe_name: "multiple_nkvservers_with_higher_ops_stop_and_reboot"
    parent: None
    no_of_operations: 10000

  tasks:
  - block:
       # Check for the app_type.
     - name: "{{ recipe_name }}: Check if the app_type is 'niovakv'"
       vars:
         app_type: "{{ app_type }}"
       debug:
         msg: "app_type is: {{ app_type }}"
       failed_when:
         (app_type != "niovakv")

       # Start pmdb servers.
     - name: "{{ recipe_name }}: get the list of non-running servers."
       include_role:
          name: common
          tasks_from: get_server_uuid_info

       #Get multiple client uuids using common task.
     - name: "Get multiple client uuids."
       vars:
         number_of_clients: 5
       include_role:
         name: common
         tasks_from: get_multiple_client_uuids
       loop: "{{ range(0, number_of_clients) | list }}"

      # Start all PMDB servers.
     - name: "{{ recipe_name }}: Start pmdb servers in the cluster."
       include_role:
         name: common
         tasks_from: start_server_golang
       vars:
         ServerUUID: "{{ NonRunningServers[item] }}"
       loop: "{{ range(0, NonRunningServers | length) | list }}"

      #Start niovakv_server.
     - name: "{{ recipe_name }}: Start new niovakv server which starts pmdb client."
       include_role:
         name: common
         tasks_from: start_client_golang
       vars:
         ClientUUID: "{{ ClientUUIDS[item] }}"
       loop: "{{ range(0, ClientUUIDS | length) |list }}"

     # Start lkvt_client to write the value.
     - name: "{{ recipe_name }}: Perform write operation."
       vars:
         database_type: 0
         size_of_key: 10
         key_prefix: "key"
         seed_random_generator: 1
         size_of_value: 20
         precent_put_get: 1
         no_of_concurrent_req: 10
         wait_for_outfile: false
         nkvclires: "{{ lookup('lkvt_client', database_type, size_of_key, key_prefix, seed_random_generator,
                        size_of_value, no_of_operations, precent_put_get, no_of_concurrent_req, wait_for_outfile, wantlist=True) }}"
       debug:
         msg: "Write key-value from lkvt_client."
       with_items:
          - "{{ nkvclires }}"
       register: writeres

     #Stop niovakv servers.
     - name: "{{ recipe_name }}: Stop niovakv server."
       include_role:
         name: common
         tasks_from: stop_client_golang
       vars:
         ClientUUID: "{{ ClientUUIDS[0] }}"

     #Start niovakv server again and see if it joins the cluster.
     - name: "{{ recipe_name }}: Start new niovakv server which starts pmdb client."
       include_role:
         name: common
         tasks_from: start_client_golang
       vars:
         ClientUUID: "{{ ClientUUIDS[0] }}"

     - name: "{{ recipe_name }}: prepare path to read recipe JSON file."
       shell: cat "{{base_dir}}"/"{{raft_uuid}}".json
       register: result

     - name: "{{ recipe_name }}: Convert output to JSON format."
       set_fact:
         getNodeDetails: "{{ result.stdout | from_json }}"

     - name: "{{ recipe_name }}: Get the serf nodes from recipe JSON."
       set_fact:
         getNodeName: "{{ getNodeDetails | json_query(jmesquery) }}"
       vars:
         jmesquery: 'serf_nodes."{{  ClientUUIDS[0] }}"'

     #Check if rebooted niovakv server joins again.
     - name: "{{ recipe_name }}: Wait until node status gets changed."
       vars:
         Operation: "membership"
         Key: ""
         Value: ""
         OutfileName: "nodestatus"
         NumRequest: 0
         MultiKey: False
         Sequential: False
       debug:
         msg: "Verifying node status"
       until: lookup('niova_kvclient', Operation, Key, Value, OutfileName, NumRequest, MultiKey, Sequential, wantlist=True) | dict2items | map(attribute='value') | map(attribute=getNodeName) | map(attribute='Status') | list | first == "alive"
       loop: "{{ range(0, 10) | list }}"
       loop_control:
          pause: 1

     - name: "{{ recipe_name }}: Check for outfile."
       vars:
         outfile_path: "{{ writeres['results'][0]['item'] }}"
         wait_for_outfile: True
         nkvclires: "{{ lookup('lkvt_client', outfile_path, wait_for_outfile, no_of_operations, wantlist=True) }}"
       debug:
         msg: "Write key-value from lkvt_client."
       with_items:
          - "{{ nkvclires }}"
       register: write_op

     - name: "{{ recipe_name }}: Get the information for number of request distributions across multiple niovakv servers."
       debug:
         msg: "{{ write_op['results'][0]['item']['NkvcClient']['NkvRequestDistributionCount'] }}"

      #Check if write is successful.
     - name: "{{ recipe_name }}: Check if Put is successful"
       debug:
         msg: "Check if write is successful"
       failed_when: >
         ( write_op['results'][0]['item']['Put_failures'] != 0 ) or
         ( write_op['results'][0]['item']['Put_count'] != write_op['results'][0]['item']['Request_count'] ) or
         ( write_op['results'][0]['item']['Get_count'] != 0 ) or
         ( write_op['results'][0]['item']['Put_success'] != write_op['results'][0]['item']['Request_count']) or
         ( write_op['results'][0]['item']['Get_failures'] != 0 ) or
         ( write_op['results'][0]['item']['Get_success'] != 0 )

     #Start lkvt_client to read the value.
     - name: "{{ recipe_name }}: Perform read operation."
       vars:
         database_type: 0
         size_of_key: 10
         key_prefix: "key"
         seed_random_generator: 1
         size_of_value: 20
         precent_put_get: 0
         no_of_concurrent_req: 2
         wait_for_outfile: false
         nkvclires: "{{ lookup('lkvt_client', database_type, size_of_key, key_prefix, seed_random_generator,
                        size_of_value, no_of_operations, precent_put_get, no_of_concurrent_req, wait_for_outfile, wantlist=True) }}"
       debug:
         msg: "Read key-value from lkvt_client."
       with_items:
          - "{{ nkvclires }}"
       register: readres

     - name: "{{ recipe_name }}: Check for outfile."
       vars:
         outfile_path: "{{ readres['results'][0]['item'] }}"
         wait_for_outfile: True
         nkvclires: "{{ lookup('lkvt_client', outfile_path, wait_for_outfile, no_of_operations, wantlist=True) }}"
       debug:
         msg: "Write key-value from lkvt_client."
       with_items:
          - "{{ nkvclires }}"
       register: read_op

     - name: "{{ recipe_name }}: Get the information for number of request distributions across multiple niovakv servers."
       debug:
         msg: "{{ read_op['results'][0]['item']['NkvcClient']['NkvRequestDistributionCount'] }}"

     #Check if read is successful.
     - name: "{{ recipe_name }}: Check if Get is successful"
       debug:
         msg: "Check if read is successful"
       failed_when: >
         ( read_op['results'][0]['item']['Get_failures'] != 0 ) or
         ( read_op['results'][0]['item']['Put_count'] != 0 ) or
         ( read_op['results'][0]['item']['Put_success'] != 0 ) or
         ( read_op['results'][0]['item']['Get_failures'] != 0 ) or
         ( read_op['results'][0]['item']['Get_count'] != read_op['results'][0]['item']['Request_count'] ) or
         ( read_op['results'][0]['item']['Get_success'] != read_op['results'][0]['item']['Request_count'])

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
          terminate_recipe: true
