- import_playbook: ../raft_recipes/basic_leader_election2.yml

- name: "prevote_checkquorum"
  hosts: localhost
  connection: local
  vars:
     recipe_name: "prevote_checkquorum"
     parent: "basic_leader_election2"
     FollowerUUIDs: []
     num_writes: 5
     raft_keys:
              - "/raft_root_entry/0/peer-uuid"
              - "/raft_root_entry/0/leader-uuid"
              - "/raft_root_entry/0/term"
              - "/raft_root_entry/0/commit-idx"
              - "/raft_root_entry/0/sync-entry-idx"
              - "/raft_root_entry/0/sync-entry-term"
              - "/raft_root_entry/0/sync-entry-crc"
              - "/raft_root_entry/0/sync-entry-data-size"
              - "/raft_root_entry/0/state"
              - "/raft_root_entry/0/last-applied"
              - "/raft_root_entry/0/last-applied-cumulative-crc"

  tasks:
  - block:
    - name: "Check if parent recipe failed"
      debug: msg="Check if parent recipe {{ parent }} failed"
      failed_when: terminate_recipe == true

    - name: "{{ recipe_name }}: Get the latest list of running peer UUIDs"
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Store the UUIDs for peers which needs to be started"
      set_fact:
         peers_to_be_started : "{{ NonRunningServers }}"

    - name: "{{ recipe_name }}: Start the remaining peers"
      include_role:
        name: common
        tasks_from: start_server
      vars:
        ServerUUID: "{{ peers_to_be_started[item] }}"
      loop: "{{ range(0, peers_to_be_started | length) | list }}"

    - name: "{{ recipe_name }}: Get the leader and follower uuids."
      include_role:
         name: common
         tasks_from: get_follower_stats

    - name: "{{ recipe_name }}: Get the raft values."
      vars:
         stage: "stage0_prevote_get_all"
         peer_values: "{{ lookup('niova_ctlrequest', 'lookup', LeaderUUID['/0/leader-uuid'], raft_keys) }}"
      debug:
        msg: "Get the raft values for running peers"
      no_log: true
      with_items:
       - "{{ peer_values }}"
      register: stage0_raftvals

    - name: "{{ recipe_name }}: Stop one of the peer process."
      vars:
        peer_to_kill: "{{ FollowerUUIDs | random }}"
      debug:
        msg: "{{ lookup('niova_raftprocess', 'kill', peer_to_kill) }}"

    #Start client
    - name: "{{ recipe_name }}: Get unused client uuid for starting the client"
      include_role:
        name: common
        tasks_from: get_new_client_uuid
      register: client_uuid

    - name: "{{ recipe_name }}: Generate App UUID"
      shell: "/usr/bin/uuid"
      register: app_uuid

    - name: "{{ recipe_name }}: Start client process"
      include_role:
        name: common
        tasks_from: start_client
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Verify leader is viable."
      include_role:
        name: common
        tasks_from: verify_leader_viable
      vars:
        ClientUUID: "{{ client_uuid.stdout }}"

    - name: "{{ recipe_name }}: Get the cluster information again after stopping the peer."
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - name: "{{ recipe_name }}: Get the leader and follower uuids."
      include_role:
         name: common
         tasks_from: get_follower_stats

    #Get the peers to be disabled.
    - set_fact: prev_chk_peer1="{{ FollowerUUIDs |  random }}"
    - set_fact: prev_chk_peer2="{{ FollowerUUIDs  | difference([prev_chk_peer1]) | random }}"
    - set_fact: prevchk_peers_to_disable="{{ [] + [prev_chk_peer1] + [prev_chk_peer2] }}"

    - set_fact:
         prevote_leader_before: "{{ LeaderUUID['/0/leader-uuid'] }}"

    - name: "{{ recipe_name }}: Get the raft values before disabling peers."
      vars:
         stage: "prevote_get_all"
         peer_values: "{{ lookup('niova_ctlrequest', 'lookup', prevchk_peers_to_disable, raft_keys) }}"
      debug:
        msg: "Get the raft values for running peers"
      no_log: true
      with_items:
       - "{{ peer_values }}"
      register: prevote_get_all

     #Disabling Msg(Recv) from leader to disabled peers.
    - name: "{{ recipe_name }}: Disable Msg(Recv) from leader to disabled peers."
      vars:
        stage: "disable_peers_mode"
        cmd: "net_recv_enabled@false"
        where: "/ctl_svc_nodes/uuid@{{ prevchk_peers_to_disable[item] }}"
        disable_mode: "{{ lookup('niova_ctlrequest', 'apply_cmd', prevote_leader_before, cmd, where) }}"
      debug:
        msg: "{{ disable_mode }}"
      loop: "{{ range(0, prevchk_peers_to_disable | length) | list }}"
      no_log: true

    - name: "{{ recipe_name }}: Verify that message received is disabled successfully on leader."
      vars:
        stage: "get_all_leader"
        raft_keys:
             - "/ctl_svc_nodes"
      set_fact:
         ctl_svc_nodes:  "{{ lookup('niova_ctlrequest', 'lookup', prevote_leader_before, raft_keys) }}"

    - name: "{{ recipe_name }}: Gather net_rcv_enabled values for peers to be disabled."
      vars:
        uuid: "{{ item['uuid'] }}"
        nre: "{{ item['net_recv_enabled'] }}"
        net_rcv_enabled: []
      set_fact:
         net_rcv_enabled: "{{ net_rcv_enabled + [nre] }}"
      loop: "{{ ctl_svc_nodes['//ctl_svc_nodes'] }}"
      when: uuid == prevchk_peers_to_disable[0] or uuid == prevchk_peers_to_disable[1]
      no_log: True

    - name: "{{ recipe_name }}: Check if peers are disabled."
      debug:
        msg: "Check if peers are disabled"
      failed_when: item != false
      loop: "{{ net_rcv_enabled }}"

    - name: "{{ recipe_name }}: Get the raft values after disabling peers."
      vars:
         stage: "prevote_get_all"
         peer_values: "{{ lookup('niova_ctlrequest', 'lookup', NRunningPeers, raft_keys) }}"
      debug:
        msg: "Get the raft values for running peers"
      no_log: true
      with_items:
       - "{{ peer_values }}"
      register: get_all_after_disable

    #Perform write.
    - name: "{{ recipe_name}}: Write at seqno 0 and perform the write."
      vars:
        stage: "write"
        cmd: "input@{{ app_uuid.stdout }}:0:0:0:0.write:0.{{ num_writes }}"
        where: "/pumice_db_test_client/input"
      debug:
        msg: "{{ lookup('niova_ctlrequest', 'apply_cmd', client_uuid.stdout, cmd, where) }}"
      no_log: true

    - name: "{{ recipe_name }}: Get the cluster information again after stopping the peer."
      include_role:
         name: common
         tasks_from: get_server_uuid_info

    - pause: seconds=10

    - name: "{{ recipe_name }}: Wait until leader election happens"
      vars:
         nrunningPeers: "{{ NRunningPeers | difference([prevote_leader_before]) }}"
         stage: "wait_leader_election"
      debug:
        msg: "Waiting for leader election"
      until: lookup('niova_ctlrequest', 'lookup', nrunningPeers[item], '/raft_root_entry/0/leader-uuid')['/0/leader-uuid'] != prevote_leader_before
      retries: 30
      delay: 2
      loop: "{{ range(0, nrunningPeers | length) | list }}"

    - name: "{{ recipe_name }}: Get the leader and follower uuids."
      include_role:
         name: common
         tasks_from: get_follower_stats

    - set_fact:
         prevote_leader_after: "{{ LeaderUUID['/0/leader-uuid'] }}"

    - name: "{{ recipe_name }}: Check if new leader is elected"
      debug:
        msg: "Check if new leader is elected"
      failed_when: prevote_leader_before == prevote_leader_after

    - name: "{{ recipe_name }}: Get the raft values after leader election"
      vars:
         nrunningPeers: "{{ NRunningPeers | difference([prevote_leader_before]) }}"
         stage: "prevote_get_all_after"
         peer_values: "{{ lookup('niova_ctlrequest', 'lookup', nrunningPeers, raft_keys) }}"
      debug:
        msg: "Get the raft values for running peers"
      no_log: true
      with_items:
       - "{{ peer_values }}"
      register: prevote_get_all_after

    #Check that term has been incremented only after leader election.
    - name: "{{ recipe_name }}: Verify raft values after leader election"
      vars:
        nrunningPeers: "{{ NRunningPeers | difference([prevote_leader_before]) }}"
        orig_val: "{{ stage0_raftvals['results'][0]['item'] }}"
        curr_val: "{{ prevote_get_all_after['results'][item]['item'] }}"
      debug:
        msg: "Verify all values after new leader election"
      failed_when: >
            (curr_val['/0/term'] <= orig_val['/0/term']) or
            (curr_val['/0/commit-idx'] <= orig_val['/0/commit-idx']) or
            (curr_val['/0/last-applied'] <= orig_val['/0/last-applied']) or
            (curr_val['/0/sync-entry-idx'] <= orig_val['/0/sync-entry-idx'])
      loop: "{{ range(0, nrunningPeers | length) | list }}"

    #Recipe cleanup
    #Enabling Msg(Recv) net_recv_enabled from leader to disabled peers."
    - name: "{{ recipe_name }}: Enable Msg(Recv) net_recv_enabled from leader to disabled peers."
      vars:
        stage: "enable_recv"
        cmd: "net_recv_enabled@true"
        where: "/ctl_svc_nodes/uuid@{{ prevchk_peers_to_disable[item] }}"
        enable_mode: "{{ lookup('niova_ctlrequest', 'apply_cmd', prevote_leader_before, cmd, where) }}"
      debug:
        msg: "{{ enable_mode }}"
      loop: "{{ range(0, prevchk_peers_to_disable | length) | list }}"
      no_log: true

    - name: "{{ recipe_name }}: Get 'ctl_svc_nodes' list for all peers."
      vars:
        stage: "after_enable_all"
        raft_keys:
             - "/ctl_svc_nodes"
      set_fact:
         ctl_svc_nodes_en: "{{ lookup('niova_ctlrequest', 'lookup', prevote_leader_before, raft_keys) }}"

    - name: "{{ recipe_name }}: Gather net_rcv_enabled values for peers to be enabled."
      vars:
        uuid: "{{ item['uuid'] }}"
        nre: "{{ item['net_recv_enabled'] }}"
        net_rcv_enabled_vals: []
      set_fact:
         net_rcv_enabled_vals: "{{ net_rcv_enabled_vals + [nre] }}"
      loop: "{{ ctl_svc_nodes_en['//ctl_svc_nodes'] }}"
      when: uuid == prevchk_peers_to_disable[0] or uuid == prevchk_peers_to_disable[1]
      no_log: True

    - name: "{{ recipe_name }}: Check if peers are enabled."
      debug:
        msg: "Check if peers are enabled"
      failed_when: item != true
      loop: "{{ net_rcv_enabled_vals }}"

    rescue:
      - name: "Recipe: {{ recipe_name }} failed"
        set_fact:
           terminate_recipe: true
